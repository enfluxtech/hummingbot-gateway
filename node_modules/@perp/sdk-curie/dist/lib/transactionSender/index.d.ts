import { ContractTransaction, Contract as EthersContract, BigNumber } from "ethers";
import { ContractName } from "../contracts";
export interface TransactionMetadata<Contract extends EthersContract = EthersContract, ContractFunctionName extends keyof Contract = keyof Contract> {
    contractName: ContractName;
    contractFunctionName: ContractFunctionName;
    args: Parameters<Contract[ContractFunctionName]>;
    txPayload?: {
        from?: string;
        to?: string;
        inputData?: string;
    };
}
interface IGetTransactionParams<Contract extends EthersContract = EthersContract, ContractFunctionName extends keyof Contract = keyof Contract> extends TransactionMetadata<Contract, ContractFunctionName> {
    account: string;
    contract: Contract;
    bypassGasEstimation?: boolean;
    value?: BigNumber;
}
export declare function getTransaction<Contract extends EthersContract, ContractFunctionName extends keyof Contract>({ value, account, contract, bypassGasEstimation, // NOTE: easily to debug
...metadata }: IGetTransactionParams<Contract, ContractFunctionName>): Promise<{
    transaction: ContractTransaction;
    metadata: {
        contractName: ContractName;
        contractFunctionName: keyof EthersContract;
        args: unknown[];
        txPayload: {
            from?: string | undefined;
            to?: string | undefined;
            inputData?: string | undefined;
        } | {
            from: string;
            to: string;
            value: BigNumber | undefined;
            inputData: string;
        };
    };
    gasLimit: string;
}>;
export {};
