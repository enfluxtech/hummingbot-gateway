// package: injective.tokenfactory.v1beta1
// file: injective/tokenfactory/v1beta1/query.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as google_api_annotations_pb from "../../../google/api/annotations_pb";
import * as cosmos_base_query_v1beta1_pagination_pb from "../../../cosmos/base/query/v1beta1/pagination_pb";
import * as injective_tokenfactory_v1beta1_authorityMetadata_pb from "../../../injective/tokenfactory/v1beta1/authorityMetadata_pb";
import * as injective_tokenfactory_v1beta1_params_pb from "../../../injective/tokenfactory/v1beta1/params_pb";
import * as injective_tokenfactory_v1beta1_genesis_pb from "../../../injective/tokenfactory/v1beta1/genesis_pb";

export class QueryParamsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryParamsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryParamsRequest): QueryParamsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryParamsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryParamsRequest;
  static deserializeBinaryFromReader(message: QueryParamsRequest, reader: jspb.BinaryReader): QueryParamsRequest;
}

export namespace QueryParamsRequest {
  export type AsObject = {
  }
}

export class QueryParamsResponse extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_tokenfactory_v1beta1_params_pb.Params | undefined;
  setParams(value?: injective_tokenfactory_v1beta1_params_pb.Params): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryParamsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryParamsResponse): QueryParamsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryParamsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryParamsResponse;
  static deserializeBinaryFromReader(message: QueryParamsResponse, reader: jspb.BinaryReader): QueryParamsResponse;
}

export namespace QueryParamsResponse {
  export type AsObject = {
    params?: injective_tokenfactory_v1beta1_params_pb.Params.AsObject,
  }
}

export class QueryDenomAuthorityMetadataRequest extends jspb.Message {
  getCreator(): string;
  setCreator(value: string): void;

  getSubDenom(): string;
  setSubDenom(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDenomAuthorityMetadataRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDenomAuthorityMetadataRequest): QueryDenomAuthorityMetadataRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDenomAuthorityMetadataRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDenomAuthorityMetadataRequest;
  static deserializeBinaryFromReader(message: QueryDenomAuthorityMetadataRequest, reader: jspb.BinaryReader): QueryDenomAuthorityMetadataRequest;
}

export namespace QueryDenomAuthorityMetadataRequest {
  export type AsObject = {
    creator: string,
    subDenom: string,
  }
}

export class QueryDenomAuthorityMetadataResponse extends jspb.Message {
  hasAuthorityMetadata(): boolean;
  clearAuthorityMetadata(): void;
  getAuthorityMetadata(): injective_tokenfactory_v1beta1_authorityMetadata_pb.DenomAuthorityMetadata | undefined;
  setAuthorityMetadata(value?: injective_tokenfactory_v1beta1_authorityMetadata_pb.DenomAuthorityMetadata): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDenomAuthorityMetadataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDenomAuthorityMetadataResponse): QueryDenomAuthorityMetadataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDenomAuthorityMetadataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDenomAuthorityMetadataResponse;
  static deserializeBinaryFromReader(message: QueryDenomAuthorityMetadataResponse, reader: jspb.BinaryReader): QueryDenomAuthorityMetadataResponse;
}

export namespace QueryDenomAuthorityMetadataResponse {
  export type AsObject = {
    authorityMetadata?: injective_tokenfactory_v1beta1_authorityMetadata_pb.DenomAuthorityMetadata.AsObject,
  }
}

export class QueryDenomsFromCreatorRequest extends jspb.Message {
  getCreator(): string;
  setCreator(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDenomsFromCreatorRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDenomsFromCreatorRequest): QueryDenomsFromCreatorRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDenomsFromCreatorRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDenomsFromCreatorRequest;
  static deserializeBinaryFromReader(message: QueryDenomsFromCreatorRequest, reader: jspb.BinaryReader): QueryDenomsFromCreatorRequest;
}

export namespace QueryDenomsFromCreatorRequest {
  export type AsObject = {
    creator: string,
  }
}

export class QueryDenomsFromCreatorResponse extends jspb.Message {
  clearDenomsList(): void;
  getDenomsList(): Array<string>;
  setDenomsList(value: Array<string>): void;
  addDenoms(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDenomsFromCreatorResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDenomsFromCreatorResponse): QueryDenomsFromCreatorResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDenomsFromCreatorResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDenomsFromCreatorResponse;
  static deserializeBinaryFromReader(message: QueryDenomsFromCreatorResponse, reader: jspb.BinaryReader): QueryDenomsFromCreatorResponse;
}

export namespace QueryDenomsFromCreatorResponse {
  export type AsObject = {
    denomsList: Array<string>,
  }
}

export class QueryModuleStateRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateRequest): QueryModuleStateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateRequest;
  static deserializeBinaryFromReader(message: QueryModuleStateRequest, reader: jspb.BinaryReader): QueryModuleStateRequest;
}

export namespace QueryModuleStateRequest {
  export type AsObject = {
  }
}

export class QueryModuleStateResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): injective_tokenfactory_v1beta1_genesis_pb.GenesisState | undefined;
  setState(value?: injective_tokenfactory_v1beta1_genesis_pb.GenesisState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateResponse): QueryModuleStateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateResponse;
  static deserializeBinaryFromReader(message: QueryModuleStateResponse, reader: jspb.BinaryReader): QueryModuleStateResponse;
}

export namespace QueryModuleStateResponse {
  export type AsObject = {
    state?: injective_tokenfactory_v1beta1_genesis_pb.GenesisState.AsObject,
  }
}

