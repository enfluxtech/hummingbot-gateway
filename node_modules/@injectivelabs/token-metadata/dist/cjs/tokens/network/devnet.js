"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokensBySymbolForDevnet2 = exports.getTokensBySymbolForDevnet1 = exports.getTokensBySymbolForDevnet = exports.devnet2SymbolToAddressMap = exports.devnet1SymbolToAddressMap = exports.devnetSymbolToAddressMap = void 0;
const tokens_1 = __importDefault(require("../tokens"));
exports.devnetSymbolToAddressMap = {
    INJ: '0xBe8d71D26525440A03311cc7fa372262c5354A3c',
};
exports.devnet1SymbolToAddressMap = {
    INJ: '0xBe8d71D26525440A03311cc7fa372262c5354A3c',
};
exports.devnet2SymbolToAddressMap = {
    INJ: '0xBe8d71D26525440A03311cc7fa372262c5354A3c',
};
const formatTokenMeta = (symbol, erc20AddressFromMap) => {
    const tokenMeta = tokens_1.default[symbol];
    if (!tokens_1.default[symbol].erc20 || !erc20AddressFromMap) {
        return tokenMeta;
    }
    return Object.assign(Object.assign({}, tokenMeta), { erc20: Object.assign(Object.assign({}, tokens_1.default[symbol].erc20), (erc20AddressFromMap ? { address: erc20AddressFromMap } : {})) });
};
const getTokensBySymbolForDevnet = () => Object.keys(tokens_1.default).reduce((result, symbol) => {
    const tokenSymbol = symbol;
    const erc20AddressFromMap = exports.devnetSymbolToAddressMap[tokenSymbol];
    return Object.assign(Object.assign({}, result), { [tokenSymbol.toUpperCase()]: formatTokenMeta(symbol, erc20AddressFromMap) });
}, {});
exports.getTokensBySymbolForDevnet = getTokensBySymbolForDevnet;
const getTokensBySymbolForDevnet1 = () => Object.keys(tokens_1.default).reduce((result, symbol) => {
    const tokenSymbol = symbol;
    const erc20AddressFromMap = exports.devnet1SymbolToAddressMap[tokenSymbol];
    return Object.assign(Object.assign({}, result), { [tokenSymbol.toUpperCase()]: formatTokenMeta(symbol, erc20AddressFromMap) });
}, {});
exports.getTokensBySymbolForDevnet1 = getTokensBySymbolForDevnet1;
const getTokensBySymbolForDevnet2 = () => Object.keys(tokens_1.default).reduce((result, symbol) => {
    const tokenSymbol = symbol;
    const erc20AddressFromMap = exports.devnet2SymbolToAddressMap[tokenSymbol];
    return Object.assign(Object.assign({}, result), { [tokenSymbol.toUpperCase()]: formatTokenMeta(symbol, erc20AddressFromMap) });
}, {});
exports.getTokensBySymbolForDevnet2 = getTokensBySymbolForDevnet2;
//# sourceMappingURL=devnet.js.map