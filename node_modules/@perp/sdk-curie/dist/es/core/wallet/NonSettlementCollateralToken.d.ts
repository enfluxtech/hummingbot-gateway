import { Big } from "big.js";
import { Contract } from "ethers";
import { ContractName } from "../../contracts";
import { IERC20Metadata } from "../../contracts/type";
import { Channel, ChannelEventSource } from "../../internal";
import { PerpetualProtocol } from "../PerpetualProtocol";
declare type CollateralEventName = "Approval" | "Transfer";
export declare class NonSettlementCollateralToken extends Channel<CollateralEventName> {
    private readonly _perp;
    private _cache;
    private _contract;
    private _contractReader;
    private _priceFeedContract;
    private _metadataInfo?;
    constructor(_perp: PerpetualProtocol, contract: IERC20Metadata, priceFeedContract: Contract);
    get contract(): IERC20Metadata;
    get priceFeedContract(): Contract;
    get address(): string;
    symbol({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<string>;
    name({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<string>;
    decimals({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<number>;
    weight({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<number>;
    cap({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    price({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<number>;
    balanceOf(account: string): Promise<Big>;
    allowance(account: string, spender: string): Promise<Big>;
    approve(account: string, spender: string, amount?: Big): Promise<{
        transaction: import("ethers").ContractTransaction;
        metadata: {
            contractName: ContractName;
            contractFunctionName: keyof Contract;
            args: unknown[];
            txPayload: {
                from?: string | undefined;
                to?: string | undefined;
                inputData?: string | undefined;
            } | {
                from: string;
                to: string;
                value: import("ethers").BigNumber | undefined;
                inputData: string;
            };
        };
        gasLimit: string;
    }>;
    protected _getEventSourceMap(): {
        Approval: ChannelEventSource<CollateralEventName>;
        Transfer: ChannelEventSource<CollateralEventName>;
    };
    private _fetch;
}
export {};
