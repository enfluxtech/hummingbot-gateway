// package: cosmwasm.wasm.v1
// file: cosmwasm/wasm/v1/query.proto

var cosmwasm_wasm_v1_query_pb = require("../../../cosmwasm/wasm/v1/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "cosmwasm.wasm.v1.Query";
  return Query;
}());

Query.ContractInfo = {
  methodName: "ContractInfo",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryContractInfoRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryContractInfoResponse
};

Query.ContractHistory = {
  methodName: "ContractHistory",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryContractHistoryRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryContractHistoryResponse
};

Query.ContractsByCode = {
  methodName: "ContractsByCode",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryContractsByCodeRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryContractsByCodeResponse
};

Query.AllContractState = {
  methodName: "AllContractState",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryAllContractStateRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryAllContractStateResponse
};

Query.RawContractState = {
  methodName: "RawContractState",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryRawContractStateRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryRawContractStateResponse
};

Query.SmartContractState = {
  methodName: "SmartContractState",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QuerySmartContractStateRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QuerySmartContractStateResponse
};

Query.Code = {
  methodName: "Code",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryCodeRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryCodeResponse
};

Query.Codes = {
  methodName: "Codes",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryCodesRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryCodesResponse
};

Query.PinnedCodes = {
  methodName: "PinnedCodes",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_query_pb.QueryPinnedCodesRequest,
  responseType: cosmwasm_wasm_v1_query_pb.QueryPinnedCodesResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.contractInfo = function contractInfo(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ContractInfo, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.contractHistory = function contractHistory(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ContractHistory, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.contractsByCode = function contractsByCode(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ContractsByCode, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.allContractState = function allContractState(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.AllContractState, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.rawContractState = function rawContractState(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.RawContractState, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.smartContractState = function smartContractState(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SmartContractState, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.code = function code(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Code, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.codes = function codes(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Codes, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.pinnedCodes = function pinnedCodes(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PinnedCodes, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

