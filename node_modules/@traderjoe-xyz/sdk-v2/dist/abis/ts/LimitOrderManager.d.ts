export declare const LimitOrderManagerABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "contract ILBFactory";
        readonly name: "factory";
        readonly type: "address";
    }, {
        readonly internalType: "contract IWNATIVE";
        readonly name: "wNative";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__InvalidBatchLength";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__InvalidNativeAmount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__InvalidOrder";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__InvalidPair";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__InvalidTokenOrder";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__NoOrdersToExecute";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__OrderAlreadyExecuted";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__OrderNotClaimable";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__OrderNotExecutable";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__OrderNotPlaced";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__OrdersAlreadyExecuted";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__TransferFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__ZeroAddress";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__ZeroAmount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LimitOrderManager__ZeroPositionLiquidity";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "PackedUint128Math__SubUnderflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SafeCast__Exceeds128Bits";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Uint256x256Math__MulDivOverflow";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly indexed: false;
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "positionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "liquidity";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly name: "OrderCancelled";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly indexed: false;
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "positionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "liquidity";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly name: "OrderClaimed";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly indexed: false;
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "positionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "liquidity";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly name: "OrderExecuted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly indexed: false;
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "positionId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "liquidity";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly name: "OrderPlaced";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "binStep";
            readonly type: "uint16";
        }, {
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }];
        readonly internalType: "struct ILimitOrderManager.OrderParams[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchCancelOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }];
        readonly internalType: "struct ILimitOrderManager.OrderParamsSamePair[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchCancelOrdersSamePair";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "binStep";
            readonly type: "uint16";
        }, {
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }];
        readonly internalType: "struct ILimitOrderManager.OrderParams[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchClaimOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }];
        readonly internalType: "struct ILimitOrderManager.OrderParamsSamePair[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchClaimOrdersSamePair";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "binStep";
            readonly type: "uint16";
        }, {
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }];
        readonly internalType: "struct ILimitOrderManager.OrderParams[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchExecuteOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }];
        readonly internalType: "struct ILimitOrderManager.OrderParamsSamePair[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchExecuteOrdersSamePair";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "binStep";
            readonly type: "uint16";
        }, {
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILimitOrderManager.PlaceOrderParams[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchPlaceOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum ILimitOrderManager.OrderType";
            readonly name: "orderType";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint24";
            readonly name: "binId";
            readonly type: "uint24";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILimitOrderManager.PlaceOrderParamsSamePair[]";
        readonly name: "orders";
        readonly type: "tuple[]";
    }];
    readonly name: "batchPlaceOrdersSamePair";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "orderPositionIds";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }];
    readonly name: "cancelOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderPositionId";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }];
    readonly name: "claimOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderPositionId";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }];
    readonly name: "executeOrders";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "positionId";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }];
    readonly name: "getCurrentAmounts";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getFactory";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBFactory";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }];
    readonly name: "getLastPositionId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }];
    readonly name: "getOrder";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "positionId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "liquidity";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILimitOrderManager.Order";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly internalType: "uint256";
        readonly name: "positionId";
        readonly type: "uint256";
    }];
    readonly name: "getPosition";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "liquidity";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint128";
            readonly name: "amount";
            readonly type: "uint128";
        }, {
            readonly internalType: "bool";
            readonly name: "withdrawn";
            readonly type: "bool";
        }];
        readonly internalType: "struct ILimitOrderManager.Position";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }];
    readonly name: "isOrderExecutable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "enum ILimitOrderManager.OrderType";
        readonly name: "orderType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint24";
        readonly name: "binId";
        readonly type: "uint24";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "placeOrder";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "orderPositionId";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}];
