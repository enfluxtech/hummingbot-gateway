// package: injective.exchange.v1beta1
// file: injective/exchange/v1beta1/query.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../../../google/api/annotations_pb";
import * as injective_exchange_v1beta1_exchange_pb from "../../../injective/exchange/v1beta1/exchange_pb";
import * as injective_exchange_v1beta1_genesis_pb from "../../../injective/exchange/v1beta1/genesis_pb";
import * as injective_oracle_v1beta1_oracle_pb from "../../../injective/oracle/v1beta1/oracle_pb";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";

export class Subaccount extends jspb.Message {
  getTrader(): string;
  setTrader(value: string): void;

  getSubaccountNonce(): number;
  setSubaccountNonce(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Subaccount.AsObject;
  static toObject(includeInstance: boolean, msg: Subaccount): Subaccount.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Subaccount, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Subaccount;
  static deserializeBinaryFromReader(message: Subaccount, reader: jspb.BinaryReader): Subaccount;
}

export namespace Subaccount {
  export type AsObject = {
    trader: string,
    subaccountNonce: number,
  }
}

export class QuerySubaccountOrdersRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountOrdersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountOrdersRequest): QuerySubaccountOrdersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountOrdersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountOrdersRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountOrdersRequest, reader: jspb.BinaryReader): QuerySubaccountOrdersRequest;
}

export namespace QuerySubaccountOrdersRequest {
  export type AsObject = {
    subaccountId: string,
    marketId: string,
  }
}

export class QuerySubaccountOrdersResponse extends jspb.Message {
  clearBuyOrdersList(): void;
  getBuyOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.SubaccountOrderData>;
  setBuyOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.SubaccountOrderData>): void;
  addBuyOrders(value?: injective_exchange_v1beta1_exchange_pb.SubaccountOrderData, index?: number): injective_exchange_v1beta1_exchange_pb.SubaccountOrderData;

  clearSellOrdersList(): void;
  getSellOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.SubaccountOrderData>;
  setSellOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.SubaccountOrderData>): void;
  addSellOrders(value?: injective_exchange_v1beta1_exchange_pb.SubaccountOrderData, index?: number): injective_exchange_v1beta1_exchange_pb.SubaccountOrderData;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountOrdersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountOrdersResponse): QuerySubaccountOrdersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountOrdersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountOrdersResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountOrdersResponse, reader: jspb.BinaryReader): QuerySubaccountOrdersResponse;
}

export namespace QuerySubaccountOrdersResponse {
  export type AsObject = {
    buyOrdersList: Array<injective_exchange_v1beta1_exchange_pb.SubaccountOrderData.AsObject>,
    sellOrdersList: Array<injective_exchange_v1beta1_exchange_pb.SubaccountOrderData.AsObject>,
  }
}

export class SubaccountOrderbookMetadataWithMarket extends jspb.Message {
  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): injective_exchange_v1beta1_exchange_pb.SubaccountOrderbookMetadata | undefined;
  setMetadata(value?: injective_exchange_v1beta1_exchange_pb.SubaccountOrderbookMetadata): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  getIsbuy(): boolean;
  setIsbuy(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubaccountOrderbookMetadataWithMarket.AsObject;
  static toObject(includeInstance: boolean, msg: SubaccountOrderbookMetadataWithMarket): SubaccountOrderbookMetadataWithMarket.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubaccountOrderbookMetadataWithMarket, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubaccountOrderbookMetadataWithMarket;
  static deserializeBinaryFromReader(message: SubaccountOrderbookMetadataWithMarket, reader: jspb.BinaryReader): SubaccountOrderbookMetadataWithMarket;
}

export namespace SubaccountOrderbookMetadataWithMarket {
  export type AsObject = {
    metadata?: injective_exchange_v1beta1_exchange_pb.SubaccountOrderbookMetadata.AsObject,
    marketId: string,
    isbuy: boolean,
  }
}

export class QueryExchangeParamsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryExchangeParamsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryExchangeParamsRequest): QueryExchangeParamsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryExchangeParamsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryExchangeParamsRequest;
  static deserializeBinaryFromReader(message: QueryExchangeParamsRequest, reader: jspb.BinaryReader): QueryExchangeParamsRequest;
}

export namespace QueryExchangeParamsRequest {
  export type AsObject = {
  }
}

export class QueryExchangeParamsResponse extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_exchange_v1beta1_exchange_pb.Params | undefined;
  setParams(value?: injective_exchange_v1beta1_exchange_pb.Params): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryExchangeParamsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryExchangeParamsResponse): QueryExchangeParamsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryExchangeParamsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryExchangeParamsResponse;
  static deserializeBinaryFromReader(message: QueryExchangeParamsResponse, reader: jspb.BinaryReader): QueryExchangeParamsResponse;
}

export namespace QueryExchangeParamsResponse {
  export type AsObject = {
    params?: injective_exchange_v1beta1_exchange_pb.Params.AsObject,
  }
}

export class QuerySubaccountDepositsRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  hasSubaccount(): boolean;
  clearSubaccount(): void;
  getSubaccount(): Subaccount | undefined;
  setSubaccount(value?: Subaccount): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountDepositsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountDepositsRequest): QuerySubaccountDepositsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountDepositsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountDepositsRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountDepositsRequest, reader: jspb.BinaryReader): QuerySubaccountDepositsRequest;
}

export namespace QuerySubaccountDepositsRequest {
  export type AsObject = {
    subaccountId: string,
    subaccount?: Subaccount.AsObject,
  }
}

export class QuerySubaccountDepositsResponse extends jspb.Message {
  getDepositsMap(): jspb.Map<string, injective_exchange_v1beta1_exchange_pb.Deposit>;
  clearDepositsMap(): void;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountDepositsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountDepositsResponse): QuerySubaccountDepositsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountDepositsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountDepositsResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountDepositsResponse, reader: jspb.BinaryReader): QuerySubaccountDepositsResponse;
}

export namespace QuerySubaccountDepositsResponse {
  export type AsObject = {
    depositsMap: Array<[string, injective_exchange_v1beta1_exchange_pb.Deposit.AsObject]>,
  }
}

export class QueryExchangeBalancesRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryExchangeBalancesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryExchangeBalancesRequest): QueryExchangeBalancesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryExchangeBalancesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryExchangeBalancesRequest;
  static deserializeBinaryFromReader(message: QueryExchangeBalancesRequest, reader: jspb.BinaryReader): QueryExchangeBalancesRequest;
}

export namespace QueryExchangeBalancesRequest {
  export type AsObject = {
  }
}

export class QueryExchangeBalancesResponse extends jspb.Message {
  clearBalancesList(): void;
  getBalancesList(): Array<injective_exchange_v1beta1_genesis_pb.Balance>;
  setBalancesList(value: Array<injective_exchange_v1beta1_genesis_pb.Balance>): void;
  addBalances(value?: injective_exchange_v1beta1_genesis_pb.Balance, index?: number): injective_exchange_v1beta1_genesis_pb.Balance;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryExchangeBalancesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryExchangeBalancesResponse): QueryExchangeBalancesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryExchangeBalancesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryExchangeBalancesResponse;
  static deserializeBinaryFromReader(message: QueryExchangeBalancesResponse, reader: jspb.BinaryReader): QueryExchangeBalancesResponse;
}

export namespace QueryExchangeBalancesResponse {
  export type AsObject = {
    balancesList: Array<injective_exchange_v1beta1_genesis_pb.Balance.AsObject>,
  }
}

export class QuerySubaccountDepositRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountDepositRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountDepositRequest): QuerySubaccountDepositRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountDepositRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountDepositRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountDepositRequest, reader: jspb.BinaryReader): QuerySubaccountDepositRequest;
}

export namespace QuerySubaccountDepositRequest {
  export type AsObject = {
    subaccountId: string,
    denom: string,
  }
}

export class QuerySubaccountDepositResponse extends jspb.Message {
  hasDeposits(): boolean;
  clearDeposits(): void;
  getDeposits(): injective_exchange_v1beta1_exchange_pb.Deposit | undefined;
  setDeposits(value?: injective_exchange_v1beta1_exchange_pb.Deposit): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountDepositResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountDepositResponse): QuerySubaccountDepositResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountDepositResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountDepositResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountDepositResponse, reader: jspb.BinaryReader): QuerySubaccountDepositResponse;
}

export namespace QuerySubaccountDepositResponse {
  export type AsObject = {
    deposits?: injective_exchange_v1beta1_exchange_pb.Deposit.AsObject,
  }
}

export class QuerySpotMarketsRequest extends jspb.Message {
  getStatus(): string;
  setStatus(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotMarketsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotMarketsRequest): QuerySpotMarketsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotMarketsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotMarketsRequest;
  static deserializeBinaryFromReader(message: QuerySpotMarketsRequest, reader: jspb.BinaryReader): QuerySpotMarketsRequest;
}

export namespace QuerySpotMarketsRequest {
  export type AsObject = {
    status: string,
  }
}

export class QuerySpotMarketsResponse extends jspb.Message {
  clearMarketsList(): void;
  getMarketsList(): Array<injective_exchange_v1beta1_exchange_pb.SpotMarket>;
  setMarketsList(value: Array<injective_exchange_v1beta1_exchange_pb.SpotMarket>): void;
  addMarkets(value?: injective_exchange_v1beta1_exchange_pb.SpotMarket, index?: number): injective_exchange_v1beta1_exchange_pb.SpotMarket;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotMarketsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotMarketsResponse): QuerySpotMarketsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotMarketsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotMarketsResponse;
  static deserializeBinaryFromReader(message: QuerySpotMarketsResponse, reader: jspb.BinaryReader): QuerySpotMarketsResponse;
}

export namespace QuerySpotMarketsResponse {
  export type AsObject = {
    marketsList: Array<injective_exchange_v1beta1_exchange_pb.SpotMarket.AsObject>,
  }
}

export class QuerySpotMarketRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotMarketRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotMarketRequest): QuerySpotMarketRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotMarketRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotMarketRequest;
  static deserializeBinaryFromReader(message: QuerySpotMarketRequest, reader: jspb.BinaryReader): QuerySpotMarketRequest;
}

export namespace QuerySpotMarketRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QuerySpotMarketResponse extends jspb.Message {
  hasMarket(): boolean;
  clearMarket(): void;
  getMarket(): injective_exchange_v1beta1_exchange_pb.SpotMarket | undefined;
  setMarket(value?: injective_exchange_v1beta1_exchange_pb.SpotMarket): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotMarketResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotMarketResponse): QuerySpotMarketResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotMarketResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotMarketResponse;
  static deserializeBinaryFromReader(message: QuerySpotMarketResponse, reader: jspb.BinaryReader): QuerySpotMarketResponse;
}

export namespace QuerySpotMarketResponse {
  export type AsObject = {
    market?: injective_exchange_v1beta1_exchange_pb.SpotMarket.AsObject,
  }
}

export class QuerySpotOrderbookRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getLimit(): number;
  setLimit(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotOrderbookRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotOrderbookRequest): QuerySpotOrderbookRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotOrderbookRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotOrderbookRequest;
  static deserializeBinaryFromReader(message: QuerySpotOrderbookRequest, reader: jspb.BinaryReader): QuerySpotOrderbookRequest;
}

export namespace QuerySpotOrderbookRequest {
  export type AsObject = {
    marketId: string,
    limit: number,
  }
}

export class QuerySpotOrderbookResponse extends jspb.Message {
  clearBuysPriceLevelList(): void;
  getBuysPriceLevelList(): Array<injective_exchange_v1beta1_exchange_pb.Level>;
  setBuysPriceLevelList(value: Array<injective_exchange_v1beta1_exchange_pb.Level>): void;
  addBuysPriceLevel(value?: injective_exchange_v1beta1_exchange_pb.Level, index?: number): injective_exchange_v1beta1_exchange_pb.Level;

  clearSellsPriceLevelList(): void;
  getSellsPriceLevelList(): Array<injective_exchange_v1beta1_exchange_pb.Level>;
  setSellsPriceLevelList(value: Array<injective_exchange_v1beta1_exchange_pb.Level>): void;
  addSellsPriceLevel(value?: injective_exchange_v1beta1_exchange_pb.Level, index?: number): injective_exchange_v1beta1_exchange_pb.Level;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotOrderbookResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotOrderbookResponse): QuerySpotOrderbookResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotOrderbookResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotOrderbookResponse;
  static deserializeBinaryFromReader(message: QuerySpotOrderbookResponse, reader: jspb.BinaryReader): QuerySpotOrderbookResponse;
}

export namespace QuerySpotOrderbookResponse {
  export type AsObject = {
    buysPriceLevelList: Array<injective_exchange_v1beta1_exchange_pb.Level.AsObject>,
    sellsPriceLevelList: Array<injective_exchange_v1beta1_exchange_pb.Level.AsObject>,
  }
}

export class QuerySpotOrdersByHashesRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  clearOrderHashesList(): void;
  getOrderHashesList(): Array<string>;
  setOrderHashesList(value: Array<string>): void;
  addOrderHashes(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotOrdersByHashesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotOrdersByHashesRequest): QuerySpotOrdersByHashesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotOrdersByHashesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotOrdersByHashesRequest;
  static deserializeBinaryFromReader(message: QuerySpotOrdersByHashesRequest, reader: jspb.BinaryReader): QuerySpotOrdersByHashesRequest;
}

export namespace QuerySpotOrdersByHashesRequest {
  export type AsObject = {
    marketId: string,
    subaccountId: string,
    orderHashesList: Array<string>,
  }
}

export class QuerySpotOrdersByHashesResponse extends jspb.Message {
  clearOrdersList(): void;
  getOrdersList(): Array<TrimmedSpotLimitOrder>;
  setOrdersList(value: Array<TrimmedSpotLimitOrder>): void;
  addOrders(value?: TrimmedSpotLimitOrder, index?: number): TrimmedSpotLimitOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotOrdersByHashesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotOrdersByHashesResponse): QuerySpotOrdersByHashesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotOrdersByHashesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotOrdersByHashesResponse;
  static deserializeBinaryFromReader(message: QuerySpotOrdersByHashesResponse, reader: jspb.BinaryReader): QuerySpotOrdersByHashesResponse;
}

export namespace QuerySpotOrdersByHashesResponse {
  export type AsObject = {
    ordersList: Array<TrimmedSpotLimitOrder.AsObject>,
  }
}

export class QueryTraderSpotOrdersRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderSpotOrdersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderSpotOrdersRequest): QueryTraderSpotOrdersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderSpotOrdersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderSpotOrdersRequest;
  static deserializeBinaryFromReader(message: QueryTraderSpotOrdersRequest, reader: jspb.BinaryReader): QueryTraderSpotOrdersRequest;
}

export namespace QueryTraderSpotOrdersRequest {
  export type AsObject = {
    marketId: string,
    subaccountId: string,
  }
}

export class TrimmedSpotLimitOrder extends jspb.Message {
  getPrice(): string;
  setPrice(value: string): void;

  getQuantity(): string;
  setQuantity(value: string): void;

  getFillable(): string;
  setFillable(value: string): void;

  getIsbuy(): boolean;
  setIsbuy(value: boolean): void;

  getOrderHash(): string;
  setOrderHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TrimmedSpotLimitOrder.AsObject;
  static toObject(includeInstance: boolean, msg: TrimmedSpotLimitOrder): TrimmedSpotLimitOrder.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TrimmedSpotLimitOrder, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TrimmedSpotLimitOrder;
  static deserializeBinaryFromReader(message: TrimmedSpotLimitOrder, reader: jspb.BinaryReader): TrimmedSpotLimitOrder;
}

export namespace TrimmedSpotLimitOrder {
  export type AsObject = {
    price: string,
    quantity: string,
    fillable: string,
    isbuy: boolean,
    orderHash: string,
  }
}

export class QueryTraderSpotOrdersResponse extends jspb.Message {
  clearOrdersList(): void;
  getOrdersList(): Array<TrimmedSpotLimitOrder>;
  setOrdersList(value: Array<TrimmedSpotLimitOrder>): void;
  addOrders(value?: TrimmedSpotLimitOrder, index?: number): TrimmedSpotLimitOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderSpotOrdersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderSpotOrdersResponse): QueryTraderSpotOrdersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderSpotOrdersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderSpotOrdersResponse;
  static deserializeBinaryFromReader(message: QueryTraderSpotOrdersResponse, reader: jspb.BinaryReader): QueryTraderSpotOrdersResponse;
}

export namespace QueryTraderSpotOrdersResponse {
  export type AsObject = {
    ordersList: Array<TrimmedSpotLimitOrder.AsObject>,
  }
}

export class QuerySpotMidPriceAndTOBRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotMidPriceAndTOBRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotMidPriceAndTOBRequest): QuerySpotMidPriceAndTOBRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotMidPriceAndTOBRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotMidPriceAndTOBRequest;
  static deserializeBinaryFromReader(message: QuerySpotMidPriceAndTOBRequest, reader: jspb.BinaryReader): QuerySpotMidPriceAndTOBRequest;
}

export namespace QuerySpotMidPriceAndTOBRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QuerySpotMidPriceAndTOBResponse extends jspb.Message {
  getMidPrice(): string;
  setMidPrice(value: string): void;

  getBestBuyPrice(): string;
  setBestBuyPrice(value: string): void;

  getBestSellPrice(): string;
  setBestSellPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySpotMidPriceAndTOBResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySpotMidPriceAndTOBResponse): QuerySpotMidPriceAndTOBResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySpotMidPriceAndTOBResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySpotMidPriceAndTOBResponse;
  static deserializeBinaryFromReader(message: QuerySpotMidPriceAndTOBResponse, reader: jspb.BinaryReader): QuerySpotMidPriceAndTOBResponse;
}

export namespace QuerySpotMidPriceAndTOBResponse {
  export type AsObject = {
    midPrice: string,
    bestBuyPrice: string,
    bestSellPrice: string,
  }
}

export class QueryDerivativeMidPriceAndTOBRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMidPriceAndTOBRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMidPriceAndTOBRequest): QueryDerivativeMidPriceAndTOBRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMidPriceAndTOBRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMidPriceAndTOBRequest;
  static deserializeBinaryFromReader(message: QueryDerivativeMidPriceAndTOBRequest, reader: jspb.BinaryReader): QueryDerivativeMidPriceAndTOBRequest;
}

export namespace QueryDerivativeMidPriceAndTOBRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryDerivativeMidPriceAndTOBResponse extends jspb.Message {
  getMidPrice(): string;
  setMidPrice(value: string): void;

  getBestBuyPrice(): string;
  setBestBuyPrice(value: string): void;

  getBestSellPrice(): string;
  setBestSellPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMidPriceAndTOBResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMidPriceAndTOBResponse): QueryDerivativeMidPriceAndTOBResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMidPriceAndTOBResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMidPriceAndTOBResponse;
  static deserializeBinaryFromReader(message: QueryDerivativeMidPriceAndTOBResponse, reader: jspb.BinaryReader): QueryDerivativeMidPriceAndTOBResponse;
}

export namespace QueryDerivativeMidPriceAndTOBResponse {
  export type AsObject = {
    midPrice: string,
    bestBuyPrice: string,
    bestSellPrice: string,
  }
}

export class QueryDerivativeOrderbookRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getLimit(): number;
  setLimit(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeOrderbookRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeOrderbookRequest): QueryDerivativeOrderbookRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeOrderbookRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeOrderbookRequest;
  static deserializeBinaryFromReader(message: QueryDerivativeOrderbookRequest, reader: jspb.BinaryReader): QueryDerivativeOrderbookRequest;
}

export namespace QueryDerivativeOrderbookRequest {
  export type AsObject = {
    marketId: string,
    limit: number,
  }
}

export class QueryDerivativeOrderbookResponse extends jspb.Message {
  clearBuysPriceLevelList(): void;
  getBuysPriceLevelList(): Array<injective_exchange_v1beta1_exchange_pb.Level>;
  setBuysPriceLevelList(value: Array<injective_exchange_v1beta1_exchange_pb.Level>): void;
  addBuysPriceLevel(value?: injective_exchange_v1beta1_exchange_pb.Level, index?: number): injective_exchange_v1beta1_exchange_pb.Level;

  clearSellsPriceLevelList(): void;
  getSellsPriceLevelList(): Array<injective_exchange_v1beta1_exchange_pb.Level>;
  setSellsPriceLevelList(value: Array<injective_exchange_v1beta1_exchange_pb.Level>): void;
  addSellsPriceLevel(value?: injective_exchange_v1beta1_exchange_pb.Level, index?: number): injective_exchange_v1beta1_exchange_pb.Level;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeOrderbookResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeOrderbookResponse): QueryDerivativeOrderbookResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeOrderbookResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeOrderbookResponse;
  static deserializeBinaryFromReader(message: QueryDerivativeOrderbookResponse, reader: jspb.BinaryReader): QueryDerivativeOrderbookResponse;
}

export namespace QueryDerivativeOrderbookResponse {
  export type AsObject = {
    buysPriceLevelList: Array<injective_exchange_v1beta1_exchange_pb.Level.AsObject>,
    sellsPriceLevelList: Array<injective_exchange_v1beta1_exchange_pb.Level.AsObject>,
  }
}

export class QueryTraderSpotOrdersToCancelUpToAmountRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getBaseAmount(): string;
  setBaseAmount(value: string): void;

  getQuoteAmount(): string;
  setQuoteAmount(value: string): void;

  getStrategy(): CancellationStrategyMap[keyof CancellationStrategyMap];
  setStrategy(value: CancellationStrategyMap[keyof CancellationStrategyMap]): void;

  getReferencePrice(): string;
  setReferencePrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderSpotOrdersToCancelUpToAmountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderSpotOrdersToCancelUpToAmountRequest): QueryTraderSpotOrdersToCancelUpToAmountRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderSpotOrdersToCancelUpToAmountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderSpotOrdersToCancelUpToAmountRequest;
  static deserializeBinaryFromReader(message: QueryTraderSpotOrdersToCancelUpToAmountRequest, reader: jspb.BinaryReader): QueryTraderSpotOrdersToCancelUpToAmountRequest;
}

export namespace QueryTraderSpotOrdersToCancelUpToAmountRequest {
  export type AsObject = {
    marketId: string,
    subaccountId: string,
    baseAmount: string,
    quoteAmount: string,
    strategy: CancellationStrategyMap[keyof CancellationStrategyMap],
    referencePrice: string,
  }
}

export class QueryTraderDerivativeOrdersToCancelUpToAmountRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getQuoteAmount(): string;
  setQuoteAmount(value: string): void;

  getStrategy(): CancellationStrategyMap[keyof CancellationStrategyMap];
  setStrategy(value: CancellationStrategyMap[keyof CancellationStrategyMap]): void;

  getReferencePrice(): string;
  setReferencePrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderDerivativeOrdersToCancelUpToAmountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderDerivativeOrdersToCancelUpToAmountRequest): QueryTraderDerivativeOrdersToCancelUpToAmountRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderDerivativeOrdersToCancelUpToAmountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderDerivativeOrdersToCancelUpToAmountRequest;
  static deserializeBinaryFromReader(message: QueryTraderDerivativeOrdersToCancelUpToAmountRequest, reader: jspb.BinaryReader): QueryTraderDerivativeOrdersToCancelUpToAmountRequest;
}

export namespace QueryTraderDerivativeOrdersToCancelUpToAmountRequest {
  export type AsObject = {
    marketId: string,
    subaccountId: string,
    quoteAmount: string,
    strategy: CancellationStrategyMap[keyof CancellationStrategyMap],
    referencePrice: string,
  }
}

export class QueryTraderDerivativeOrdersRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderDerivativeOrdersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderDerivativeOrdersRequest): QueryTraderDerivativeOrdersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderDerivativeOrdersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderDerivativeOrdersRequest;
  static deserializeBinaryFromReader(message: QueryTraderDerivativeOrdersRequest, reader: jspb.BinaryReader): QueryTraderDerivativeOrdersRequest;
}

export namespace QueryTraderDerivativeOrdersRequest {
  export type AsObject = {
    marketId: string,
    subaccountId: string,
  }
}

export class TrimmedDerivativeLimitOrder extends jspb.Message {
  getPrice(): string;
  setPrice(value: string): void;

  getQuantity(): string;
  setQuantity(value: string): void;

  getMargin(): string;
  setMargin(value: string): void;

  getFillable(): string;
  setFillable(value: string): void;

  getIsbuy(): boolean;
  setIsbuy(value: boolean): void;

  getOrderHash(): string;
  setOrderHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TrimmedDerivativeLimitOrder.AsObject;
  static toObject(includeInstance: boolean, msg: TrimmedDerivativeLimitOrder): TrimmedDerivativeLimitOrder.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TrimmedDerivativeLimitOrder, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TrimmedDerivativeLimitOrder;
  static deserializeBinaryFromReader(message: TrimmedDerivativeLimitOrder, reader: jspb.BinaryReader): TrimmedDerivativeLimitOrder;
}

export namespace TrimmedDerivativeLimitOrder {
  export type AsObject = {
    price: string,
    quantity: string,
    margin: string,
    fillable: string,
    isbuy: boolean,
    orderHash: string,
  }
}

export class QueryTraderDerivativeOrdersResponse extends jspb.Message {
  clearOrdersList(): void;
  getOrdersList(): Array<TrimmedDerivativeLimitOrder>;
  setOrdersList(value: Array<TrimmedDerivativeLimitOrder>): void;
  addOrders(value?: TrimmedDerivativeLimitOrder, index?: number): TrimmedDerivativeLimitOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderDerivativeOrdersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderDerivativeOrdersResponse): QueryTraderDerivativeOrdersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderDerivativeOrdersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderDerivativeOrdersResponse;
  static deserializeBinaryFromReader(message: QueryTraderDerivativeOrdersResponse, reader: jspb.BinaryReader): QueryTraderDerivativeOrdersResponse;
}

export namespace QueryTraderDerivativeOrdersResponse {
  export type AsObject = {
    ordersList: Array<TrimmedDerivativeLimitOrder.AsObject>,
  }
}

export class QueryDerivativeOrdersByHashesRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  clearOrderHashesList(): void;
  getOrderHashesList(): Array<string>;
  setOrderHashesList(value: Array<string>): void;
  addOrderHashes(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeOrdersByHashesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeOrdersByHashesRequest): QueryDerivativeOrdersByHashesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeOrdersByHashesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeOrdersByHashesRequest;
  static deserializeBinaryFromReader(message: QueryDerivativeOrdersByHashesRequest, reader: jspb.BinaryReader): QueryDerivativeOrdersByHashesRequest;
}

export namespace QueryDerivativeOrdersByHashesRequest {
  export type AsObject = {
    marketId: string,
    subaccountId: string,
    orderHashesList: Array<string>,
  }
}

export class QueryDerivativeOrdersByHashesResponse extends jspb.Message {
  clearOrdersList(): void;
  getOrdersList(): Array<TrimmedDerivativeLimitOrder>;
  setOrdersList(value: Array<TrimmedDerivativeLimitOrder>): void;
  addOrders(value?: TrimmedDerivativeLimitOrder, index?: number): TrimmedDerivativeLimitOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeOrdersByHashesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeOrdersByHashesResponse): QueryDerivativeOrdersByHashesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeOrdersByHashesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeOrdersByHashesResponse;
  static deserializeBinaryFromReader(message: QueryDerivativeOrdersByHashesResponse, reader: jspb.BinaryReader): QueryDerivativeOrdersByHashesResponse;
}

export namespace QueryDerivativeOrdersByHashesResponse {
  export type AsObject = {
    ordersList: Array<TrimmedDerivativeLimitOrder.AsObject>,
  }
}

export class QueryDerivativeMarketsRequest extends jspb.Message {
  getStatus(): string;
  setStatus(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMarketsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMarketsRequest): QueryDerivativeMarketsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMarketsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMarketsRequest;
  static deserializeBinaryFromReader(message: QueryDerivativeMarketsRequest, reader: jspb.BinaryReader): QueryDerivativeMarketsRequest;
}

export namespace QueryDerivativeMarketsRequest {
  export type AsObject = {
    status: string,
  }
}

export class PriceLevel extends jspb.Message {
  getPrice(): string;
  setPrice(value: string): void;

  getQuantity(): string;
  setQuantity(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceLevel.AsObject;
  static toObject(includeInstance: boolean, msg: PriceLevel): PriceLevel.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceLevel, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceLevel;
  static deserializeBinaryFromReader(message: PriceLevel, reader: jspb.BinaryReader): PriceLevel;
}

export namespace PriceLevel {
  export type AsObject = {
    price: string,
    quantity: string,
  }
}

export class PerpetualMarketState extends jspb.Message {
  hasMarketInfo(): boolean;
  clearMarketInfo(): void;
  getMarketInfo(): injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo | undefined;
  setMarketInfo(value?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo): void;

  hasFundingInfo(): boolean;
  clearFundingInfo(): void;
  getFundingInfo(): injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding | undefined;
  setFundingInfo(value?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PerpetualMarketState.AsObject;
  static toObject(includeInstance: boolean, msg: PerpetualMarketState): PerpetualMarketState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PerpetualMarketState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PerpetualMarketState;
  static deserializeBinaryFromReader(message: PerpetualMarketState, reader: jspb.BinaryReader): PerpetualMarketState;
}

export namespace PerpetualMarketState {
  export type AsObject = {
    marketInfo?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo.AsObject,
    fundingInfo?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding.AsObject,
  }
}

export class FullDerivativeMarket extends jspb.Message {
  hasMarket(): boolean;
  clearMarket(): void;
  getMarket(): injective_exchange_v1beta1_exchange_pb.DerivativeMarket | undefined;
  setMarket(value?: injective_exchange_v1beta1_exchange_pb.DerivativeMarket): void;

  hasPerpetualInfo(): boolean;
  clearPerpetualInfo(): void;
  getPerpetualInfo(): PerpetualMarketState | undefined;
  setPerpetualInfo(value?: PerpetualMarketState): void;

  hasFuturesInfo(): boolean;
  clearFuturesInfo(): void;
  getFuturesInfo(): injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo | undefined;
  setFuturesInfo(value?: injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo): void;

  getMarkPrice(): string;
  setMarkPrice(value: string): void;

  getInfoCase(): FullDerivativeMarket.InfoCase;
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FullDerivativeMarket.AsObject;
  static toObject(includeInstance: boolean, msg: FullDerivativeMarket): FullDerivativeMarket.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FullDerivativeMarket, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FullDerivativeMarket;
  static deserializeBinaryFromReader(message: FullDerivativeMarket, reader: jspb.BinaryReader): FullDerivativeMarket;
}

export namespace FullDerivativeMarket {
  export type AsObject = {
    market?: injective_exchange_v1beta1_exchange_pb.DerivativeMarket.AsObject,
    perpetualInfo?: PerpetualMarketState.AsObject,
    futuresInfo?: injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo.AsObject,
    markPrice: string,
  }

  export enum InfoCase {
    INFO_NOT_SET = 0,
    PERPETUAL_INFO = 2,
    FUTURES_INFO = 3,
  }
}

export class QueryDerivativeMarketsResponse extends jspb.Message {
  clearMarketsList(): void;
  getMarketsList(): Array<FullDerivativeMarket>;
  setMarketsList(value: Array<FullDerivativeMarket>): void;
  addMarkets(value?: FullDerivativeMarket, index?: number): FullDerivativeMarket;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMarketsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMarketsResponse): QueryDerivativeMarketsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMarketsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMarketsResponse;
  static deserializeBinaryFromReader(message: QueryDerivativeMarketsResponse, reader: jspb.BinaryReader): QueryDerivativeMarketsResponse;
}

export namespace QueryDerivativeMarketsResponse {
  export type AsObject = {
    marketsList: Array<FullDerivativeMarket.AsObject>,
  }
}

export class QueryDerivativeMarketRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMarketRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMarketRequest): QueryDerivativeMarketRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMarketRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMarketRequest;
  static deserializeBinaryFromReader(message: QueryDerivativeMarketRequest, reader: jspb.BinaryReader): QueryDerivativeMarketRequest;
}

export namespace QueryDerivativeMarketRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryDerivativeMarketResponse extends jspb.Message {
  hasMarket(): boolean;
  clearMarket(): void;
  getMarket(): FullDerivativeMarket | undefined;
  setMarket(value?: FullDerivativeMarket): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMarketResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMarketResponse): QueryDerivativeMarketResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMarketResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMarketResponse;
  static deserializeBinaryFromReader(message: QueryDerivativeMarketResponse, reader: jspb.BinaryReader): QueryDerivativeMarketResponse;
}

export namespace QueryDerivativeMarketResponse {
  export type AsObject = {
    market?: FullDerivativeMarket.AsObject,
  }
}

export class QueryDerivativeMarketAddressRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMarketAddressRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMarketAddressRequest): QueryDerivativeMarketAddressRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMarketAddressRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMarketAddressRequest;
  static deserializeBinaryFromReader(message: QueryDerivativeMarketAddressRequest, reader: jspb.BinaryReader): QueryDerivativeMarketAddressRequest;
}

export namespace QueryDerivativeMarketAddressRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryDerivativeMarketAddressResponse extends jspb.Message {
  getAddress(): string;
  setAddress(value: string): void;

  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryDerivativeMarketAddressResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryDerivativeMarketAddressResponse): QueryDerivativeMarketAddressResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryDerivativeMarketAddressResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryDerivativeMarketAddressResponse;
  static deserializeBinaryFromReader(message: QueryDerivativeMarketAddressResponse, reader: jspb.BinaryReader): QueryDerivativeMarketAddressResponse;
}

export namespace QueryDerivativeMarketAddressResponse {
  export type AsObject = {
    address: string,
    subaccountId: string,
  }
}

export class QuerySubaccountTradeNonceRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountTradeNonceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountTradeNonceRequest): QuerySubaccountTradeNonceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountTradeNonceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountTradeNonceRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountTradeNonceRequest, reader: jspb.BinaryReader): QuerySubaccountTradeNonceRequest;
}

export namespace QuerySubaccountTradeNonceRequest {
  export type AsObject = {
    subaccountId: string,
  }
}

export class QuerySubaccountPositionsRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountPositionsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountPositionsRequest): QuerySubaccountPositionsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountPositionsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountPositionsRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountPositionsRequest, reader: jspb.BinaryReader): QuerySubaccountPositionsRequest;
}

export namespace QuerySubaccountPositionsRequest {
  export type AsObject = {
    subaccountId: string,
  }
}

export class QuerySubaccountPositionInMarketRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountPositionInMarketRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountPositionInMarketRequest): QuerySubaccountPositionInMarketRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountPositionInMarketRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountPositionInMarketRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountPositionInMarketRequest, reader: jspb.BinaryReader): QuerySubaccountPositionInMarketRequest;
}

export namespace QuerySubaccountPositionInMarketRequest {
  export type AsObject = {
    subaccountId: string,
    marketId: string,
  }
}

export class QuerySubaccountEffectivePositionInMarketRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountEffectivePositionInMarketRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountEffectivePositionInMarketRequest): QuerySubaccountEffectivePositionInMarketRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountEffectivePositionInMarketRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountEffectivePositionInMarketRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountEffectivePositionInMarketRequest, reader: jspb.BinaryReader): QuerySubaccountEffectivePositionInMarketRequest;
}

export namespace QuerySubaccountEffectivePositionInMarketRequest {
  export type AsObject = {
    subaccountId: string,
    marketId: string,
  }
}

export class QuerySubaccountOrderMetadataRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountOrderMetadataRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountOrderMetadataRequest): QuerySubaccountOrderMetadataRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountOrderMetadataRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountOrderMetadataRequest;
  static deserializeBinaryFromReader(message: QuerySubaccountOrderMetadataRequest, reader: jspb.BinaryReader): QuerySubaccountOrderMetadataRequest;
}

export namespace QuerySubaccountOrderMetadataRequest {
  export type AsObject = {
    subaccountId: string,
  }
}

export class QuerySubaccountPositionsResponse extends jspb.Message {
  clearStateList(): void;
  getStateList(): Array<injective_exchange_v1beta1_genesis_pb.DerivativePosition>;
  setStateList(value: Array<injective_exchange_v1beta1_genesis_pb.DerivativePosition>): void;
  addState(value?: injective_exchange_v1beta1_genesis_pb.DerivativePosition, index?: number): injective_exchange_v1beta1_genesis_pb.DerivativePosition;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountPositionsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountPositionsResponse): QuerySubaccountPositionsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountPositionsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountPositionsResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountPositionsResponse, reader: jspb.BinaryReader): QuerySubaccountPositionsResponse;
}

export namespace QuerySubaccountPositionsResponse {
  export type AsObject = {
    stateList: Array<injective_exchange_v1beta1_genesis_pb.DerivativePosition.AsObject>,
  }
}

export class QuerySubaccountPositionInMarketResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): injective_exchange_v1beta1_exchange_pb.Position | undefined;
  setState(value?: injective_exchange_v1beta1_exchange_pb.Position): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountPositionInMarketResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountPositionInMarketResponse): QuerySubaccountPositionInMarketResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountPositionInMarketResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountPositionInMarketResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountPositionInMarketResponse, reader: jspb.BinaryReader): QuerySubaccountPositionInMarketResponse;
}

export namespace QuerySubaccountPositionInMarketResponse {
  export type AsObject = {
    state?: injective_exchange_v1beta1_exchange_pb.Position.AsObject,
  }
}

export class EffectivePosition extends jspb.Message {
  getIsLong(): boolean;
  setIsLong(value: boolean): void;

  getQuantity(): string;
  setQuantity(value: string): void;

  getEntryPrice(): string;
  setEntryPrice(value: string): void;

  getEffectiveMargin(): string;
  setEffectiveMargin(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EffectivePosition.AsObject;
  static toObject(includeInstance: boolean, msg: EffectivePosition): EffectivePosition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EffectivePosition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EffectivePosition;
  static deserializeBinaryFromReader(message: EffectivePosition, reader: jspb.BinaryReader): EffectivePosition;
}

export namespace EffectivePosition {
  export type AsObject = {
    isLong: boolean,
    quantity: string,
    entryPrice: string,
    effectiveMargin: string,
  }
}

export class QuerySubaccountEffectivePositionInMarketResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): EffectivePosition | undefined;
  setState(value?: EffectivePosition): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountEffectivePositionInMarketResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountEffectivePositionInMarketResponse): QuerySubaccountEffectivePositionInMarketResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountEffectivePositionInMarketResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountEffectivePositionInMarketResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountEffectivePositionInMarketResponse, reader: jspb.BinaryReader): QuerySubaccountEffectivePositionInMarketResponse;
}

export namespace QuerySubaccountEffectivePositionInMarketResponse {
  export type AsObject = {
    state?: EffectivePosition.AsObject,
  }
}

export class QueryPerpetualMarketInfoRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPerpetualMarketInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPerpetualMarketInfoRequest): QueryPerpetualMarketInfoRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPerpetualMarketInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPerpetualMarketInfoRequest;
  static deserializeBinaryFromReader(message: QueryPerpetualMarketInfoRequest, reader: jspb.BinaryReader): QueryPerpetualMarketInfoRequest;
}

export namespace QueryPerpetualMarketInfoRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryPerpetualMarketInfoResponse extends jspb.Message {
  hasInfo(): boolean;
  clearInfo(): void;
  getInfo(): injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo | undefined;
  setInfo(value?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPerpetualMarketInfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPerpetualMarketInfoResponse): QueryPerpetualMarketInfoResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPerpetualMarketInfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPerpetualMarketInfoResponse;
  static deserializeBinaryFromReader(message: QueryPerpetualMarketInfoResponse, reader: jspb.BinaryReader): QueryPerpetualMarketInfoResponse;
}

export namespace QueryPerpetualMarketInfoResponse {
  export type AsObject = {
    info?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo.AsObject,
  }
}

export class QueryExpiryFuturesMarketInfoRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryExpiryFuturesMarketInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryExpiryFuturesMarketInfoRequest): QueryExpiryFuturesMarketInfoRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryExpiryFuturesMarketInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryExpiryFuturesMarketInfoRequest;
  static deserializeBinaryFromReader(message: QueryExpiryFuturesMarketInfoRequest, reader: jspb.BinaryReader): QueryExpiryFuturesMarketInfoRequest;
}

export namespace QueryExpiryFuturesMarketInfoRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryExpiryFuturesMarketInfoResponse extends jspb.Message {
  hasInfo(): boolean;
  clearInfo(): void;
  getInfo(): injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo | undefined;
  setInfo(value?: injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryExpiryFuturesMarketInfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryExpiryFuturesMarketInfoResponse): QueryExpiryFuturesMarketInfoResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryExpiryFuturesMarketInfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryExpiryFuturesMarketInfoResponse;
  static deserializeBinaryFromReader(message: QueryExpiryFuturesMarketInfoResponse, reader: jspb.BinaryReader): QueryExpiryFuturesMarketInfoResponse;
}

export namespace QueryExpiryFuturesMarketInfoResponse {
  export type AsObject = {
    info?: injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo.AsObject,
  }
}

export class QueryPerpetualMarketFundingRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPerpetualMarketFundingRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPerpetualMarketFundingRequest): QueryPerpetualMarketFundingRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPerpetualMarketFundingRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPerpetualMarketFundingRequest;
  static deserializeBinaryFromReader(message: QueryPerpetualMarketFundingRequest, reader: jspb.BinaryReader): QueryPerpetualMarketFundingRequest;
}

export namespace QueryPerpetualMarketFundingRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryPerpetualMarketFundingResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding | undefined;
  setState(value?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPerpetualMarketFundingResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPerpetualMarketFundingResponse): QueryPerpetualMarketFundingResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPerpetualMarketFundingResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPerpetualMarketFundingResponse;
  static deserializeBinaryFromReader(message: QueryPerpetualMarketFundingResponse, reader: jspb.BinaryReader): QueryPerpetualMarketFundingResponse;
}

export namespace QueryPerpetualMarketFundingResponse {
  export type AsObject = {
    state?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding.AsObject,
  }
}

export class QuerySubaccountOrderMetadataResponse extends jspb.Message {
  clearMetadataList(): void;
  getMetadataList(): Array<SubaccountOrderbookMetadataWithMarket>;
  setMetadataList(value: Array<SubaccountOrderbookMetadataWithMarket>): void;
  addMetadata(value?: SubaccountOrderbookMetadataWithMarket, index?: number): SubaccountOrderbookMetadataWithMarket;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountOrderMetadataResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountOrderMetadataResponse): QuerySubaccountOrderMetadataResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountOrderMetadataResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountOrderMetadataResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountOrderMetadataResponse, reader: jspb.BinaryReader): QuerySubaccountOrderMetadataResponse;
}

export namespace QuerySubaccountOrderMetadataResponse {
  export type AsObject = {
    metadataList: Array<SubaccountOrderbookMetadataWithMarket.AsObject>,
  }
}

export class QuerySubaccountTradeNonceResponse extends jspb.Message {
  getNonce(): number;
  setNonce(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QuerySubaccountTradeNonceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QuerySubaccountTradeNonceResponse): QuerySubaccountTradeNonceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QuerySubaccountTradeNonceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QuerySubaccountTradeNonceResponse;
  static deserializeBinaryFromReader(message: QuerySubaccountTradeNonceResponse, reader: jspb.BinaryReader): QuerySubaccountTradeNonceResponse;
}

export namespace QuerySubaccountTradeNonceResponse {
  export type AsObject = {
    nonce: number,
  }
}

export class QueryModuleStateRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateRequest): QueryModuleStateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateRequest;
  static deserializeBinaryFromReader(message: QueryModuleStateRequest, reader: jspb.BinaryReader): QueryModuleStateRequest;
}

export namespace QueryModuleStateRequest {
  export type AsObject = {
  }
}

export class QueryModuleStateResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): injective_exchange_v1beta1_genesis_pb.GenesisState | undefined;
  setState(value?: injective_exchange_v1beta1_genesis_pb.GenesisState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateResponse): QueryModuleStateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateResponse;
  static deserializeBinaryFromReader(message: QueryModuleStateResponse, reader: jspb.BinaryReader): QueryModuleStateResponse;
}

export namespace QueryModuleStateResponse {
  export type AsObject = {
    state?: injective_exchange_v1beta1_genesis_pb.GenesisState.AsObject,
  }
}

export class QueryPositionsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPositionsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPositionsRequest): QueryPositionsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPositionsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPositionsRequest;
  static deserializeBinaryFromReader(message: QueryPositionsRequest, reader: jspb.BinaryReader): QueryPositionsRequest;
}

export namespace QueryPositionsRequest {
  export type AsObject = {
  }
}

export class QueryPositionsResponse extends jspb.Message {
  clearStateList(): void;
  getStateList(): Array<injective_exchange_v1beta1_genesis_pb.DerivativePosition>;
  setStateList(value: Array<injective_exchange_v1beta1_genesis_pb.DerivativePosition>): void;
  addState(value?: injective_exchange_v1beta1_genesis_pb.DerivativePosition, index?: number): injective_exchange_v1beta1_genesis_pb.DerivativePosition;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPositionsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPositionsResponse): QueryPositionsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPositionsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPositionsResponse;
  static deserializeBinaryFromReader(message: QueryPositionsResponse, reader: jspb.BinaryReader): QueryPositionsResponse;
}

export namespace QueryPositionsResponse {
  export type AsObject = {
    stateList: Array<injective_exchange_v1beta1_genesis_pb.DerivativePosition.AsObject>,
  }
}

export class QueryTradeRewardPointsRequest extends jspb.Message {
  clearAccountsList(): void;
  getAccountsList(): Array<string>;
  setAccountsList(value: Array<string>): void;
  addAccounts(value: string, index?: number): string;

  getPendingPoolTimestamp(): number;
  setPendingPoolTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTradeRewardPointsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTradeRewardPointsRequest): QueryTradeRewardPointsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTradeRewardPointsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTradeRewardPointsRequest;
  static deserializeBinaryFromReader(message: QueryTradeRewardPointsRequest, reader: jspb.BinaryReader): QueryTradeRewardPointsRequest;
}

export namespace QueryTradeRewardPointsRequest {
  export type AsObject = {
    accountsList: Array<string>,
    pendingPoolTimestamp: number,
  }
}

export class QueryTradeRewardPointsResponse extends jspb.Message {
  clearAccountTradeRewardPointsList(): void;
  getAccountTradeRewardPointsList(): Array<string>;
  setAccountTradeRewardPointsList(value: Array<string>): void;
  addAccountTradeRewardPoints(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTradeRewardPointsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTradeRewardPointsResponse): QueryTradeRewardPointsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTradeRewardPointsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTradeRewardPointsResponse;
  static deserializeBinaryFromReader(message: QueryTradeRewardPointsResponse, reader: jspb.BinaryReader): QueryTradeRewardPointsResponse;
}

export namespace QueryTradeRewardPointsResponse {
  export type AsObject = {
    accountTradeRewardPointsList: Array<string>,
  }
}

export class QueryTradeRewardCampaignRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTradeRewardCampaignRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTradeRewardCampaignRequest): QueryTradeRewardCampaignRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTradeRewardCampaignRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTradeRewardCampaignRequest;
  static deserializeBinaryFromReader(message: QueryTradeRewardCampaignRequest, reader: jspb.BinaryReader): QueryTradeRewardCampaignRequest;
}

export namespace QueryTradeRewardCampaignRequest {
  export type AsObject = {
  }
}

export class QueryTradeRewardCampaignResponse extends jspb.Message {
  hasTradingRewardCampaignInfo(): boolean;
  clearTradingRewardCampaignInfo(): void;
  getTradingRewardCampaignInfo(): injective_exchange_v1beta1_exchange_pb.TradingRewardCampaignInfo | undefined;
  setTradingRewardCampaignInfo(value?: injective_exchange_v1beta1_exchange_pb.TradingRewardCampaignInfo): void;

  clearTradingRewardPoolCampaignScheduleList(): void;
  getTradingRewardPoolCampaignScheduleList(): Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>;
  setTradingRewardPoolCampaignScheduleList(value: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>): void;
  addTradingRewardPoolCampaignSchedule(value?: injective_exchange_v1beta1_exchange_pb.CampaignRewardPool, index?: number): injective_exchange_v1beta1_exchange_pb.CampaignRewardPool;

  getTotalTradeRewardPoints(): string;
  setTotalTradeRewardPoints(value: string): void;

  clearPendingTradingRewardPoolCampaignScheduleList(): void;
  getPendingTradingRewardPoolCampaignScheduleList(): Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>;
  setPendingTradingRewardPoolCampaignScheduleList(value: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>): void;
  addPendingTradingRewardPoolCampaignSchedule(value?: injective_exchange_v1beta1_exchange_pb.CampaignRewardPool, index?: number): injective_exchange_v1beta1_exchange_pb.CampaignRewardPool;

  clearPendingTotalTradeRewardPointsList(): void;
  getPendingTotalTradeRewardPointsList(): Array<string>;
  setPendingTotalTradeRewardPointsList(value: Array<string>): void;
  addPendingTotalTradeRewardPoints(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTradeRewardCampaignResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTradeRewardCampaignResponse): QueryTradeRewardCampaignResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTradeRewardCampaignResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTradeRewardCampaignResponse;
  static deserializeBinaryFromReader(message: QueryTradeRewardCampaignResponse, reader: jspb.BinaryReader): QueryTradeRewardCampaignResponse;
}

export namespace QueryTradeRewardCampaignResponse {
  export type AsObject = {
    tradingRewardCampaignInfo?: injective_exchange_v1beta1_exchange_pb.TradingRewardCampaignInfo.AsObject,
    tradingRewardPoolCampaignScheduleList: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool.AsObject>,
    totalTradeRewardPoints: string,
    pendingTradingRewardPoolCampaignScheduleList: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool.AsObject>,
    pendingTotalTradeRewardPointsList: Array<string>,
  }
}

export class QueryIsOptedOutOfRewardsRequest extends jspb.Message {
  getAccount(): string;
  setAccount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryIsOptedOutOfRewardsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryIsOptedOutOfRewardsRequest): QueryIsOptedOutOfRewardsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryIsOptedOutOfRewardsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryIsOptedOutOfRewardsRequest;
  static deserializeBinaryFromReader(message: QueryIsOptedOutOfRewardsRequest, reader: jspb.BinaryReader): QueryIsOptedOutOfRewardsRequest;
}

export namespace QueryIsOptedOutOfRewardsRequest {
  export type AsObject = {
    account: string,
  }
}

export class QueryIsOptedOutOfRewardsResponse extends jspb.Message {
  getIsOptedOut(): boolean;
  setIsOptedOut(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryIsOptedOutOfRewardsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryIsOptedOutOfRewardsResponse): QueryIsOptedOutOfRewardsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryIsOptedOutOfRewardsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryIsOptedOutOfRewardsResponse;
  static deserializeBinaryFromReader(message: QueryIsOptedOutOfRewardsResponse, reader: jspb.BinaryReader): QueryIsOptedOutOfRewardsResponse;
}

export namespace QueryIsOptedOutOfRewardsResponse {
  export type AsObject = {
    isOptedOut: boolean,
  }
}

export class QueryOptedOutOfRewardsAccountsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOptedOutOfRewardsAccountsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOptedOutOfRewardsAccountsRequest): QueryOptedOutOfRewardsAccountsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOptedOutOfRewardsAccountsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOptedOutOfRewardsAccountsRequest;
  static deserializeBinaryFromReader(message: QueryOptedOutOfRewardsAccountsRequest, reader: jspb.BinaryReader): QueryOptedOutOfRewardsAccountsRequest;
}

export namespace QueryOptedOutOfRewardsAccountsRequest {
  export type AsObject = {
  }
}

export class QueryOptedOutOfRewardsAccountsResponse extends jspb.Message {
  clearAccountsList(): void;
  getAccountsList(): Array<string>;
  setAccountsList(value: Array<string>): void;
  addAccounts(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOptedOutOfRewardsAccountsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOptedOutOfRewardsAccountsResponse): QueryOptedOutOfRewardsAccountsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOptedOutOfRewardsAccountsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOptedOutOfRewardsAccountsResponse;
  static deserializeBinaryFromReader(message: QueryOptedOutOfRewardsAccountsResponse, reader: jspb.BinaryReader): QueryOptedOutOfRewardsAccountsResponse;
}

export namespace QueryOptedOutOfRewardsAccountsResponse {
  export type AsObject = {
    accountsList: Array<string>,
  }
}

export class QueryFeeDiscountAccountInfoRequest extends jspb.Message {
  getAccount(): string;
  setAccount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeeDiscountAccountInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeeDiscountAccountInfoRequest): QueryFeeDiscountAccountInfoRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeeDiscountAccountInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeeDiscountAccountInfoRequest;
  static deserializeBinaryFromReader(message: QueryFeeDiscountAccountInfoRequest, reader: jspb.BinaryReader): QueryFeeDiscountAccountInfoRequest;
}

export namespace QueryFeeDiscountAccountInfoRequest {
  export type AsObject = {
    account: string,
  }
}

export class QueryFeeDiscountAccountInfoResponse extends jspb.Message {
  getTierLevel(): number;
  setTierLevel(value: number): void;

  hasAccountInfo(): boolean;
  clearAccountInfo(): void;
  getAccountInfo(): injective_exchange_v1beta1_exchange_pb.FeeDiscountTierInfo | undefined;
  setAccountInfo(value?: injective_exchange_v1beta1_exchange_pb.FeeDiscountTierInfo): void;

  hasAccountTtl(): boolean;
  clearAccountTtl(): void;
  getAccountTtl(): injective_exchange_v1beta1_exchange_pb.FeeDiscountTierTTL | undefined;
  setAccountTtl(value?: injective_exchange_v1beta1_exchange_pb.FeeDiscountTierTTL): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeeDiscountAccountInfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeeDiscountAccountInfoResponse): QueryFeeDiscountAccountInfoResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeeDiscountAccountInfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeeDiscountAccountInfoResponse;
  static deserializeBinaryFromReader(message: QueryFeeDiscountAccountInfoResponse, reader: jspb.BinaryReader): QueryFeeDiscountAccountInfoResponse;
}

export namespace QueryFeeDiscountAccountInfoResponse {
  export type AsObject = {
    tierLevel: number,
    accountInfo?: injective_exchange_v1beta1_exchange_pb.FeeDiscountTierInfo.AsObject,
    accountTtl?: injective_exchange_v1beta1_exchange_pb.FeeDiscountTierTTL.AsObject,
  }
}

export class QueryFeeDiscountScheduleRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeeDiscountScheduleRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeeDiscountScheduleRequest): QueryFeeDiscountScheduleRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeeDiscountScheduleRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeeDiscountScheduleRequest;
  static deserializeBinaryFromReader(message: QueryFeeDiscountScheduleRequest, reader: jspb.BinaryReader): QueryFeeDiscountScheduleRequest;
}

export namespace QueryFeeDiscountScheduleRequest {
  export type AsObject = {
  }
}

export class QueryFeeDiscountScheduleResponse extends jspb.Message {
  hasFeeDiscountSchedule(): boolean;
  clearFeeDiscountSchedule(): void;
  getFeeDiscountSchedule(): injective_exchange_v1beta1_exchange_pb.FeeDiscountSchedule | undefined;
  setFeeDiscountSchedule(value?: injective_exchange_v1beta1_exchange_pb.FeeDiscountSchedule): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeeDiscountScheduleResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeeDiscountScheduleResponse): QueryFeeDiscountScheduleResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeeDiscountScheduleResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeeDiscountScheduleResponse;
  static deserializeBinaryFromReader(message: QueryFeeDiscountScheduleResponse, reader: jspb.BinaryReader): QueryFeeDiscountScheduleResponse;
}

export namespace QueryFeeDiscountScheduleResponse {
  export type AsObject = {
    feeDiscountSchedule?: injective_exchange_v1beta1_exchange_pb.FeeDiscountSchedule.AsObject,
  }
}

export class QueryBalanceMismatchesRequest extends jspb.Message {
  getDustFactor(): number;
  setDustFactor(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBalanceMismatchesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBalanceMismatchesRequest): QueryBalanceMismatchesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBalanceMismatchesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBalanceMismatchesRequest;
  static deserializeBinaryFromReader(message: QueryBalanceMismatchesRequest, reader: jspb.BinaryReader): QueryBalanceMismatchesRequest;
}

export namespace QueryBalanceMismatchesRequest {
  export type AsObject = {
    dustFactor: number,
  }
}

export class BalanceMismatch extends jspb.Message {
  getSubaccountid(): string;
  setSubaccountid(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  getAvailable(): string;
  setAvailable(value: string): void;

  getTotal(): string;
  setTotal(value: string): void;

  getBalanceHold(): string;
  setBalanceHold(value: string): void;

  getExpectedTotal(): string;
  setExpectedTotal(value: string): void;

  getDifference(): string;
  setDifference(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BalanceMismatch.AsObject;
  static toObject(includeInstance: boolean, msg: BalanceMismatch): BalanceMismatch.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BalanceMismatch, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BalanceMismatch;
  static deserializeBinaryFromReader(message: BalanceMismatch, reader: jspb.BinaryReader): BalanceMismatch;
}

export namespace BalanceMismatch {
  export type AsObject = {
    subaccountid: string,
    denom: string,
    available: string,
    total: string,
    balanceHold: string,
    expectedTotal: string,
    difference: string,
  }
}

export class QueryBalanceMismatchesResponse extends jspb.Message {
  clearBalanceMismatchesList(): void;
  getBalanceMismatchesList(): Array<BalanceMismatch>;
  setBalanceMismatchesList(value: Array<BalanceMismatch>): void;
  addBalanceMismatches(value?: BalanceMismatch, index?: number): BalanceMismatch;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBalanceMismatchesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBalanceMismatchesResponse): QueryBalanceMismatchesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBalanceMismatchesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBalanceMismatchesResponse;
  static deserializeBinaryFromReader(message: QueryBalanceMismatchesResponse, reader: jspb.BinaryReader): QueryBalanceMismatchesResponse;
}

export namespace QueryBalanceMismatchesResponse {
  export type AsObject = {
    balanceMismatchesList: Array<BalanceMismatch.AsObject>,
  }
}

export class QueryBalanceWithBalanceHoldsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBalanceWithBalanceHoldsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBalanceWithBalanceHoldsRequest): QueryBalanceWithBalanceHoldsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBalanceWithBalanceHoldsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBalanceWithBalanceHoldsRequest;
  static deserializeBinaryFromReader(message: QueryBalanceWithBalanceHoldsRequest, reader: jspb.BinaryReader): QueryBalanceWithBalanceHoldsRequest;
}

export namespace QueryBalanceWithBalanceHoldsRequest {
  export type AsObject = {
  }
}

export class BalanceWithMarginHold extends jspb.Message {
  getSubaccountid(): string;
  setSubaccountid(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  getAvailable(): string;
  setAvailable(value: string): void;

  getTotal(): string;
  setTotal(value: string): void;

  getBalanceHold(): string;
  setBalanceHold(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BalanceWithMarginHold.AsObject;
  static toObject(includeInstance: boolean, msg: BalanceWithMarginHold): BalanceWithMarginHold.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BalanceWithMarginHold, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BalanceWithMarginHold;
  static deserializeBinaryFromReader(message: BalanceWithMarginHold, reader: jspb.BinaryReader): BalanceWithMarginHold;
}

export namespace BalanceWithMarginHold {
  export type AsObject = {
    subaccountid: string,
    denom: string,
    available: string,
    total: string,
    balanceHold: string,
  }
}

export class QueryBalanceWithBalanceHoldsResponse extends jspb.Message {
  clearBalanceWithBalanceHoldsList(): void;
  getBalanceWithBalanceHoldsList(): Array<BalanceWithMarginHold>;
  setBalanceWithBalanceHoldsList(value: Array<BalanceWithMarginHold>): void;
  addBalanceWithBalanceHolds(value?: BalanceWithMarginHold, index?: number): BalanceWithMarginHold;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBalanceWithBalanceHoldsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBalanceWithBalanceHoldsResponse): QueryBalanceWithBalanceHoldsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBalanceWithBalanceHoldsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBalanceWithBalanceHoldsResponse;
  static deserializeBinaryFromReader(message: QueryBalanceWithBalanceHoldsResponse, reader: jspb.BinaryReader): QueryBalanceWithBalanceHoldsResponse;
}

export namespace QueryBalanceWithBalanceHoldsResponse {
  export type AsObject = {
    balanceWithBalanceHoldsList: Array<BalanceWithMarginHold.AsObject>,
  }
}

export class QueryFeeDiscountTierStatisticsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeeDiscountTierStatisticsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeeDiscountTierStatisticsRequest): QueryFeeDiscountTierStatisticsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeeDiscountTierStatisticsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeeDiscountTierStatisticsRequest;
  static deserializeBinaryFromReader(message: QueryFeeDiscountTierStatisticsRequest, reader: jspb.BinaryReader): QueryFeeDiscountTierStatisticsRequest;
}

export namespace QueryFeeDiscountTierStatisticsRequest {
  export type AsObject = {
  }
}

export class TierStatistic extends jspb.Message {
  getTier(): number;
  setTier(value: number): void;

  getCount(): number;
  setCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TierStatistic.AsObject;
  static toObject(includeInstance: boolean, msg: TierStatistic): TierStatistic.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TierStatistic, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TierStatistic;
  static deserializeBinaryFromReader(message: TierStatistic, reader: jspb.BinaryReader): TierStatistic;
}

export namespace TierStatistic {
  export type AsObject = {
    tier: number,
    count: number,
  }
}

export class QueryFeeDiscountTierStatisticsResponse extends jspb.Message {
  clearStatisticsList(): void;
  getStatisticsList(): Array<TierStatistic>;
  setStatisticsList(value: Array<TierStatistic>): void;
  addStatistics(value?: TierStatistic, index?: number): TierStatistic;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeeDiscountTierStatisticsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeeDiscountTierStatisticsResponse): QueryFeeDiscountTierStatisticsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeeDiscountTierStatisticsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeeDiscountTierStatisticsResponse;
  static deserializeBinaryFromReader(message: QueryFeeDiscountTierStatisticsResponse, reader: jspb.BinaryReader): QueryFeeDiscountTierStatisticsResponse;
}

export namespace QueryFeeDiscountTierStatisticsResponse {
  export type AsObject = {
    statisticsList: Array<TierStatistic.AsObject>,
  }
}

export class MitoVaultInfosRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MitoVaultInfosRequest.AsObject;
  static toObject(includeInstance: boolean, msg: MitoVaultInfosRequest): MitoVaultInfosRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MitoVaultInfosRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MitoVaultInfosRequest;
  static deserializeBinaryFromReader(message: MitoVaultInfosRequest, reader: jspb.BinaryReader): MitoVaultInfosRequest;
}

export namespace MitoVaultInfosRequest {
  export type AsObject = {
  }
}

export class MitoVaultInfosResponse extends jspb.Message {
  clearMasterAddressesList(): void;
  getMasterAddressesList(): Array<string>;
  setMasterAddressesList(value: Array<string>): void;
  addMasterAddresses(value: string, index?: number): string;

  clearDerivativeAddressesList(): void;
  getDerivativeAddressesList(): Array<string>;
  setDerivativeAddressesList(value: Array<string>): void;
  addDerivativeAddresses(value: string, index?: number): string;

  clearSpotAddressesList(): void;
  getSpotAddressesList(): Array<string>;
  setSpotAddressesList(value: Array<string>): void;
  addSpotAddresses(value: string, index?: number): string;

  clearCw20AddressesList(): void;
  getCw20AddressesList(): Array<string>;
  setCw20AddressesList(value: Array<string>): void;
  addCw20Addresses(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MitoVaultInfosResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MitoVaultInfosResponse): MitoVaultInfosResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MitoVaultInfosResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MitoVaultInfosResponse;
  static deserializeBinaryFromReader(message: MitoVaultInfosResponse, reader: jspb.BinaryReader): MitoVaultInfosResponse;
}

export namespace MitoVaultInfosResponse {
  export type AsObject = {
    masterAddressesList: Array<string>,
    derivativeAddressesList: Array<string>,
    spotAddressesList: Array<string>,
    cw20AddressesList: Array<string>,
  }
}

export class QueryMarketIDFromVaultRequest extends jspb.Message {
  getVaultSubaccountId(): string;
  setVaultSubaccountId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMarketIDFromVaultRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMarketIDFromVaultRequest): QueryMarketIDFromVaultRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMarketIDFromVaultRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMarketIDFromVaultRequest;
  static deserializeBinaryFromReader(message: QueryMarketIDFromVaultRequest, reader: jspb.BinaryReader): QueryMarketIDFromVaultRequest;
}

export namespace QueryMarketIDFromVaultRequest {
  export type AsObject = {
    vaultSubaccountId: string,
  }
}

export class QueryMarketIDFromVaultResponse extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMarketIDFromVaultResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMarketIDFromVaultResponse): QueryMarketIDFromVaultResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMarketIDFromVaultResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMarketIDFromVaultResponse;
  static deserializeBinaryFromReader(message: QueryMarketIDFromVaultResponse, reader: jspb.BinaryReader): QueryMarketIDFromVaultResponse;
}

export namespace QueryMarketIDFromVaultResponse {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryHistoricalTradeRecordsRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryHistoricalTradeRecordsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryHistoricalTradeRecordsRequest): QueryHistoricalTradeRecordsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryHistoricalTradeRecordsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryHistoricalTradeRecordsRequest;
  static deserializeBinaryFromReader(message: QueryHistoricalTradeRecordsRequest, reader: jspb.BinaryReader): QueryHistoricalTradeRecordsRequest;
}

export namespace QueryHistoricalTradeRecordsRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryHistoricalTradeRecordsResponse extends jspb.Message {
  clearTradeRecordsList(): void;
  getTradeRecordsList(): Array<injective_exchange_v1beta1_exchange_pb.TradeRecords>;
  setTradeRecordsList(value: Array<injective_exchange_v1beta1_exchange_pb.TradeRecords>): void;
  addTradeRecords(value?: injective_exchange_v1beta1_exchange_pb.TradeRecords, index?: number): injective_exchange_v1beta1_exchange_pb.TradeRecords;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryHistoricalTradeRecordsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryHistoricalTradeRecordsResponse): QueryHistoricalTradeRecordsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryHistoricalTradeRecordsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryHistoricalTradeRecordsResponse;
  static deserializeBinaryFromReader(message: QueryHistoricalTradeRecordsResponse, reader: jspb.BinaryReader): QueryHistoricalTradeRecordsResponse;
}

export namespace QueryHistoricalTradeRecordsResponse {
  export type AsObject = {
    tradeRecordsList: Array<injective_exchange_v1beta1_exchange_pb.TradeRecords.AsObject>,
  }
}

export class TradeHistoryOptions extends jspb.Message {
  getTradeGroupingSec(): number;
  setTradeGroupingSec(value: number): void;

  getMaxAge(): number;
  setMaxAge(value: number): void;

  getIncludeRawHistory(): boolean;
  setIncludeRawHistory(value: boolean): void;

  getIncludeMetadata(): boolean;
  setIncludeMetadata(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TradeHistoryOptions.AsObject;
  static toObject(includeInstance: boolean, msg: TradeHistoryOptions): TradeHistoryOptions.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TradeHistoryOptions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TradeHistoryOptions;
  static deserializeBinaryFromReader(message: TradeHistoryOptions, reader: jspb.BinaryReader): TradeHistoryOptions;
}

export namespace TradeHistoryOptions {
  export type AsObject = {
    tradeGroupingSec: number,
    maxAge: number,
    includeRawHistory: boolean,
    includeMetadata: boolean,
  }
}

export class QueryMarketVolatilityRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  hasTradeHistoryOptions(): boolean;
  clearTradeHistoryOptions(): void;
  getTradeHistoryOptions(): TradeHistoryOptions | undefined;
  setTradeHistoryOptions(value?: TradeHistoryOptions): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMarketVolatilityRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMarketVolatilityRequest): QueryMarketVolatilityRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMarketVolatilityRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMarketVolatilityRequest;
  static deserializeBinaryFromReader(message: QueryMarketVolatilityRequest, reader: jspb.BinaryReader): QueryMarketVolatilityRequest;
}

export namespace QueryMarketVolatilityRequest {
  export type AsObject = {
    marketId: string,
    tradeHistoryOptions?: TradeHistoryOptions.AsObject,
  }
}

export class QueryMarketVolatilityResponse extends jspb.Message {
  getVolatility(): string;
  setVolatility(value: string): void;

  hasHistoryMetadata(): boolean;
  clearHistoryMetadata(): void;
  getHistoryMetadata(): injective_oracle_v1beta1_oracle_pb.MetadataStatistics | undefined;
  setHistoryMetadata(value?: injective_oracle_v1beta1_oracle_pb.MetadataStatistics): void;

  clearRawHistoryList(): void;
  getRawHistoryList(): Array<injective_exchange_v1beta1_exchange_pb.TradeRecord>;
  setRawHistoryList(value: Array<injective_exchange_v1beta1_exchange_pb.TradeRecord>): void;
  addRawHistory(value?: injective_exchange_v1beta1_exchange_pb.TradeRecord, index?: number): injective_exchange_v1beta1_exchange_pb.TradeRecord;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMarketVolatilityResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMarketVolatilityResponse): QueryMarketVolatilityResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMarketVolatilityResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMarketVolatilityResponse;
  static deserializeBinaryFromReader(message: QueryMarketVolatilityResponse, reader: jspb.BinaryReader): QueryMarketVolatilityResponse;
}

export namespace QueryMarketVolatilityResponse {
  export type AsObject = {
    volatility: string,
    historyMetadata?: injective_oracle_v1beta1_oracle_pb.MetadataStatistics.AsObject,
    rawHistoryList: Array<injective_exchange_v1beta1_exchange_pb.TradeRecord.AsObject>,
  }
}

export class QueryBinaryMarketsRequest extends jspb.Message {
  getStatus(): string;
  setStatus(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBinaryMarketsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBinaryMarketsRequest): QueryBinaryMarketsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBinaryMarketsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBinaryMarketsRequest;
  static deserializeBinaryFromReader(message: QueryBinaryMarketsRequest, reader: jspb.BinaryReader): QueryBinaryMarketsRequest;
}

export namespace QueryBinaryMarketsRequest {
  export type AsObject = {
    status: string,
  }
}

export class QueryBinaryMarketsResponse extends jspb.Message {
  clearMarketsList(): void;
  getMarketsList(): Array<injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket>;
  setMarketsList(value: Array<injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket>): void;
  addMarkets(value?: injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket, index?: number): injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBinaryMarketsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBinaryMarketsResponse): QueryBinaryMarketsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBinaryMarketsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBinaryMarketsResponse;
  static deserializeBinaryFromReader(message: QueryBinaryMarketsResponse, reader: jspb.BinaryReader): QueryBinaryMarketsResponse;
}

export namespace QueryBinaryMarketsResponse {
  export type AsObject = {
    marketsList: Array<injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket.AsObject>,
  }
}

export class QueryTraderDerivativeConditionalOrdersRequest extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderDerivativeConditionalOrdersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderDerivativeConditionalOrdersRequest): QueryTraderDerivativeConditionalOrdersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderDerivativeConditionalOrdersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderDerivativeConditionalOrdersRequest;
  static deserializeBinaryFromReader(message: QueryTraderDerivativeConditionalOrdersRequest, reader: jspb.BinaryReader): QueryTraderDerivativeConditionalOrdersRequest;
}

export namespace QueryTraderDerivativeConditionalOrdersRequest {
  export type AsObject = {
    subaccountId: string,
    marketId: string,
  }
}

export class TrimmedDerivativeConditionalOrder extends jspb.Message {
  getPrice(): string;
  setPrice(value: string): void;

  getQuantity(): string;
  setQuantity(value: string): void;

  getMargin(): string;
  setMargin(value: string): void;

  getTriggerprice(): string;
  setTriggerprice(value: string): void;

  getIsbuy(): boolean;
  setIsbuy(value: boolean): void;

  getIslimit(): boolean;
  setIslimit(value: boolean): void;

  getOrderHash(): string;
  setOrderHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TrimmedDerivativeConditionalOrder.AsObject;
  static toObject(includeInstance: boolean, msg: TrimmedDerivativeConditionalOrder): TrimmedDerivativeConditionalOrder.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TrimmedDerivativeConditionalOrder, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TrimmedDerivativeConditionalOrder;
  static deserializeBinaryFromReader(message: TrimmedDerivativeConditionalOrder, reader: jspb.BinaryReader): TrimmedDerivativeConditionalOrder;
}

export namespace TrimmedDerivativeConditionalOrder {
  export type AsObject = {
    price: string,
    quantity: string,
    margin: string,
    triggerprice: string,
    isbuy: boolean,
    islimit: boolean,
    orderHash: string,
  }
}

export class QueryTraderDerivativeConditionalOrdersResponse extends jspb.Message {
  clearOrdersList(): void;
  getOrdersList(): Array<TrimmedDerivativeConditionalOrder>;
  setOrdersList(value: Array<TrimmedDerivativeConditionalOrder>): void;
  addOrders(value?: TrimmedDerivativeConditionalOrder, index?: number): TrimmedDerivativeConditionalOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryTraderDerivativeConditionalOrdersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryTraderDerivativeConditionalOrdersResponse): QueryTraderDerivativeConditionalOrdersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryTraderDerivativeConditionalOrdersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryTraderDerivativeConditionalOrdersResponse;
  static deserializeBinaryFromReader(message: QueryTraderDerivativeConditionalOrdersResponse, reader: jspb.BinaryReader): QueryTraderDerivativeConditionalOrdersResponse;
}

export namespace QueryTraderDerivativeConditionalOrdersResponse {
  export type AsObject = {
    ordersList: Array<TrimmedDerivativeConditionalOrder.AsObject>,
  }
}

export class QueryMarketAtomicExecutionFeeMultiplierRequest extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMarketAtomicExecutionFeeMultiplierRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMarketAtomicExecutionFeeMultiplierRequest): QueryMarketAtomicExecutionFeeMultiplierRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMarketAtomicExecutionFeeMultiplierRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMarketAtomicExecutionFeeMultiplierRequest;
  static deserializeBinaryFromReader(message: QueryMarketAtomicExecutionFeeMultiplierRequest, reader: jspb.BinaryReader): QueryMarketAtomicExecutionFeeMultiplierRequest;
}

export namespace QueryMarketAtomicExecutionFeeMultiplierRequest {
  export type AsObject = {
    marketId: string,
  }
}

export class QueryMarketAtomicExecutionFeeMultiplierResponse extends jspb.Message {
  getMultiplier(): string;
  setMultiplier(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryMarketAtomicExecutionFeeMultiplierResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryMarketAtomicExecutionFeeMultiplierResponse): QueryMarketAtomicExecutionFeeMultiplierResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryMarketAtomicExecutionFeeMultiplierResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryMarketAtomicExecutionFeeMultiplierResponse;
  static deserializeBinaryFromReader(message: QueryMarketAtomicExecutionFeeMultiplierResponse, reader: jspb.BinaryReader): QueryMarketAtomicExecutionFeeMultiplierResponse;
}

export namespace QueryMarketAtomicExecutionFeeMultiplierResponse {
  export type AsObject = {
    multiplier: string,
  }
}

export interface CancellationStrategyMap {
  UNSPECIFIEDORDER: 0;
  FROMWORSTTOBEST: 1;
  FROMBESTTOWORST: 2;
}

export const CancellationStrategy: CancellationStrategyMap;

