import{BigNumber as t}from"ethers";import{ArgumentError as a}from"../errors/errors.js";import"big.js";import{invariant as r}from"../utils/errorChecker.js";import"../constants/envVariables.js";import"../constants/numbers.js";import"../utils/tick.js";import{getTransactionErrorFactory as o}from"./errorFactory.js";async function s({value:s,account:e,contract:n,bypassGasEstimation:i=!1,...c}){const{contractFunctionName:m,args:u}=c,f={from:e,to:n.address,value:s,inputData:n.interface.encodeFunctionData(m,u)},d={...c,txPayload:f};let l;try{const o=n[m];r(!!o,(()=>new a({functionName:"getTransaction",key:"contract[functionName]",value:{contractAddress:n.address,functionName:m}})));const c={from:e,value:s},p=()=>n.estimateGas[m](...u,c),g=i?t.from(16e6):await p();l=g.mul(t.from(11)).div(10).toString();return{transaction:await o(...u,{gasLimit:l,...c}),metadata:{txPayload:f,...d},gasLimit:l}}catch(t){throw o({error:t,metadata:d,...l&&{gasLimit:l}})}}export{s as getTransaction};
//# sourceMappingURL=index.js.map
