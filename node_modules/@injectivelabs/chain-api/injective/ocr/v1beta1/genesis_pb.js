// source: injective/ocr/v1beta1/genesis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var injective_ocr_v1beta1_ocr_pb = require('../../../injective/ocr/v1beta1/ocr_pb.js');
goog.object.extend(proto, injective_ocr_v1beta1_ocr_pb);
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
goog.exportSymbol('proto.injective.ocr.v1beta1.Count', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedCounts', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedEpochAndRound', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedTransmission', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.GenesisState', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.PendingPayeeship', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.RewardPool', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.GenesisState.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.GenesisState.displayName = 'proto.injective.ocr.v1beta1.GenesisState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedTransmission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedTransmission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedTransmission.displayName = 'proto.injective.ocr.v1beta1.FeedTransmission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedEpochAndRound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedEpochAndRound.displayName = 'proto.injective.ocr.v1beta1.FeedEpochAndRound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.displayName = 'proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.RewardPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.RewardPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.RewardPool.displayName = 'proto.injective.ocr.v1beta1.RewardPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedCounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.FeedCounts.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedCounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedCounts.displayName = 'proto.injective.ocr.v1beta1.FeedCounts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.Count = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.Count, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.Count.displayName = 'proto.injective.ocr.v1beta1.Count';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.PendingPayeeship = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.PendingPayeeship, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.PendingPayeeship.displayName = 'proto.injective.ocr.v1beta1.PendingPayeeship';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.GenesisState.repeatedFields_ = [2,3,4,5,6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && injective_ocr_v1beta1_ocr_pb.Params.toObject(includeInstance, f),
    feedConfigsList: jspb.Message.toObjectList(msg.getFeedConfigsList(),
    injective_ocr_v1beta1_ocr_pb.FeedConfig.toObject, includeInstance),
    latestEpochAndRoundsList: jspb.Message.toObjectList(msg.getLatestEpochAndRoundsList(),
    proto.injective.ocr.v1beta1.FeedEpochAndRound.toObject, includeInstance),
    feedTransmissionsList: jspb.Message.toObjectList(msg.getFeedTransmissionsList(),
    proto.injective.ocr.v1beta1.FeedTransmission.toObject, includeInstance),
    latestAggregatorRoundIdsList: jspb.Message.toObjectList(msg.getLatestAggregatorRoundIdsList(),
    proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.toObject, includeInstance),
    rewardPoolsList: jspb.Message.toObjectList(msg.getRewardPoolsList(),
    proto.injective.ocr.v1beta1.RewardPool.toObject, includeInstance),
    feedObservationCountsList: jspb.Message.toObjectList(msg.getFeedObservationCountsList(),
    proto.injective.ocr.v1beta1.FeedCounts.toObject, includeInstance),
    feedTransmissionCountsList: jspb.Message.toObjectList(msg.getFeedTransmissionCountsList(),
    proto.injective.ocr.v1beta1.FeedCounts.toObject, includeInstance),
    pendingPayeeshipsList: jspb.Message.toObjectList(msg.getPendingPayeeshipsList(),
    proto.injective.ocr.v1beta1.PendingPayeeship.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.GenesisState}
 */
proto.injective.ocr.v1beta1.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.GenesisState;
  return proto.injective.ocr.v1beta1.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.GenesisState}
 */
proto.injective.ocr.v1beta1.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_ocr_v1beta1_ocr_pb.Params;
      reader.readMessage(value,injective_ocr_v1beta1_ocr_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 2:
      var value = new injective_ocr_v1beta1_ocr_pb.FeedConfig;
      reader.readMessage(value,injective_ocr_v1beta1_ocr_pb.FeedConfig.deserializeBinaryFromReader);
      msg.addFeedConfigs(value);
      break;
    case 3:
      var value = new proto.injective.ocr.v1beta1.FeedEpochAndRound;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedEpochAndRound.deserializeBinaryFromReader);
      msg.addLatestEpochAndRounds(value);
      break;
    case 4:
      var value = new proto.injective.ocr.v1beta1.FeedTransmission;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedTransmission.deserializeBinaryFromReader);
      msg.addFeedTransmissions(value);
      break;
    case 5:
      var value = new proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.deserializeBinaryFromReader);
      msg.addLatestAggregatorRoundIds(value);
      break;
    case 6:
      var value = new proto.injective.ocr.v1beta1.RewardPool;
      reader.readMessage(value,proto.injective.ocr.v1beta1.RewardPool.deserializeBinaryFromReader);
      msg.addRewardPools(value);
      break;
    case 7:
      var value = new proto.injective.ocr.v1beta1.FeedCounts;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedCounts.deserializeBinaryFromReader);
      msg.addFeedObservationCounts(value);
      break;
    case 8:
      var value = new proto.injective.ocr.v1beta1.FeedCounts;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedCounts.deserializeBinaryFromReader);
      msg.addFeedTransmissionCounts(value);
      break;
    case 9:
      var value = new proto.injective.ocr.v1beta1.PendingPayeeship;
      reader.readMessage(value,proto.injective.ocr.v1beta1.PendingPayeeship.deserializeBinaryFromReader);
      msg.addPendingPayeeships(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_ocr_v1beta1_ocr_pb.Params.serializeBinaryToWriter
    );
  }
  f = message.getFeedConfigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      injective_ocr_v1beta1_ocr_pb.FeedConfig.serializeBinaryToWriter
    );
  }
  f = message.getLatestEpochAndRoundsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.injective.ocr.v1beta1.FeedEpochAndRound.serializeBinaryToWriter
    );
  }
  f = message.getFeedTransmissionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.injective.ocr.v1beta1.FeedTransmission.serializeBinaryToWriter
    );
  }
  f = message.getLatestAggregatorRoundIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.serializeBinaryToWriter
    );
  }
  f = message.getRewardPoolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.injective.ocr.v1beta1.RewardPool.serializeBinaryToWriter
    );
  }
  f = message.getFeedObservationCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.injective.ocr.v1beta1.FeedCounts.serializeBinaryToWriter
    );
  }
  f = message.getFeedTransmissionCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.injective.ocr.v1beta1.FeedCounts.serializeBinaryToWriter
    );
  }
  f = message.getPendingPayeeshipsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.injective.ocr.v1beta1.PendingPayeeship.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.injective.ocr.v1beta1.Params}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getParams = function() {
  return /** @type{?proto.injective.ocr.v1beta1.Params} */ (
    jspb.Message.getWrapperField(this, injective_ocr_v1beta1_ocr_pb.Params, 1));
};


/**
 * @param {?proto.injective.ocr.v1beta1.Params|undefined} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated FeedConfig feed_configs = 2;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedConfig>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getFeedConfigsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_ocr_v1beta1_ocr_pb.FeedConfig, 2));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedConfig>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setFeedConfigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedConfig}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addFeedConfigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective.ocr.v1beta1.FeedConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearFeedConfigsList = function() {
  return this.setFeedConfigsList([]);
};


/**
 * repeated FeedEpochAndRound latest_epoch_and_rounds = 3;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedEpochAndRound>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getLatestEpochAndRoundsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedEpochAndRound>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.FeedEpochAndRound, 3));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedEpochAndRound>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setLatestEpochAndRoundsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedEpochAndRound=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedEpochAndRound}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addLatestEpochAndRounds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.injective.ocr.v1beta1.FeedEpochAndRound, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearLatestEpochAndRoundsList = function() {
  return this.setLatestEpochAndRoundsList([]);
};


/**
 * repeated FeedTransmission feed_transmissions = 4;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedTransmission>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getFeedTransmissionsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedTransmission>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.FeedTransmission, 4));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedTransmission>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setFeedTransmissionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedTransmission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedTransmission}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addFeedTransmissions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.injective.ocr.v1beta1.FeedTransmission, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearFeedTransmissionsList = function() {
  return this.setFeedTransmissionsList([]);
};


/**
 * repeated FeedLatestAggregatorRoundIDs latest_aggregator_round_ids = 5;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getLatestAggregatorRoundIdsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs, 5));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setLatestAggregatorRoundIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addLatestAggregatorRoundIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearLatestAggregatorRoundIdsList = function() {
  return this.setLatestAggregatorRoundIdsList([]);
};


/**
 * repeated RewardPool reward_pools = 6;
 * @return {!Array<!proto.injective.ocr.v1beta1.RewardPool>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getRewardPoolsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.RewardPool>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.RewardPool, 6));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.RewardPool>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setRewardPoolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.RewardPool=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.RewardPool}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addRewardPools = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.injective.ocr.v1beta1.RewardPool, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearRewardPoolsList = function() {
  return this.setRewardPoolsList([]);
};


/**
 * repeated FeedCounts feed_observation_counts = 7;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedCounts>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getFeedObservationCountsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedCounts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.FeedCounts, 7));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedCounts>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setFeedObservationCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedCounts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedCounts}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addFeedObservationCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.injective.ocr.v1beta1.FeedCounts, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearFeedObservationCountsList = function() {
  return this.setFeedObservationCountsList([]);
};


/**
 * repeated FeedCounts feed_transmission_counts = 8;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedCounts>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getFeedTransmissionCountsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedCounts>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.FeedCounts, 8));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedCounts>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setFeedTransmissionCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedCounts=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedCounts}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addFeedTransmissionCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.injective.ocr.v1beta1.FeedCounts, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearFeedTransmissionCountsList = function() {
  return this.setFeedTransmissionCountsList([]);
};


/**
 * repeated PendingPayeeship pending_payeeships = 9;
 * @return {!Array<!proto.injective.ocr.v1beta1.PendingPayeeship>}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.getPendingPayeeshipsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.PendingPayeeship>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.PendingPayeeship, 9));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.PendingPayeeship>} value
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
*/
proto.injective.ocr.v1beta1.GenesisState.prototype.setPendingPayeeshipsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.PendingPayeeship=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.PendingPayeeship}
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.addPendingPayeeships = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.injective.ocr.v1beta1.PendingPayeeship, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GenesisState} returns this
 */
proto.injective.ocr.v1beta1.GenesisState.prototype.clearPendingPayeeshipsList = function() {
  return this.setPendingPayeeshipsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedTransmission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedTransmission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedTransmission.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transmission: (f = msg.getTransmission()) && injective_ocr_v1beta1_ocr_pb.Transmission.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedTransmission}
 */
proto.injective.ocr.v1beta1.FeedTransmission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedTransmission;
  return proto.injective.ocr.v1beta1.FeedTransmission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedTransmission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedTransmission}
 */
proto.injective.ocr.v1beta1.FeedTransmission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = new injective_ocr_v1beta1_ocr_pb.Transmission;
      reader.readMessage(value,injective_ocr_v1beta1_ocr_pb.Transmission.deserializeBinaryFromReader);
      msg.setTransmission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedTransmission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedTransmission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedTransmission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransmission();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      injective_ocr_v1beta1_ocr_pb.Transmission.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedTransmission} returns this
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Transmission transmission = 2;
 * @return {?proto.injective.ocr.v1beta1.Transmission}
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.getTransmission = function() {
  return /** @type{?proto.injective.ocr.v1beta1.Transmission} */ (
    jspb.Message.getWrapperField(this, injective_ocr_v1beta1_ocr_pb.Transmission, 2));
};


/**
 * @param {?proto.injective.ocr.v1beta1.Transmission|undefined} value
 * @return {!proto.injective.ocr.v1beta1.FeedTransmission} returns this
*/
proto.injective.ocr.v1beta1.FeedTransmission.prototype.setTransmission = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.FeedTransmission} returns this
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.clearTransmission = function() {
  return this.setTransmission(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.FeedTransmission.prototype.hasTransmission = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedEpochAndRound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedEpochAndRound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    epochAndRound: (f = msg.getEpochAndRound()) && injective_ocr_v1beta1_ocr_pb.EpochAndRound.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedEpochAndRound}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedEpochAndRound;
  return proto.injective.ocr.v1beta1.FeedEpochAndRound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedEpochAndRound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedEpochAndRound}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = new injective_ocr_v1beta1_ocr_pb.EpochAndRound;
      reader.readMessage(value,injective_ocr_v1beta1_ocr_pb.EpochAndRound.deserializeBinaryFromReader);
      msg.setEpochAndRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedEpochAndRound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedEpochAndRound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEpochAndRound();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      injective_ocr_v1beta1_ocr_pb.EpochAndRound.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedEpochAndRound} returns this
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EpochAndRound epoch_and_round = 2;
 * @return {?proto.injective.ocr.v1beta1.EpochAndRound}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.getEpochAndRound = function() {
  return /** @type{?proto.injective.ocr.v1beta1.EpochAndRound} */ (
    jspb.Message.getWrapperField(this, injective_ocr_v1beta1_ocr_pb.EpochAndRound, 2));
};


/**
 * @param {?proto.injective.ocr.v1beta1.EpochAndRound|undefined} value
 * @return {!proto.injective.ocr.v1beta1.FeedEpochAndRound} returns this
*/
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.setEpochAndRound = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.FeedEpochAndRound} returns this
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.clearEpochAndRound = function() {
  return this.setEpochAndRound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.FeedEpochAndRound.prototype.hasEpochAndRound = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    aggregatorRoundId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs}
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs;
  return proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs}
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAggregatorRoundId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAggregatorRoundId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs} returns this
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 aggregator_round_id = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.prototype.getAggregatorRoundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs} returns this
 */
proto.injective.ocr.v1beta1.FeedLatestAggregatorRoundIDs.prototype.setAggregatorRoundId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.RewardPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.RewardPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.RewardPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: (f = msg.getAmount()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.RewardPool}
 */
proto.injective.ocr.v1beta1.RewardPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.RewardPool;
  return proto.injective.ocr.v1beta1.RewardPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.RewardPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.RewardPool}
 */
proto.injective.ocr.v1beta1.RewardPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.RewardPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.RewardPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.RewardPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.RewardPool} returns this
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional cosmos.base.v1beta1.Coin amount = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.getAmount = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.ocr.v1beta1.RewardPool} returns this
*/
proto.injective.ocr.v1beta1.RewardPool.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.RewardPool} returns this
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.RewardPool.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.FeedCounts.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedCounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedCounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedCounts.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    countsList: jspb.Message.toObjectList(msg.getCountsList(),
    proto.injective.ocr.v1beta1.Count.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedCounts}
 */
proto.injective.ocr.v1beta1.FeedCounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedCounts;
  return proto.injective.ocr.v1beta1.FeedCounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedCounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedCounts}
 */
proto.injective.ocr.v1beta1.FeedCounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = new proto.injective.ocr.v1beta1.Count;
      reader.readMessage(value,proto.injective.ocr.v1beta1.Count.deserializeBinaryFromReader);
      msg.addCounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedCounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedCounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedCounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective.ocr.v1beta1.Count.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedCounts} returns this
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Count counts = 2;
 * @return {!Array<!proto.injective.ocr.v1beta1.Count>}
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.getCountsList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.Count>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.Count, 2));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.Count>} value
 * @return {!proto.injective.ocr.v1beta1.FeedCounts} returns this
*/
proto.injective.ocr.v1beta1.FeedCounts.prototype.setCountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.Count=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.Count}
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.addCounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective.ocr.v1beta1.Count, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.FeedCounts} returns this
 */
proto.injective.ocr.v1beta1.FeedCounts.prototype.clearCountsList = function() {
  return this.setCountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.Count.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.Count.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.Count} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Count.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.Count}
 */
proto.injective.ocr.v1beta1.Count.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.Count;
  return proto.injective.ocr.v1beta1.Count.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.Count} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.Count}
 */
proto.injective.ocr.v1beta1.Count.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.Count.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.Count.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.Count} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Count.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.Count.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.Count} returns this
 */
proto.injective.ocr.v1beta1.Count.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 count = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.Count.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.Count} returns this
 */
proto.injective.ocr.v1beta1.Count.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.PendingPayeeship.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.PendingPayeeship} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.PendingPayeeship.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transmitter: jspb.Message.getFieldWithDefault(msg, 2, ""),
    proposedPayee: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.PendingPayeeship}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.PendingPayeeship;
  return proto.injective.ocr.v1beta1.PendingPayeeship.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.PendingPayeeship} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.PendingPayeeship}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransmitter(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposedPayee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.PendingPayeeship.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.PendingPayeeship} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.PendingPayeeship.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransmitter();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProposedPayee();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.PendingPayeeship} returns this
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string transmitter = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.getTransmitter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.PendingPayeeship} returns this
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.setTransmitter = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string proposed_payee = 3;
 * @return {string}
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.getProposedPayee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.PendingPayeeship} returns this
 */
proto.injective.ocr.v1beta1.PendingPayeeship.prototype.setProposedPayee = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.injective.ocr.v1beta1);
