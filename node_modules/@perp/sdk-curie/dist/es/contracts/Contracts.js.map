{"version":3,"file":"Contracts.js","sources":["../../../src/contracts/Contracts.ts"],"sourcesContent":["import {\n    AccountBalance,\n    AccountBalance__factory,\n    BaseToken,\n    BaseToken__factory,\n    ClearingHouse,\n    ClearingHouseConfig,\n    ClearingHouseConfig__factory,\n    ClearingHouse__factory,\n    CollateralManager,\n    CollateralManager__factory,\n    Exchange,\n    Exchange__factory,\n    IERC20Metadata,\n    IERC20Metadata__factory,\n    IPriceFeed__factory,\n    MarketRegistry,\n    MarketRegistry__factory,\n    Multicall2,\n    Multicall2__factory,\n    OrderBook,\n    OrderBook__factory,\n    PerpPortal,\n    PerpPortal__factory,\n    Quoter,\n    Quoter__factory,\n    UniswapV3Pool,\n    UniswapV3Pool__factory,\n    Vault,\n    Vault__factory,\n    ChainlinkPriceFeed,\n    LimitOrderBook__factory,\n    LimitOrderBook,\n    DelegateApproval,\n    DelegateApproval__factory,\n    ChainlinkPriceFeed__factory,\n    AggregatorV3Interface,\n    AggregatorV3Interface__factory,\n} from \"./type\"\nimport { Collateral, Metadata } from \"../metadata\"\nimport { Signer, Contract, constants, providers } from \"ethers\"\n\nexport enum ContractName {\n    VAULT = \"Vault\",\n    CLEARINGHOUSE = \"ClearingHouse\",\n    ORDERBOOK = \"OrderBook\",\n    CLEARINGHOUSE_CONFIG = \"ClearingHouseConfig\",\n    COLLATERAL_MANAGER = \"CollateralManager\",\n    SETTLEMENT_TOKEN = \"SettlementToken\",\n    COLLATERAL_TOKENS = \"CollateralTokens\",\n    BASE_TOKEN = \"BaseToken\",\n    CHAINLINK_PRICE_FEED = \"ChainlinkPriceFeed\",\n    POOL = \"Pool\",\n    QUOTER = \"Quoter\",\n    EXCHANGE = \"Exchange\",\n    ACCOUNT_BALANCE = \"AccountBalance\",\n    MARKET_REGISTRY = \"MarketRegistry\",\n    MULTICALL2 = \"Multicall2\",\n    PerpPortal = \"PerpPortal\",\n    Token0 = \"Token0\", // baseToken in uniswap\n    Token1 = \"Token1\", // quoteToken in uniswap\n    LimitOrderBook = \"LimitOrderBook\",\n    DelegateApproval = \"DelegateApproval\",\n}\n\ninterface ContractsConfig {\n    provider: providers.Provider\n    metadata: Metadata\n}\n\nexport class Contracts {\n    hasSigner = false\n    vault: Vault\n    clearingHouse: ClearingHouse\n    orderBook: OrderBook\n    collateralManager: CollateralManager\n    settlementToken: IERC20Metadata\n    collateralTokenMap: Map<string, { contract: IERC20Metadata; priceFeedContract: Contract }> = new Map()\n    baseToken: BaseToken\n    baseTokenPriceFeed: ChainlinkPriceFeed\n    baseTokenPriceFeedAggregator: AggregatorV3Interface\n    pool: UniswapV3Pool\n    quoter: Quoter\n    exchange: Exchange\n    clearingHouseConfig: ClearingHouseConfig\n    marketRegistry: MarketRegistry\n    accountBalance: AccountBalance\n    multicall2: Multicall2\n    perpPortal: PerpPortal\n    limitOrderBook: LimitOrderBook\n    delegateApproval: DelegateApproval\n\n    private readonly _provider: providers.Provider\n\n    constructor({ metadata, provider }: ContractsConfig) {\n        const {\n            ClearingHouse,\n            ClearingHouseConfig,\n            OrderBook,\n            Vault,\n            Quoter,\n            Exchange,\n            MarketRegistry,\n            AccountBalance,\n            Multicall2,\n            PerpPortal,\n            CollateralManager,\n            LimitOrderBook,\n            DelegateApproval,\n        } = metadata.contracts\n\n        const { USDC: settlementTokenAddress } = metadata.externalContracts\n\n        // TODO(mc): should get it from metadata.externalContracts.collateralTokenInfos\n        const collateralTokenInfos = metadata.collaterals\n        this._setCollateralTokenMap(collateralTokenInfos, provider)\n\n        // NOTE: Init contract instances.\n        this.vault = Vault__factory.connect(Vault.address, provider)\n        this.clearingHouse = ClearingHouse__factory.connect(ClearingHouse.address, provider)\n        this.clearingHouseConfig = ClearingHouseConfig__factory.connect(ClearingHouseConfig.address, provider)\n        this.orderBook = OrderBook__factory.connect(OrderBook.address, provider)\n        this.collateralManager = CollateralManager__factory.connect(CollateralManager.address, provider)\n        this.settlementToken = IERC20Metadata__factory.connect(settlementTokenAddress, provider)\n        this.baseToken = BaseToken__factory.connect(constants.AddressZero, provider)\n\n        /* NOTE:\n         * Using ChainlinkPriceFeed__factory to assume all PriceFeed supports 'getAggregator'\n         * but in reality other PriceFeed may still be used.\n         **/\n        this.baseTokenPriceFeed = ChainlinkPriceFeed__factory.connect(constants.AddressZero, provider)\n        this.baseTokenPriceFeedAggregator = AggregatorV3Interface__factory.connect(constants.AddressZero, provider)\n\n        this.pool = UniswapV3Pool__factory.connect(constants.AddressZero, provider)\n        this.quoter = Quoter__factory.connect(Quoter.address, provider)\n        this.exchange = Exchange__factory.connect(Exchange.address, provider)\n        this.marketRegistry = MarketRegistry__factory.connect(MarketRegistry.address, provider)\n        this.accountBalance = AccountBalance__factory.connect(AccountBalance.address, provider)\n        this.multicall2 = Multicall2__factory.connect(Multicall2.address, provider)\n        this.perpPortal = PerpPortal__factory.connect(PerpPortal.address, provider)\n        this.limitOrderBook = LimitOrderBook__factory.connect(LimitOrderBook.address, provider)\n        this.delegateApproval = DelegateApproval__factory.connect(DelegateApproval.address, provider)\n        this._provider = provider\n    }\n\n    connect(signer: Signer) {\n        this.hasSigner = true\n        this.vault = this.vault.connect(signer)\n        this.clearingHouse = this.clearingHouse.connect(signer)\n        this.settlementToken = this.settlementToken.connect(signer)\n        this.collateralTokenMap.forEach((value, key) => {\n            this.collateralTokenMap.set(key, {\n                ...value,\n                contract: value.contract.connect(signer),\n            })\n        })\n        this.delegateApproval = this.delegateApproval.connect(signer)\n        this.limitOrderBook = this.limitOrderBook.connect(signer)\n    }\n\n    createIERC20Token(tokenAddress: string) {\n        return IERC20Metadata__factory.connect(tokenAddress, this._provider)\n    }\n\n    private _setCollateralTokenMap(tokenInfos: Collateral[], provider: providers.Provider) {\n        tokenInfos.forEach(tokenInfo =>\n            this.collateralTokenMap.set(tokenInfo.address, {\n                contract: IERC20Metadata__factory.connect(tokenInfo.address, provider),\n                priceFeedContract: IPriceFeed__factory.connect(tokenInfo.priceFeedAddress, provider),\n            }),\n        )\n    }\n}\n"],"names":["ContractName","Contracts","constructor","metadata","provider","this","hasSigner","collateralTokenMap","Map","ClearingHouse","ClearingHouseConfig","OrderBook","Vault","Quoter","Exchange","MarketRegistry","AccountBalance","Multicall2","PerpPortal","CollateralManager","LimitOrderBook","DelegateApproval","contracts","USDC","settlementTokenAddress","externalContracts","collateralTokenInfos","collaterals","_setCollateralTokenMap","vault","Vault__factory","connect","address","clearingHouse","ClearingHouse__factory","clearingHouseConfig","ClearingHouseConfig__factory","orderBook","OrderBook__factory","collateralManager","CollateralManager__factory","settlementToken","IERC20Metadata__factory","baseToken","BaseToken__factory","constants","AddressZero","baseTokenPriceFeed","ChainlinkPriceFeed__factory","baseTokenPriceFeedAggregator","AggregatorV3Interface__factory","pool","UniswapV3Pool__factory","quoter","Quoter__factory","exchange","Exchange__factory","marketRegistry","MarketRegistry__factory","accountBalance","AccountBalance__factory","multicall2","Multicall2__factory","perpPortal","PerpPortal__factory","limitOrderBook","LimitOrderBook__factory","delegateApproval","DelegateApproval__factory","_provider","signer","forEach","value","key","set","contract","createIERC20Token","tokenAddress","tokenInfos","tokenInfo","priceFeedContract","IPriceFeed__factory","priceFeedAddress"],"mappings":"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"}