import { Pair } from './entities/pair';
import { ChainId } from './constants';
import { Token } from './entities/token';
/**
 * Contains methods for constructing instances of pairs and tokens from on-chain data.
 */
export declare abstract class Fetcher {
    /**
     * Cannot be constructed.
     */
    private constructor();
    /**
     * Fetch information for a given token on the given chain, using the given viem public client.
     * @param chainId chain of the token
     * @param address address of the token on the chain
     * @param client client used to fetch the token
     * @param symbol optional symbol of the token
     * @param name optional name of the token
     */
    static fetchTokenData(chainId: ChainId, address: string, client?: {
        chain: {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        };
        key: string;
        name: string;
        pollingInterval: number;
        request: {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        };
        transport: import("viem").TransportConfig<"http", {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        } & {
            (args: {
                method: "eth_sendTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_sign";
                params: [address: `0x${string}`, data: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTypedData_v4";
                params: [address: `0x${string}`, message: string];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_syncing";
                params?: undefined;
            }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
            (args: {
                method: "personal_sign";
                params: [data: `0x${string}`, address: `0x${string}`];
            }): Promise<`0x${string}`>;
        } & {
            (args: {
                method: "eth_accounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_requestAccounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "wallet_requestPermissions";
                params: [permissions: {
                    eth_accounts: Record<string, any>;
                }];
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_getPermissions";
                params?: undefined;
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_addEthereumChain";
                params: [chain: import("viem/dist/types/types/eip1193").Chain];
            }): Promise<null>;
            (args: {
                method: "wallet_switchEthereumChain";
                params: [chain: {
                    chainId: string;
                }];
            }): Promise<null>;
            (args: {
                method: "wallet_watchAsset";
                params: import("viem/dist/types/types/eip1193").WatchAssetParams;
            }): Promise<boolean>;
        }> & {
            url?: string | undefined;
        };
        type: string;
        uid: string;
        batch?: {
            multicall?: boolean | import("viem/dist/types/clients/createPublicClient").MulticallBatchOptions | undefined;
        } | undefined;
        call: (parameters: import("viem").CallParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => Promise<import("viem").CallReturnType>;
        createBlockFilter: () => Promise<{
            id: `0x${string}`;
            request: {
                (args: {
                    method: "web3_clientVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "web3_sha3";
                    params: [data: `0x${string}`];
                }): Promise<string>;
                (args: {
                    method: "net_listening";
                    params?: undefined;
                }): Promise<boolean>;
                (args: {
                    method: "net_peerCount";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "net_version";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_blockNumber";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_call";
                    params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_coinbase";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_estimateGas";
                    params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_feeHistory";
                    params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
                }): Promise<import("viem").RpcFeeHistory>;
                (args: {
                    method: "eth_gasPrice";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBalance";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockByHash";
                    params: [hash: `0x${string}`, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockTransactionCountByHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockTransactionCountByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getCode";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getFilterChanges";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
                (args: {
                    method: "eth_getFilterLogs";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getLogs";
                    params: [parameters: {
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    } & ({
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        blockHash?: undefined;
                    } | {
                        fromBlock?: undefined;
                        toBlock?: undefined;
                        blockHash?: `0x${string}` | undefined;
                    })];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getStorageAt";
                    params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByHash";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionCount";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionReceipt";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransactionReceipt | null>;
                (args: {
                    method: "eth_getUncleByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleCountByBlockHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getUncleCountByBlockNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newBlockFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newFilter";
                    params: [filter: {
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    }];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newPendingTransactionFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_protocolVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "eth_sendRawTransaction";
                    params: [signedTransaction: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_uninstallFilter";
                    params: [filterId: `0x${string}`];
                }): Promise<boolean>;
            } & {
                (args: {
                    method: "eth_sendTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_sign";
                    params: [address: `0x${string}`, data: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTypedData_v4";
                    params: [address: `0x${string}`, message: string];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_syncing";
                    params?: undefined;
                }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
                (args: {
                    method: "personal_sign";
                    params: [data: `0x${string}`, address: `0x${string}`];
                }): Promise<`0x${string}`>;
            } & {
                (args: {
                    method: "eth_accounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_requestAccounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "wallet_requestPermissions";
                    params: [permissions: {
                        eth_accounts: Record<string, any>;
                    }];
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_getPermissions";
                    params?: undefined;
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_addEthereumChain";
                    params: [chain: import("viem/dist/types/types/eip1193").Chain];
                }): Promise<null>;
                (args: {
                    method: "wallet_switchEthereumChain";
                    params: [chain: {
                        chainId: string;
                    }];
                }): Promise<null>;
                (args: {
                    method: "wallet_watchAsset";
                    params: import("viem/dist/types/types/eip1193").WatchAssetParams;
                }): Promise<boolean>;
            };
            type: "block";
        }>;
        createContractEventFilter: <TAbi extends import("abitype").Abi | readonly unknown[], TEventName extends string | undefined, TArgs extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined>(args: import("viem").CreateContractEventFilterParameters<TAbi, TEventName, TArgs>) => Promise<import("viem").CreateContractEventFilterReturnType<TAbi, TEventName, TArgs>>;
        createEventFilter: <TAbiEvent extends import("abitype").AbiEvent | undefined, TAbi_1 extends import("abitype").Abi | readonly unknown[], TEventName_1 extends string | undefined, TArgs_1 extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi_1, TEventName_1> | undefined>(args?: import("viem").CreateEventFilterParameters<TAbiEvent, TAbi_1, TEventName_1, TArgs_1> | undefined) => Promise<import("viem/dist/types/types/filter").Filter<"event", TAbi_1, TEventName_1, TArgs_1> extends infer T ? { [K in keyof T]: import("viem/dist/types/types/filter").Filter<"event", TAbi_1, TEventName_1, TArgs_1>[K]; } : never>;
        createPendingTransactionFilter: () => Promise<{
            id: `0x${string}`;
            request: {
                (args: {
                    method: "web3_clientVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "web3_sha3";
                    params: [data: `0x${string}`];
                }): Promise<string>;
                (args: {
                    method: "net_listening";
                    params?: undefined;
                }): Promise<boolean>;
                (args: {
                    method: "net_peerCount";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "net_version";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_blockNumber";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_call";
                    params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_coinbase";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_estimateGas";
                    params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_feeHistory";
                    params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
                }): Promise<import("viem").RpcFeeHistory>;
                (args: {
                    method: "eth_gasPrice";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBalance";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockByHash";
                    params: [hash: `0x${string}`, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockTransactionCountByHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockTransactionCountByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getCode";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getFilterChanges";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
                (args: {
                    method: "eth_getFilterLogs";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getLogs";
                    params: [parameters: {
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    } & ({
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        blockHash?: undefined;
                    } | {
                        fromBlock?: undefined;
                        toBlock?: undefined;
                        blockHash?: `0x${string}` | undefined;
                    })];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getStorageAt";
                    params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByHash";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionCount";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionReceipt";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransactionReceipt | null>;
                (args: {
                    method: "eth_getUncleByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleCountByBlockHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getUncleCountByBlockNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newBlockFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newFilter";
                    params: [filter: {
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    }];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newPendingTransactionFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_protocolVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "eth_sendRawTransaction";
                    params: [signedTransaction: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_uninstallFilter";
                    params: [filterId: `0x${string}`];
                }): Promise<boolean>;
            } & {
                (args: {
                    method: "eth_sendTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_sign";
                    params: [address: `0x${string}`, data: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTypedData_v4";
                    params: [address: `0x${string}`, message: string];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_syncing";
                    params?: undefined;
                }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
                (args: {
                    method: "personal_sign";
                    params: [data: `0x${string}`, address: `0x${string}`];
                }): Promise<`0x${string}`>;
            } & {
                (args: {
                    method: "eth_accounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_requestAccounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "wallet_requestPermissions";
                    params: [permissions: {
                        eth_accounts: Record<string, any>;
                    }];
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_getPermissions";
                    params?: undefined;
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_addEthereumChain";
                    params: [chain: import("viem/dist/types/types/eip1193").Chain];
                }): Promise<null>;
                (args: {
                    method: "wallet_switchEthereumChain";
                    params: [chain: {
                        chainId: string;
                    }];
                }): Promise<null>;
                (args: {
                    method: "wallet_watchAsset";
                    params: import("viem/dist/types/types/eip1193").WatchAssetParams;
                }): Promise<boolean>;
            };
            type: "transaction";
        }>;
        estimateContractGas: <TChain extends import("viem").Chain<import("viem/dist/types/types/formatter").Formatters> | undefined, TAbi_2 extends import("abitype").Abi | readonly unknown[], TFunctionName extends string>(args: import("viem/dist/types/actions/public/estimateContractGas").EstimateContractGasParameters<TAbi_2, TFunctionName, TChain>) => Promise<bigint>;
        estimateGas: (args: import("viem").EstimateGasParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }, undefined>) => Promise<bigint>;
        getBalance: (args: import("viem").GetBalanceParameters) => Promise<bigint>;
        getBlock: (args?: import("viem").GetBlockParameters | undefined) => Promise<import("viem").Block<bigint, import("viem").Transaction<bigint, number>>>;
        getBlockNumber: (args?: import("viem").GetBlockNumberParameters | undefined) => Promise<bigint>;
        getBlockTransactionCount: (args?: import("viem").GetBlockTransactionCountParameters | undefined) => Promise<number>;
        getBytecode: (args: import("viem").GetBytecodeParameters) => Promise<import("viem").GetBytecodeReturnType>;
        getChainId: () => Promise<number>;
        getEnsAddress: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<import("viem").GetEnsAddressReturnType>;
        getEnsAvatar: (args: {
            name: string;
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            universalResolverAddress?: `0x${string}` | undefined;
            gatewayUrls?: import("viem").AssetGatewayUrls | undefined;
        }) => Promise<import("viem/dist/types/actions/ens/getEnsAvatar").GetEnsAvatarReturnType>;
        getEnsName: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            address: `0x${string}`;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<import("viem").GetEnsNameReturnType>;
        getEnsResolver: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<`0x${string}`>;
        getEnsText: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            key: string;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<import("viem/dist/types/actions/ens/getEnsText").GetEnsTextReturnType>;
        getFeeHistory: (args: import("viem").GetFeeHistoryParameters) => Promise<import("viem").GetFeeHistoryReturnType>;
        getFilterChanges: <TFilterType extends import("viem/dist/types/types/filter").FilterType, TAbi_3 extends import("abitype").Abi | readonly unknown[], TEventName_2 extends string | undefined>(args: import("viem").GetFilterChangesParameters<TFilterType, TAbi_3, TEventName_2>) => Promise<import("viem").GetFilterChangesReturnType<TFilterType, TAbi_3, TEventName_2, TAbi_3 extends import("abitype").Abi ? TEventName_2 extends string ? Extract<Extract<TAbi_3[number], {
            type: "event";
        }>, {
            name: TEventName_2;
        }> : undefined : undefined>>;
        getFilterLogs: <TAbi_4 extends import("abitype").Abi | readonly unknown[], TEventName_3 extends string | undefined>(args: import("viem").GetFilterLogsParameters<TAbi_4, TEventName_3>) => Promise<import("viem").GetFilterLogsReturnType<TAbi_4, TEventName_3, TAbi_4 extends import("abitype").Abi ? TEventName_3 extends string ? Extract<Extract<TAbi_4[number], {
            type: "event";
        }>, {
            name: TEventName_3;
        }> : undefined : undefined>>;
        getGasPrice: () => Promise<bigint>;
        getLogs: <TAbiEvent_1 extends import("abitype").AbiEvent | undefined>(args?: import("viem").GetLogsParameters<TAbiEvent_1, import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent_1>> | undefined) => Promise<import("viem").GetLogsReturnType<TAbiEvent_1, import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent_1>>>;
        getStorageAt: (args: import("viem").GetStorageAtParameters) => Promise<import("viem").GetStorageAtReturnType>;
        getTransaction: (args: import("viem").GetTransactionParameters) => Promise<import("viem").Transaction<bigint, number>>;
        getTransactionConfirmations: (args: import("viem").GetTransactionConfirmationsParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => Promise<bigint>;
        getTransactionCount: (args: import("viem").GetTransactionCountParameters) => Promise<number>;
        getTransactionReceipt: (args: import("viem").GetTransactionReceiptParameters) => Promise<import("viem").TransactionReceipt<bigint, number, "success" | "reverted", import("viem").TransactionType>>;
        multicall: <TContracts extends import("viem").ContractFunctionConfig<import("abitype").Abi, string, import("abitype").AbiStateMutability>[], TAllowFailure extends boolean = true>(args: import("viem").MulticallParameters<TContracts, TAllowFailure>) => Promise<TContracts extends [] ? [] : TContracts extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : TContracts extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_2 ? T_2 extends [...Tail] ? T_2 extends [] ? [] : T_2 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_2 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_4 ? T_4 extends [...Tail] ? T_4 extends [] ? [] : T_4 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_4 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_5 ? T_5 extends [...Tail] ? T_5 extends [] ? [] : T_5 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_5 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_6 ? T_6 extends [...Tail] ? T_6 extends [] ? [] : T_6 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_6 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_7 ? T_7 extends [...Tail] ? T_7 extends [] ? [] : T_7 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_7 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_8 ? T_8 extends [...Tail] ? T_8 extends [] ? [] : T_8 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_8 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_9 ? T_9 extends [...Tail] ? T_9 extends [] ? [] : T_9 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_9 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_10 ? T_10 extends [...Tail] ? T_10 extends [] ? [] : T_10 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_10 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_11 ? T_11 extends [...Tail] ? T_11 extends [] ? [] : T_11 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_11 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_12 ? T_12 extends [...Tail] ? T_12 extends [] ? [] : T_12 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_12 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? any : T_12 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_11 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_10 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_9 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_8 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_7 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_6 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_5 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_4 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_2 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : TContracts extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[]>;
        readContract: <TAbi_6 extends import("abitype").Abi | readonly unknown[], TFunctionName_2 extends string>(args: import("viem").ReadContractParameters<TAbi_6, TFunctionName_2>) => Promise<import("viem").ContractFunctionResult<TAbi_6, TFunctionName_2, TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>>;
        simulateContract: <TAbi_7 extends import("abitype").Abi | readonly unknown[] = import("abitype").Abi, TFunctionName_3 extends string = any, TChainOverride extends import("viem").Chain<import("viem/dist/types/types/formatter").Formatters> | undefined = undefined>(args: import("viem").SimulateContractParameters<TAbi_7, TFunctionName_3, {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }, TChainOverride>) => Promise<import("viem").SimulateContractReturnType<TAbi_7, TFunctionName_3, {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }, TChainOverride>>;
        verifyMessage: (args: import("viem/dist/types/actions/public/verifyMessage").VerifyMessageParameters) => Promise<boolean>;
        verifyTypedData: (args: import("viem/dist/types/actions/public/verifyTypedData").VerifyTypedDataParameters<{
            [x: string]: readonly import("abitype").TypedDataParameter[];
            [x: `string[${string}]`]: undefined;
            [x: `function[${string}]`]: undefined;
            [x: `address[${string}]`]: undefined;
            [x: `uint256[${string}]`]: undefined;
            [x: `bool[${string}]`]: undefined;
            [x: `uint8[${string}]`]: undefined;
            [x: `bytes[${string}]`]: undefined;
            [x: `bytes18[${string}]`]: undefined;
            [x: `bytes1[${string}]`]: undefined;
            [x: `bytes2[${string}]`]: undefined;
            [x: `bytes3[${string}]`]: undefined;
            [x: `bytes14[${string}]`]: undefined;
            [x: `bytes4[${string}]`]: undefined;
            [x: `bytes5[${string}]`]: undefined;
            [x: `bytes6[${string}]`]: undefined;
            [x: `bytes7[${string}]`]: undefined;
            [x: `bytes8[${string}]`]: undefined;
            [x: `bytes9[${string}]`]: undefined;
            [x: `bytes10[${string}]`]: undefined;
            [x: `bytes11[${string}]`]: undefined;
            [x: `bytes12[${string}]`]: undefined;
            [x: `bytes13[${string}]`]: undefined;
            [x: `bytes15[${string}]`]: undefined;
            [x: `bytes16[${string}]`]: undefined;
            [x: `bytes17[${string}]`]: undefined;
            [x: `bytes19[${string}]`]: undefined;
            [x: `bytes20[${string}]`]: undefined;
            [x: `bytes21[${string}]`]: undefined;
            [x: `bytes22[${string}]`]: undefined;
            [x: `bytes23[${string}]`]: undefined;
            [x: `bytes24[${string}]`]: undefined;
            [x: `bytes25[${string}]`]: undefined;
            [x: `bytes26[${string}]`]: undefined;
            [x: `bytes27[${string}]`]: undefined;
            [x: `bytes28[${string}]`]: undefined;
            [x: `bytes29[${string}]`]: undefined;
            [x: `bytes30[${string}]`]: undefined;
            [x: `bytes31[${string}]`]: undefined;
            [x: `bytes32[${string}]`]: undefined;
            [x: `int[${string}]`]: undefined;
            [x: `int56[${string}]`]: undefined;
            [x: `int8[${string}]`]: undefined;
            [x: `int16[${string}]`]: undefined;
            [x: `int24[${string}]`]: undefined;
            [x: `int32[${string}]`]: undefined;
            [x: `int40[${string}]`]: undefined;
            [x: `int48[${string}]`]: undefined;
            [x: `int64[${string}]`]: undefined;
            [x: `int72[${string}]`]: undefined;
            [x: `int80[${string}]`]: undefined;
            [x: `int88[${string}]`]: undefined;
            [x: `int96[${string}]`]: undefined;
            [x: `int104[${string}]`]: undefined;
            [x: `int112[${string}]`]: undefined;
            [x: `int120[${string}]`]: undefined;
            [x: `int128[${string}]`]: undefined;
            [x: `int136[${string}]`]: undefined;
            [x: `int144[${string}]`]: undefined;
            [x: `int152[${string}]`]: undefined;
            [x: `int160[${string}]`]: undefined;
            [x: `int168[${string}]`]: undefined;
            [x: `int176[${string}]`]: undefined;
            [x: `int184[${string}]`]: undefined;
            [x: `int192[${string}]`]: undefined;
            [x: `int200[${string}]`]: undefined;
            [x: `int208[${string}]`]: undefined;
            [x: `int216[${string}]`]: undefined;
            [x: `int224[${string}]`]: undefined;
            [x: `int232[${string}]`]: undefined;
            [x: `int240[${string}]`]: undefined;
            [x: `int248[${string}]`]: undefined;
            [x: `int256[${string}]`]: undefined;
            [x: `uint[${string}]`]: undefined;
            [x: `uint56[${string}]`]: undefined;
            [x: `uint16[${string}]`]: undefined;
            [x: `uint24[${string}]`]: undefined;
            [x: `uint32[${string}]`]: undefined;
            [x: `uint40[${string}]`]: undefined;
            [x: `uint48[${string}]`]: undefined;
            [x: `uint64[${string}]`]: undefined;
            [x: `uint72[${string}]`]: undefined;
            [x: `uint80[${string}]`]: undefined;
            [x: `uint88[${string}]`]: undefined;
            [x: `uint96[${string}]`]: undefined;
            [x: `uint104[${string}]`]: undefined;
            [x: `uint112[${string}]`]: undefined;
            [x: `uint120[${string}]`]: undefined;
            [x: `uint128[${string}]`]: undefined;
            [x: `uint136[${string}]`]: undefined;
            [x: `uint144[${string}]`]: undefined;
            [x: `uint152[${string}]`]: undefined;
            [x: `uint160[${string}]`]: undefined;
            [x: `uint168[${string}]`]: undefined;
            [x: `uint176[${string}]`]: undefined;
            [x: `uint184[${string}]`]: undefined;
            [x: `uint192[${string}]`]: undefined;
            [x: `uint200[${string}]`]: undefined;
            [x: `uint208[${string}]`]: undefined;
            [x: `uint216[${string}]`]: undefined;
            [x: `uint224[${string}]`]: undefined;
            [x: `uint232[${string}]`]: undefined;
            [x: `uint240[${string}]`]: undefined;
            [x: `uint248[${string}]`]: undefined;
            string?: undefined;
            address?: undefined;
            uint256?: undefined;
            bool?: undefined;
            uint8?: undefined;
            bytes?: undefined;
            bytes18?: undefined;
            bytes1?: undefined;
            bytes2?: undefined;
            bytes3?: undefined;
            bytes14?: undefined;
            bytes4?: undefined;
            bytes5?: undefined;
            bytes6?: undefined;
            bytes7?: undefined;
            bytes8?: undefined;
            bytes9?: undefined;
            bytes10?: undefined;
            bytes11?: undefined;
            bytes12?: undefined;
            bytes13?: undefined;
            bytes15?: undefined;
            bytes16?: undefined;
            bytes17?: undefined;
            bytes19?: undefined;
            bytes20?: undefined;
            bytes21?: undefined;
            bytes22?: undefined;
            bytes23?: undefined;
            bytes24?: undefined;
            bytes25?: undefined;
            bytes26?: undefined;
            bytes27?: undefined;
            bytes28?: undefined;
            bytes29?: undefined;
            bytes30?: undefined;
            bytes31?: undefined;
            bytes32?: undefined;
            int56?: undefined;
            int8?: undefined;
            int16?: undefined;
            int24?: undefined;
            int32?: undefined;
            int40?: undefined;
            int48?: undefined;
            int64?: undefined;
            int72?: undefined;
            int80?: undefined;
            int88?: undefined;
            int96?: undefined;
            int104?: undefined;
            int112?: undefined;
            int120?: undefined;
            int128?: undefined;
            int136?: undefined;
            int144?: undefined;
            int152?: undefined;
            int160?: undefined;
            int168?: undefined;
            int176?: undefined;
            int184?: undefined;
            int192?: undefined;
            int200?: undefined;
            int208?: undefined;
            int216?: undefined;
            int224?: undefined;
            int232?: undefined;
            int240?: undefined;
            int248?: undefined;
            int256?: undefined;
            uint56?: undefined;
            uint16?: undefined;
            uint24?: undefined;
            uint32?: undefined;
            uint40?: undefined;
            uint48?: undefined;
            uint64?: undefined;
            uint72?: undefined;
            uint80?: undefined;
            uint88?: undefined;
            uint96?: undefined;
            uint104?: undefined;
            uint112?: undefined;
            uint120?: undefined;
            uint128?: undefined;
            uint136?: undefined;
            uint144?: undefined;
            uint152?: undefined;
            uint160?: undefined;
            uint168?: undefined;
            uint176?: undefined;
            uint184?: undefined;
            uint192?: undefined;
            uint200?: undefined;
            uint208?: undefined;
            uint216?: undefined;
            uint224?: undefined;
            uint232?: undefined;
            uint240?: undefined;
            uint248?: undefined;
        }, string>) => Promise<boolean>;
        uninstallFilter: (args: import("viem").UninstallFilterParameters) => Promise<boolean>;
        waitForTransactionReceipt: (args: import("viem").WaitForTransactionReceiptParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => Promise<import("viem").TransactionReceipt<bigint, number, "success" | "reverted", import("viem").TransactionType>>;
        watchBlockNumber: (args: import("viem").WatchBlockNumberParameters<import("viem").Transport<string, Record<string, any>, {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        } & {
            (args: {
                method: "eth_sendTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_sign";
                params: [address: `0x${string}`, data: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTypedData_v4";
                params: [address: `0x${string}`, message: string];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_syncing";
                params?: undefined;
            }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
            (args: {
                method: "personal_sign";
                params: [data: `0x${string}`, address: `0x${string}`];
            }): Promise<`0x${string}`>;
        } & {
            (args: {
                method: "eth_accounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_requestAccounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "wallet_requestPermissions";
                params: [permissions: {
                    eth_accounts: Record<string, any>;
                }];
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_getPermissions";
                params?: undefined;
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_addEthereumChain";
                params: [chain: import("viem/dist/types/types/eip1193").Chain];
            }): Promise<null>;
            (args: {
                method: "wallet_switchEthereumChain";
                params: [chain: {
                    chainId: string;
                }];
            }): Promise<null>;
            (args: {
                method: "wallet_watchAsset";
                params: import("viem/dist/types/types/eip1193").WatchAssetParams;
            }): Promise<boolean>;
        }>>) => import("viem").WatchBlockNumberReturnType;
        watchBlocks: (args: import("viem").WatchBlocksParameters<import("viem").HttpTransport, {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => import("viem").WatchBlocksReturnType;
        watchContractEvent: <TAbi_8 extends import("abitype").Abi | readonly unknown[], TEventName_4 extends string>(args: import("viem").WatchContractEventParameters<TAbi_8, TEventName_4>) => import("viem").WatchContractEventReturnType;
        watchEvent: <TAbiEvent_2 extends import("abitype").AbiEvent | undefined>(args: import("viem").WatchEventParameters<TAbiEvent_2, import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent_2>>) => import("viem").WatchEventReturnType;
        watchPendingTransactions: (args: import("viem").WatchPendingTransactionsParameters<import("viem").HttpTransport>) => import("viem").WatchPendingTransactionsReturnType;
    }, symbol?: string, name?: string): Promise<Token>;
    /**
     * Fetches information about a pair and constructs a pair from the given two tokens.
     * @param tokenA first token
     * @param tokenB second token
     * @param provider the provider to use to fetch the data
     */
    static fetchPairData(tokenA: Token, tokenB: Token, client?: {
        chain: {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        };
        key: string;
        name: string;
        pollingInterval: number;
        request: {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        };
        transport: import("viem").TransportConfig<"http", {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        } & {
            (args: {
                method: "eth_sendTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_sign";
                params: [address: `0x${string}`, data: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTypedData_v4";
                params: [address: `0x${string}`, message: string];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_syncing";
                params?: undefined;
            }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
            (args: {
                method: "personal_sign";
                params: [data: `0x${string}`, address: `0x${string}`];
            }): Promise<`0x${string}`>;
        } & {
            (args: {
                method: "eth_accounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_requestAccounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "wallet_requestPermissions";
                params: [permissions: {
                    eth_accounts: Record<string, any>;
                }];
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_getPermissions";
                params?: undefined;
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_addEthereumChain";
                params: [chain: import("viem/dist/types/types/eip1193").Chain];
            }): Promise<null>;
            (args: {
                method: "wallet_switchEthereumChain";
                params: [chain: {
                    chainId: string;
                }];
            }): Promise<null>;
            (args: {
                method: "wallet_watchAsset";
                params: import("viem/dist/types/types/eip1193").WatchAssetParams;
            }): Promise<boolean>;
        }> & {
            url?: string | undefined;
        };
        type: string;
        uid: string;
        batch?: {
            multicall?: boolean | import("viem/dist/types/clients/createPublicClient").MulticallBatchOptions | undefined;
        } | undefined;
        call: (parameters: import("viem").CallParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => Promise<import("viem").CallReturnType>;
        createBlockFilter: () => Promise<{
            id: `0x${string}`;
            request: {
                (args: {
                    method: "web3_clientVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "web3_sha3";
                    params: [data: `0x${string}`];
                }): Promise<string>;
                (args: {
                    method: "net_listening";
                    params?: undefined;
                }): Promise<boolean>;
                (args: {
                    method: "net_peerCount";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "net_version";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_blockNumber";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_call";
                    params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_coinbase";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_estimateGas";
                    params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_feeHistory";
                    params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
                }): Promise<import("viem").RpcFeeHistory>;
                (args: {
                    method: "eth_gasPrice";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBalance";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockByHash";
                    params: [hash: `0x${string}`, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockTransactionCountByHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockTransactionCountByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getCode";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getFilterChanges";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
                (args: {
                    method: "eth_getFilterLogs";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getLogs";
                    params: [parameters: {
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    } & ({
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        blockHash?: undefined;
                    } | {
                        fromBlock?: undefined;
                        toBlock?: undefined;
                        blockHash?: `0x${string}` | undefined;
                    })];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getStorageAt";
                    params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByHash";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionCount";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionReceipt";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransactionReceipt | null>;
                (args: {
                    method: "eth_getUncleByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleCountByBlockHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getUncleCountByBlockNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newBlockFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newFilter";
                    params: [filter: {
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    }];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newPendingTransactionFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_protocolVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "eth_sendRawTransaction";
                    params: [signedTransaction: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_uninstallFilter";
                    params: [filterId: `0x${string}`];
                }): Promise<boolean>;
            } & {
                (args: {
                    method: "eth_sendTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_sign";
                    params: [address: `0x${string}`, data: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTypedData_v4";
                    params: [address: `0x${string}`, message: string];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_syncing";
                    params?: undefined;
                }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
                (args: {
                    method: "personal_sign";
                    params: [data: `0x${string}`, address: `0x${string}`];
                }): Promise<`0x${string}`>;
            } & {
                (args: {
                    method: "eth_accounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_requestAccounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "wallet_requestPermissions";
                    params: [permissions: {
                        eth_accounts: Record<string, any>;
                    }];
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_getPermissions";
                    params?: undefined;
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_addEthereumChain";
                    params: [chain: import("viem/dist/types/types/eip1193").Chain];
                }): Promise<null>;
                (args: {
                    method: "wallet_switchEthereumChain";
                    params: [chain: {
                        chainId: string;
                    }];
                }): Promise<null>;
                (args: {
                    method: "wallet_watchAsset";
                    params: import("viem/dist/types/types/eip1193").WatchAssetParams;
                }): Promise<boolean>;
            };
            type: "block";
        }>;
        createContractEventFilter: <TAbi extends import("abitype").Abi | readonly unknown[], TEventName extends string | undefined, TArgs extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi, TEventName> | undefined>(args: import("viem").CreateContractEventFilterParameters<TAbi, TEventName, TArgs>) => Promise<import("viem").CreateContractEventFilterReturnType<TAbi, TEventName, TArgs>>;
        createEventFilter: <TAbiEvent extends import("abitype").AbiEvent | undefined, TAbi_1 extends import("abitype").Abi | readonly unknown[], TEventName_1 extends string | undefined, TArgs_1 extends import("viem/dist/types/types/contract").MaybeExtractEventArgsFromAbi<TAbi_1, TEventName_1> | undefined>(args?: import("viem").CreateEventFilterParameters<TAbiEvent, TAbi_1, TEventName_1, TArgs_1> | undefined) => Promise<import("viem/dist/types/types/filter").Filter<"event", TAbi_1, TEventName_1, TArgs_1> extends infer T ? { [K in keyof T]: import("viem/dist/types/types/filter").Filter<"event", TAbi_1, TEventName_1, TArgs_1>[K]; } : never>;
        createPendingTransactionFilter: () => Promise<{
            id: `0x${string}`;
            request: {
                (args: {
                    method: "web3_clientVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "web3_sha3";
                    params: [data: `0x${string}`];
                }): Promise<string>;
                (args: {
                    method: "net_listening";
                    params?: undefined;
                }): Promise<boolean>;
                (args: {
                    method: "net_peerCount";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "net_version";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_blockNumber";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_call";
                    params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_coinbase";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_estimateGas";
                    params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_feeHistory";
                    params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
                }): Promise<import("viem").RpcFeeHistory>;
                (args: {
                    method: "eth_gasPrice";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBalance";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockByHash";
                    params: [hash: `0x${string}`, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
                }): Promise<import("viem").RpcBlock | null>;
                (args: {
                    method: "eth_getBlockTransactionCountByHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getBlockTransactionCountByNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getCode";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getFilterChanges";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
                (args: {
                    method: "eth_getFilterLogs";
                    params: [filterId: `0x${string}`];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getLogs";
                    params: [parameters: {
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    } & ({
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        blockHash?: undefined;
                    } | {
                        fromBlock?: undefined;
                        toBlock?: undefined;
                        blockHash?: `0x${string}` | undefined;
                    })];
                }): Promise<import("viem").RpcLog[]>;
                (args: {
                    method: "eth_getStorageAt";
                    params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionByHash";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransaction | null>;
                (args: {
                    method: "eth_getTransactionCount";
                    params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getTransactionReceipt";
                    params: [hash: `0x${string}`];
                }): Promise<import("viem").RpcTransactionReceipt | null>;
                (args: {
                    method: "eth_getUncleByBlockHashAndIndex";
                    params: [hash: `0x${string}`, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleByBlockNumberAndIndex";
                    params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
                }): Promise<import("viem").RpcUncle | null>;
                (args: {
                    method: "eth_getUncleCountByBlockHash";
                    params: [hash: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_getUncleCountByBlockNumber";
                    params: [block: `0x${string}` | import("viem").BlockTag];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newBlockFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newFilter";
                    params: [filter: {
                        fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                        address?: `0x${string}` | `0x${string}`[] | undefined;
                        topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                    }];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_newPendingTransactionFilter";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_protocolVersion";
                    params?: undefined;
                }): Promise<string>;
                (args: {
                    method: "eth_sendRawTransaction";
                    params: [signedTransaction: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_uninstallFilter";
                    params: [filterId: `0x${string}`];
                }): Promise<boolean>;
            } & {
                (args: {
                    method: "eth_sendTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_sign";
                    params: [address: `0x${string}`, data: `0x${string}`];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTransaction";
                    params: [request: import("viem").RpcTransactionRequest];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_signTypedData_v4";
                    params: [address: `0x${string}`, message: string];
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_syncing";
                    params?: undefined;
                }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
                (args: {
                    method: "personal_sign";
                    params: [data: `0x${string}`, address: `0x${string}`];
                }): Promise<`0x${string}`>;
            } & {
                (args: {
                    method: "eth_accounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "eth_chainId";
                    params?: undefined;
                }): Promise<`0x${string}`>;
                (args: {
                    method: "eth_requestAccounts";
                    params?: undefined;
                }): Promise<`0x${string}`[]>;
                (args: {
                    method: "wallet_requestPermissions";
                    params: [permissions: {
                        eth_accounts: Record<string, any>;
                    }];
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_getPermissions";
                    params?: undefined;
                }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
                (args: {
                    method: "wallet_addEthereumChain";
                    params: [chain: import("viem/dist/types/types/eip1193").Chain];
                }): Promise<null>;
                (args: {
                    method: "wallet_switchEthereumChain";
                    params: [chain: {
                        chainId: string;
                    }];
                }): Promise<null>;
                (args: {
                    method: "wallet_watchAsset";
                    params: import("viem/dist/types/types/eip1193").WatchAssetParams;
                }): Promise<boolean>;
            };
            type: "transaction";
        }>;
        estimateContractGas: <TChain extends import("viem").Chain<import("viem/dist/types/types/formatter").Formatters> | undefined, TAbi_2 extends import("abitype").Abi | readonly unknown[], TFunctionName extends string>(args: import("viem/dist/types/actions/public/estimateContractGas").EstimateContractGasParameters<TAbi_2, TFunctionName, TChain>) => Promise<bigint>;
        estimateGas: (args: import("viem").EstimateGasParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }, undefined>) => Promise<bigint>;
        getBalance: (args: import("viem").GetBalanceParameters) => Promise<bigint>;
        getBlock: (args?: import("viem").GetBlockParameters | undefined) => Promise<import("viem").Block<bigint, import("viem").Transaction<bigint, number>>>;
        getBlockNumber: (args?: import("viem").GetBlockNumberParameters | undefined) => Promise<bigint>;
        getBlockTransactionCount: (args?: import("viem").GetBlockTransactionCountParameters | undefined) => Promise<number>;
        getBytecode: (args: import("viem").GetBytecodeParameters) => Promise<import("viem").GetBytecodeReturnType>;
        getChainId: () => Promise<number>;
        getEnsAddress: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<import("viem").GetEnsAddressReturnType>;
        getEnsAvatar: (args: {
            name: string;
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            universalResolverAddress?: `0x${string}` | undefined;
            gatewayUrls?: import("viem").AssetGatewayUrls | undefined;
        }) => Promise<import("viem/dist/types/actions/ens/getEnsAvatar").GetEnsAvatarReturnType>;
        getEnsName: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            address: `0x${string}`;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<import("viem").GetEnsNameReturnType>;
        getEnsResolver: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<`0x${string}`>;
        getEnsText: (args: {
            blockNumber?: bigint | undefined;
            blockTag?: import("viem").BlockTag | undefined;
            name: string;
            key: string;
            universalResolverAddress?: `0x${string}` | undefined;
        }) => Promise<import("viem/dist/types/actions/ens/getEnsText").GetEnsTextReturnType>;
        getFeeHistory: (args: import("viem").GetFeeHistoryParameters) => Promise<import("viem").GetFeeHistoryReturnType>;
        getFilterChanges: <TFilterType extends import("viem/dist/types/types/filter").FilterType, TAbi_3 extends import("abitype").Abi | readonly unknown[], TEventName_2 extends string | undefined>(args: import("viem").GetFilterChangesParameters<TFilterType, TAbi_3, TEventName_2>) => Promise<import("viem").GetFilterChangesReturnType<TFilterType, TAbi_3, TEventName_2, TAbi_3 extends import("abitype").Abi ? TEventName_2 extends string ? Extract<Extract<TAbi_3[number], {
            type: "event";
        }>, {
            name: TEventName_2;
        }> : undefined : undefined>>;
        getFilterLogs: <TAbi_4 extends import("abitype").Abi | readonly unknown[], TEventName_3 extends string | undefined>(args: import("viem").GetFilterLogsParameters<TAbi_4, TEventName_3>) => Promise<import("viem").GetFilterLogsReturnType<TAbi_4, TEventName_3, TAbi_4 extends import("abitype").Abi ? TEventName_3 extends string ? Extract<Extract<TAbi_4[number], {
            type: "event";
        }>, {
            name: TEventName_3;
        }> : undefined : undefined>>;
        getGasPrice: () => Promise<bigint>;
        getLogs: <TAbiEvent_1 extends import("abitype").AbiEvent | undefined>(args?: import("viem").GetLogsParameters<TAbiEvent_1, import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent_1>> | undefined) => Promise<import("viem").GetLogsReturnType<TAbiEvent_1, import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent_1>>>;
        getStorageAt: (args: import("viem").GetStorageAtParameters) => Promise<import("viem").GetStorageAtReturnType>;
        getTransaction: (args: import("viem").GetTransactionParameters) => Promise<import("viem").Transaction<bigint, number>>;
        getTransactionConfirmations: (args: import("viem").GetTransactionConfirmationsParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => Promise<bigint>;
        getTransactionCount: (args: import("viem").GetTransactionCountParameters) => Promise<number>;
        getTransactionReceipt: (args: import("viem").GetTransactionReceiptParameters) => Promise<import("viem").TransactionReceipt<bigint, number, "success" | "reverted", import("viem").TransactionType>>;
        multicall: <TContracts extends import("viem").ContractFunctionConfig<import("abitype").Abi, string, import("abitype").AbiStateMutability>[], TAllowFailure extends boolean = true>(args: import("viem").MulticallParameters<TContracts, TAllowFailure>) => Promise<TContracts extends [] ? [] : TContracts extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : TContracts extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_2 ? T_2 extends [...Tail] ? T_2 extends [] ? [] : T_2 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_2 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_4 ? T_4 extends [...Tail] ? T_4 extends [] ? [] : T_4 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_4 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_5 ? T_5 extends [...Tail] ? T_5 extends [] ? [] : T_5 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_5 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_6 ? T_6 extends [...Tail] ? T_6 extends [] ? [] : T_6 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_6 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_7 ? T_7 extends [...Tail] ? T_7 extends [] ? [] : T_7 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_7 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_8 ? T_8 extends [...Tail] ? T_8 extends [] ? [] : T_8 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_8 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_9 ? T_9 extends [...Tail] ? T_9 extends [] ? [] : T_9 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_9 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_10 ? T_10 extends [...Tail] ? T_10 extends [] ? [] : T_10 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_10 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_11 ? T_11 extends [...Tail] ? T_11 extends [] ? [] : T_11 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_11 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? [...Tail] extends infer T_12 ? T_12 extends [...Tail] ? T_12 extends [] ? [] : T_12 extends [infer Head extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>] ? [import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head_1["abi"], Head_1["functionName"], Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head_1["abi"] extends infer T_3 ? T_3 extends Head_1["abi"] ? T_3 extends import("abitype").Abi ? Extract<Extract<T_3[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head_1["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>, import("viem").MulticallResult<import("viem").ContractFunctionResult<Head["abi"], Head["functionName"], Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never, import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(Head["abi"] extends infer T_1 ? T_1 extends Head["abi"] ? T_1 extends import("abitype").Abi ? Extract<Extract<T_1[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: Head["functionName"];
        }> : import("abitype").AbiFunction : never : never)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>] : T_12 extends [infer Head_1 extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>, ...infer Tail extends import("viem/dist/types/types/multicall").Contract<import("abitype").Abi | readonly unknown[], string>[]] ? any : T_12 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_11 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_10 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_9 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_8 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_7 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_6 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_5 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_4 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : T_2 extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[] : never : never : TContracts extends import("viem").ContractFunctionConfig<infer TAbi_5 extends import("abitype").Abi | readonly unknown[], infer TFunctionName_1 extends string, import("abitype").AbiStateMutability>[] ? import("viem").MulticallResult<import("viem").ContractFunctionResult<TAbi_5, TFunctionName_1, TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_5 extends import("abitype").Abi ? Extract<Extract<TAbi_5[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_1;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>, TAllowFailure>[] : import("viem").MulticallResult<unknown, TAllowFailure>[]>;
        readContract: <TAbi_6 extends import("abitype").Abi | readonly unknown[], TFunctionName_2 extends string>(args: import("viem").ReadContractParameters<TAbi_6, TFunctionName_2>) => Promise<import("viem").ContractFunctionResult<TAbi_6, TFunctionName_2, TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction, import("abitype").AbiParametersToPrimitiveTypes<(TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>, ([import("abitype").AbiParametersToPrimitiveTypes<(TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind>] extends [never] ? true : false) | (readonly unknown[] extends import("abitype").AbiParametersToPrimitiveTypes<(TAbi_6 extends import("abitype").Abi ? Extract<Extract<TAbi_6[number], {
            type: "function";
            stateMutability: import("abitype").AbiStateMutability;
        }>, {
            name: TFunctionName_2;
        }> : import("abitype").AbiFunction)["outputs"], import("abitype").AbiParameterKind> ? true : false)>>;
        simulateContract: <TAbi_7 extends import("abitype").Abi | readonly unknown[] = import("abitype").Abi, TFunctionName_3 extends string = any, TChainOverride extends import("viem").Chain<import("viem/dist/types/types/formatter").Formatters> | undefined = undefined>(args: import("viem").SimulateContractParameters<TAbi_7, TFunctionName_3, {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }, TChainOverride>) => Promise<import("viem").SimulateContractReturnType<TAbi_7, TFunctionName_3, {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }, TChainOverride>>;
        verifyMessage: (args: import("viem/dist/types/actions/public/verifyMessage").VerifyMessageParameters) => Promise<boolean>;
        verifyTypedData: (args: import("viem/dist/types/actions/public/verifyTypedData").VerifyTypedDataParameters<{
            [x: string]: readonly import("abitype").TypedDataParameter[];
            [x: `string[${string}]`]: undefined;
            [x: `function[${string}]`]: undefined;
            [x: `address[${string}]`]: undefined;
            [x: `uint256[${string}]`]: undefined;
            [x: `bool[${string}]`]: undefined;
            [x: `uint8[${string}]`]: undefined;
            [x: `bytes[${string}]`]: undefined;
            [x: `bytes18[${string}]`]: undefined;
            [x: `bytes1[${string}]`]: undefined;
            [x: `bytes2[${string}]`]: undefined;
            [x: `bytes3[${string}]`]: undefined;
            [x: `bytes14[${string}]`]: undefined;
            [x: `bytes4[${string}]`]: undefined;
            [x: `bytes5[${string}]`]: undefined;
            [x: `bytes6[${string}]`]: undefined;
            [x: `bytes7[${string}]`]: undefined;
            [x: `bytes8[${string}]`]: undefined;
            [x: `bytes9[${string}]`]: undefined;
            [x: `bytes10[${string}]`]: undefined;
            [x: `bytes11[${string}]`]: undefined;
            [x: `bytes12[${string}]`]: undefined;
            [x: `bytes13[${string}]`]: undefined;
            [x: `bytes15[${string}]`]: undefined;
            [x: `bytes16[${string}]`]: undefined;
            [x: `bytes17[${string}]`]: undefined;
            [x: `bytes19[${string}]`]: undefined;
            [x: `bytes20[${string}]`]: undefined;
            [x: `bytes21[${string}]`]: undefined;
            [x: `bytes22[${string}]`]: undefined;
            [x: `bytes23[${string}]`]: undefined;
            [x: `bytes24[${string}]`]: undefined;
            [x: `bytes25[${string}]`]: undefined;
            [x: `bytes26[${string}]`]: undefined;
            [x: `bytes27[${string}]`]: undefined;
            [x: `bytes28[${string}]`]: undefined;
            [x: `bytes29[${string}]`]: undefined;
            [x: `bytes30[${string}]`]: undefined;
            [x: `bytes31[${string}]`]: undefined;
            [x: `bytes32[${string}]`]: undefined;
            [x: `int[${string}]`]: undefined;
            [x: `int56[${string}]`]: undefined;
            [x: `int8[${string}]`]: undefined;
            [x: `int16[${string}]`]: undefined;
            [x: `int24[${string}]`]: undefined;
            [x: `int32[${string}]`]: undefined;
            [x: `int40[${string}]`]: undefined;
            [x: `int48[${string}]`]: undefined;
            [x: `int64[${string}]`]: undefined;
            [x: `int72[${string}]`]: undefined;
            [x: `int80[${string}]`]: undefined;
            [x: `int88[${string}]`]: undefined;
            [x: `int96[${string}]`]: undefined;
            [x: `int104[${string}]`]: undefined;
            [x: `int112[${string}]`]: undefined;
            [x: `int120[${string}]`]: undefined;
            [x: `int128[${string}]`]: undefined;
            [x: `int136[${string}]`]: undefined;
            [x: `int144[${string}]`]: undefined;
            [x: `int152[${string}]`]: undefined;
            [x: `int160[${string}]`]: undefined;
            [x: `int168[${string}]`]: undefined;
            [x: `int176[${string}]`]: undefined;
            [x: `int184[${string}]`]: undefined;
            [x: `int192[${string}]`]: undefined;
            [x: `int200[${string}]`]: undefined;
            [x: `int208[${string}]`]: undefined;
            [x: `int216[${string}]`]: undefined;
            [x: `int224[${string}]`]: undefined;
            [x: `int232[${string}]`]: undefined;
            [x: `int240[${string}]`]: undefined;
            [x: `int248[${string}]`]: undefined;
            [x: `int256[${string}]`]: undefined;
            [x: `uint[${string}]`]: undefined;
            [x: `uint56[${string}]`]: undefined;
            [x: `uint16[${string}]`]: undefined;
            [x: `uint24[${string}]`]: undefined;
            [x: `uint32[${string}]`]: undefined;
            [x: `uint40[${string}]`]: undefined;
            [x: `uint48[${string}]`]: undefined;
            [x: `uint64[${string}]`]: undefined;
            [x: `uint72[${string}]`]: undefined;
            [x: `uint80[${string}]`]: undefined;
            [x: `uint88[${string}]`]: undefined;
            [x: `uint96[${string}]`]: undefined;
            [x: `uint104[${string}]`]: undefined;
            [x: `uint112[${string}]`]: undefined;
            [x: `uint120[${string}]`]: undefined;
            [x: `uint128[${string}]`]: undefined;
            [x: `uint136[${string}]`]: undefined;
            [x: `uint144[${string}]`]: undefined;
            [x: `uint152[${string}]`]: undefined;
            [x: `uint160[${string}]`]: undefined;
            [x: `uint168[${string}]`]: undefined;
            [x: `uint176[${string}]`]: undefined;
            [x: `uint184[${string}]`]: undefined;
            [x: `uint192[${string}]`]: undefined;
            [x: `uint200[${string}]`]: undefined;
            [x: `uint208[${string}]`]: undefined;
            [x: `uint216[${string}]`]: undefined;
            [x: `uint224[${string}]`]: undefined;
            [x: `uint232[${string}]`]: undefined;
            [x: `uint240[${string}]`]: undefined;
            [x: `uint248[${string}]`]: undefined;
            string?: undefined;
            address?: undefined;
            uint256?: undefined;
            bool?: undefined;
            uint8?: undefined;
            bytes?: undefined;
            bytes18?: undefined;
            bytes1?: undefined;
            bytes2?: undefined;
            bytes3?: undefined;
            bytes14?: undefined;
            bytes4?: undefined;
            bytes5?: undefined;
            bytes6?: undefined;
            bytes7?: undefined;
            bytes8?: undefined;
            bytes9?: undefined;
            bytes10?: undefined;
            bytes11?: undefined;
            bytes12?: undefined;
            bytes13?: undefined;
            bytes15?: undefined;
            bytes16?: undefined;
            bytes17?: undefined;
            bytes19?: undefined;
            bytes20?: undefined;
            bytes21?: undefined;
            bytes22?: undefined;
            bytes23?: undefined;
            bytes24?: undefined;
            bytes25?: undefined;
            bytes26?: undefined;
            bytes27?: undefined;
            bytes28?: undefined;
            bytes29?: undefined;
            bytes30?: undefined;
            bytes31?: undefined;
            bytes32?: undefined;
            int56?: undefined;
            int8?: undefined;
            int16?: undefined;
            int24?: undefined;
            int32?: undefined;
            int40?: undefined;
            int48?: undefined;
            int64?: undefined;
            int72?: undefined;
            int80?: undefined;
            int88?: undefined;
            int96?: undefined;
            int104?: undefined;
            int112?: undefined;
            int120?: undefined;
            int128?: undefined;
            int136?: undefined;
            int144?: undefined;
            int152?: undefined;
            int160?: undefined;
            int168?: undefined;
            int176?: undefined;
            int184?: undefined;
            int192?: undefined;
            int200?: undefined;
            int208?: undefined;
            int216?: undefined;
            int224?: undefined;
            int232?: undefined;
            int240?: undefined;
            int248?: undefined;
            int256?: undefined;
            uint56?: undefined;
            uint16?: undefined;
            uint24?: undefined;
            uint32?: undefined;
            uint40?: undefined;
            uint48?: undefined;
            uint64?: undefined;
            uint72?: undefined;
            uint80?: undefined;
            uint88?: undefined;
            uint96?: undefined;
            uint104?: undefined;
            uint112?: undefined;
            uint120?: undefined;
            uint128?: undefined;
            uint136?: undefined;
            uint144?: undefined;
            uint152?: undefined;
            uint160?: undefined;
            uint168?: undefined;
            uint176?: undefined;
            uint184?: undefined;
            uint192?: undefined;
            uint200?: undefined;
            uint208?: undefined;
            uint216?: undefined;
            uint224?: undefined;
            uint232?: undefined;
            uint240?: undefined;
            uint248?: undefined;
        }, string>) => Promise<boolean>;
        uninstallFilter: (args: import("viem").UninstallFilterParameters) => Promise<boolean>;
        waitForTransactionReceipt: (args: import("viem").WaitForTransactionReceiptParameters<{
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => Promise<import("viem").TransactionReceipt<bigint, number, "success" | "reverted", import("viem").TransactionType>>;
        watchBlockNumber: (args: import("viem").WatchBlockNumberParameters<import("viem").Transport<string, Record<string, any>, {
            (args: {
                method: "web3_clientVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "web3_sha3";
                params: [data: `0x${string}`];
            }): Promise<string>;
            (args: {
                method: "net_listening";
                params?: undefined;
            }): Promise<boolean>;
            (args: {
                method: "net_peerCount";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "net_version";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_blockNumber";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_call";
                params: [request: Partial<import("viem").RpcTransactionRequest>, block?: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_coinbase";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_estimateGas";
                params: [parameters: import("viem").RpcTransactionRequest, block?: `0x${string}` | import("viem").BlockTag | undefined];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_feeHistory";
                params: [blockCount: `0x${string}`, newestBlock: `0x${string}` | import("viem").BlockTag, rewardPercentiles: number[] | undefined];
            }): Promise<import("viem").RpcFeeHistory>;
            (args: {
                method: "eth_gasPrice";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBalance";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockByHash";
                params: [hash: `0x${string}`, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag, includeTransactionObjects: boolean];
            }): Promise<import("viem").RpcBlock | null>;
            (args: {
                method: "eth_getBlockTransactionCountByHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getBlockTransactionCountByNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getCode";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getFilterChanges";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[] | `0x${string}`[]>;
            (args: {
                method: "eth_getFilterLogs";
                params: [filterId: `0x${string}`];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getLogs";
                params: [parameters: {
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                } & ({
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    blockHash?: undefined;
                } | {
                    fromBlock?: undefined;
                    toBlock?: undefined;
                    blockHash?: `0x${string}` | undefined;
                })];
            }): Promise<import("viem").RpcLog[]>;
            (args: {
                method: "eth_getStorageAt";
                params: [address: `0x${string}`, index: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionByHash";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransaction | null>;
            (args: {
                method: "eth_getTransactionCount";
                params: [address: `0x${string}`, block: `0x${string}` | import("viem").BlockTag | import("viem").RpcBlockIdentifier];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getTransactionReceipt";
                params: [hash: `0x${string}`];
            }): Promise<import("viem").RpcTransactionReceipt | null>;
            (args: {
                method: "eth_getUncleByBlockHashAndIndex";
                params: [hash: `0x${string}`, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleByBlockNumberAndIndex";
                params: [block: `0x${string}` | import("viem").BlockTag, index: `0x${string}`];
            }): Promise<import("viem").RpcUncle | null>;
            (args: {
                method: "eth_getUncleCountByBlockHash";
                params: [hash: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_getUncleCountByBlockNumber";
                params: [block: `0x${string}` | import("viem").BlockTag];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newBlockFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newFilter";
                params: [filter: {
                    fromBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    toBlock?: `0x${string}` | import("viem").BlockTag | undefined;
                    address?: `0x${string}` | `0x${string}`[] | undefined;
                    topics?: import("viem/dist/types/types/misc").LogTopic[] | undefined;
                }];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_newPendingTransactionFilter";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_protocolVersion";
                params?: undefined;
            }): Promise<string>;
            (args: {
                method: "eth_sendRawTransaction";
                params: [signedTransaction: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_uninstallFilter";
                params: [filterId: `0x${string}`];
            }): Promise<boolean>;
        } & {
            (args: {
                method: "eth_sendTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_sign";
                params: [address: `0x${string}`, data: `0x${string}`];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTransaction";
                params: [request: import("viem").RpcTransactionRequest];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_signTypedData_v4";
                params: [address: `0x${string}`, message: string];
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_syncing";
                params?: undefined;
            }): Promise<false | import("viem/dist/types/types/eip1193").NetworkSync>;
            (args: {
                method: "personal_sign";
                params: [data: `0x${string}`, address: `0x${string}`];
            }): Promise<`0x${string}`>;
        } & {
            (args: {
                method: "eth_accounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "eth_chainId";
                params?: undefined;
            }): Promise<`0x${string}`>;
            (args: {
                method: "eth_requestAccounts";
                params?: undefined;
            }): Promise<`0x${string}`[]>;
            (args: {
                method: "wallet_requestPermissions";
                params: [permissions: {
                    eth_accounts: Record<string, any>;
                }];
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_getPermissions";
                params?: undefined;
            }): Promise<import("viem/dist/types/types/eip1193").WalletPermission[]>;
            (args: {
                method: "wallet_addEthereumChain";
                params: [chain: import("viem/dist/types/types/eip1193").Chain];
            }): Promise<null>;
            (args: {
                method: "wallet_switchEthereumChain";
                params: [chain: {
                    chainId: string;
                }];
            }): Promise<null>;
            (args: {
                method: "wallet_watchAsset";
                params: import("viem/dist/types/types/eip1193").WatchAssetParams;
            }): Promise<boolean>;
        }>>) => import("viem").WatchBlockNumberReturnType;
        watchBlocks: (args: import("viem").WatchBlocksParameters<import("viem").HttpTransport, {
            readonly id: 42161;
            readonly name: "Arbitrum One";
            readonly network: "arbitrum";
            readonly nativeCurrency: {
                readonly name: "Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-mainnet.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-mainnet.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-mainnet.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-mainnet.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
                /**
                 * Fetches information about a pair and constructs a pair from the given two tokens.
                 * @param tokenA first token
                 * @param tokenB second token
                 * @param provider the provider to use to fetch the data
                 */
                readonly public: {
                    readonly http: readonly ["https://arb1.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://arbiscan.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7654707;
                };
            };
        } | {
            readonly id: 421613;
            readonly name: "Arbitrum Goerli";
            readonly network: "arbitrum-goerli";
            readonly nativeCurrency: {
                readonly name: "Arbitrum Goerli Ether";
                readonly symbol: "ETH";
                readonly decimals: 18;
            };
            readonly rpcUrls: {
                readonly alchemy: {
                    readonly http: readonly ["https://arb-goerli.g.alchemy.com/v2"];
                    readonly webSocket: readonly ["wss://arb-goerli.g.alchemy.com/v2"];
                };
                readonly infura: {
                    readonly http: readonly ["https://arbitrum-goerli.infura.io/v3"];
                    readonly webSocket: readonly ["wss://arbitrum-goerli.infura.io/ws/v3"];
                };
                readonly default: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://goerli-rollup.arbitrum.io/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
                readonly default: {
                    readonly name: "Arbiscan";
                    readonly url: "https://goerli.arbiscan.io/";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 88114;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 43114;
            readonly name: "Avalanche";
            readonly network: "avalanche";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 11907934;
                };
            };
        } | {
            readonly id: 43113;
            readonly name: "Avalanche Fuji";
            readonly network: "avalanche-fuji";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "Avalanche Fuji";
                readonly symbol: "AVAX";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
                readonly public: {
                    readonly http: readonly ["https://api.avax-test.network/ext/bc/C/rpc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
                readonly default: {
                    readonly name: "SnowTrace";
                    readonly url: "https://testnet.snowtrace.io";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 7096959;
                };
            };
            readonly testnet: true;
        } | {
            readonly id: 56;
            readonly name: "BNB Smart Chain";
            readonly network: "bsc";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "BNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
                readonly public: {
                    readonly http: readonly ["https://rpc.ankr.com/bsc"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 15921452;
                };
            };
        } | {
            readonly id: 97;
            readonly name: "Binance Smart Chain Testnet";
            readonly network: "bsc-testnet";
            readonly nativeCurrency: {
                readonly decimals: 18;
                readonly name: "BNB";
                readonly symbol: "tBNB";
            };
            readonly rpcUrls: {
                readonly default: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
                readonly public: {
                    readonly http: readonly ["https://data-seed-prebsc-1-s1.binance.org:8545"];
                };
            };
            readonly blockExplorers: {
                readonly etherscan: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
                readonly default: {
                    readonly name: "BscScan";
                    readonly url: "https://testnet.bscscan.com";
                };
            };
            readonly contracts: {
                readonly multicall3: {
                    readonly address: "0xca11bde05977b3631167028862be2a173976ca11";
                    readonly blockCreated: 17422483;
                };
            };
            readonly testnet: true;
        }>) => import("viem").WatchBlocksReturnType;
        watchContractEvent: <TAbi_8 extends import("abitype").Abi | readonly unknown[], TEventName_4 extends string>(args: import("viem").WatchContractEventParameters<TAbi_8, TEventName_4>) => import("viem").WatchContractEventReturnType;
        watchEvent: <TAbiEvent_2 extends import("abitype").AbiEvent | undefined>(args: import("viem").WatchEventParameters<TAbiEvent_2, import("viem/dist/types/types/contract").MaybeAbiEventName<TAbiEvent_2>>) => import("viem").WatchEventReturnType;
        watchPendingTransactions: (args: import("viem").WatchPendingTransactionsParameters<import("viem").HttpTransport>) => import("viem").WatchPendingTransactionsReturnType;
    }): Promise<Pair>;
}
