{"version":3,"file":"Metadata.js","sources":["../../../src/metadata/Metadata.ts"],"sourcesContent":["import \"cross-fetch/polyfill\"\n\nimport { FailedPreconditionError, UnsupportedChainError } from \"../errors\"\nimport { MetadataUrlCoreByChainId, MetadataUrlPeripheryByChainId, isSupportedChainId } from \"../network\"\n\nimport { invariant } from \"../utils\"\n\nexport type Pool = {\n    address: string\n    baseAddress: string\n    baseSymbol: string\n    quoteAddress: string\n    quoteSymbol: string\n}\nexport type Pools = Pool[]\nexport type RawPools = Pool[]\n\nexport type Collateral = {\n    address: string\n    decimals: number\n    symbol: string\n    name: string\n    priceFeedAddress: string\n}\n\nexport interface ChainMetadata {\n    chainId: number\n    contracts: {\n        [PriceFeed: string]: {\n            address: string\n            createdBlockNumber: number\n            name: string\n        }\n    }\n    externalContracts: {\n        DefaultProxyAdmin: string\n        USDC: string\n        UniswapV3Factory: string\n    }\n    network: \"optimism\" | \"optimism-goerli\"\n    pools: Pool[]\n    collaterals: Collateral[]\n}\n\nexport type Contracts = ChainMetadata[\"contracts\"]\nexport type ExternalContracts = ChainMetadata[\"externalContracts\"]\nexport class Metadata {\n    readonly contracts: Contracts\n    readonly externalContracts: ExternalContracts\n    readonly pools: Pools\n    readonly rawPools: RawPools\n    readonly collaterals: Collateral[]\n    private constructor(\n        contracts: Contracts,\n        externalContracts: ExternalContracts,\n        pools: Pools,\n        collaterals: Collateral[],\n    ) {\n        this.contracts = contracts\n        this.externalContracts = externalContracts\n        this.rawPools = pools\n        this.pools = this._normalizePools(this.rawPools)\n        this.collaterals = collaterals\n    }\n\n    static async create(chainId: number) {\n        const { contracts, externalContracts, pools, collaterals } = await Metadata._fetch(chainId)\n        return new Metadata(contracts, externalContracts, pools, collaterals)\n    }\n\n    private static async _fetch(chainId: number): Promise<ChainMetadata> {\n        invariant(isSupportedChainId(chainId), () => new UnsupportedChainError())\n\n        const metadataUrlCore = MetadataUrlCoreByChainId[chainId]\n        invariant(\n            !!metadataUrlCore,\n            rawError =>\n                new FailedPreconditionError({\n                    functionName: \"_fetchMarketMetaData\",\n                    stateName: \"metadataUrl\",\n                    stateValue: metadataUrlCore,\n                    rawError,\n                }),\n        )\n\n        const metadataUrlPeriphery = MetadataUrlPeripheryByChainId[chainId]\n        invariant(\n            !!metadataUrlPeriphery,\n            rawError =>\n                new FailedPreconditionError({\n                    functionName: \"_fetchMarketMetaData\",\n                    stateName: \"metadataUrlPeriphery\",\n                    stateValue: metadataUrlPeriphery,\n                    rawError,\n                }),\n        )\n\n        const [metadataCore, metadataPeriphery] = await Promise.all([\n            fetch(metadataUrlCore)\n                .then(res => res.json())\n                .then(data => data as ChainMetadata),\n            fetch(metadataUrlPeriphery)\n                .then(res => res.json())\n                .then(data => data as ChainMetadata),\n        ])\n        return {\n            ...metadataCore,\n            contracts: {\n                ...metadataCore.contracts,\n                ...metadataPeriphery.contracts,\n            },\n        }\n    }\n\n    findCollateralByAddress(address: string) {\n        return this.collaterals.find(collateral => collateral.address === address)\n    }\n\n    /**\n     * 1. Make addresses lower case\n     * 2. Remove \"v\" from symbols (vETH -> ETH)\n     * @param rawPools raw pools from metadata\n     * @returns normalized pools\n     */\n    private _normalizePools(rawPools: RawPools) {\n        const regex = /^v(\\w+)/\n        return rawPools.map(pool => ({\n            ...pool,\n            address: pool.address.toLowerCase(),\n            baseAddress: pool.baseAddress.toLowerCase(),\n            quoteAddress: pool.quoteAddress.toLowerCase(),\n            baseSymbol: pool.baseSymbol.replace(regex, \"$1\"),\n            quoteSymbol: pool.quoteSymbol.replace(regex, \"$1\"),\n        }))\n    }\n}\n"],"names":["Metadata","constructor","contracts","externalContracts","pools","collaterals","this","rawPools","_normalizePools","static","chainId","_fetch","invariant","isSupportedChainId","UnsupportedChainError","metadataUrlCore","MetadataUrlCoreByChainId","rawError","FailedPreconditionError","functionName","stateName","stateValue","metadataUrlPeriphery","MetadataUrlPeripheryByChainId","metadataCore","metadataPeriphery","Promise","all","fetch","then","res","json","data","findCollateralByAddress","address","find","collateral","regex","map","pool","toLowerCase","baseAddress","quoteAddress","baseSymbol","replace","quoteSymbol"],"mappings":"qbA8CaA,EAMTC,YACIC,EACAC,EACAC,EACAC,GAEAC,KAAKJ,UAAYA,EACjBI,KAAKH,kBAAoBA,EACzBG,KAAKC,SAAWH,EAChBE,KAAKF,MAAQE,KAAKE,gBAAgBF,KAAKC,UACvCD,KAAKD,YAAcA,CACtB,CAEDI,oBAAoBC,GAChB,MAAMR,UAAEA,EAASC,kBAAEA,EAAiBC,MAAEA,EAAKC,YAAEA,SAAsBL,EAASW,OAAOD,GACnF,OAAO,IAAIV,EAASE,EAAWC,EAAmBC,EAAOC,EAC5D,CAEOI,oBAAoBC,GACxBE,EAASA,UAACC,EAAkBA,mBAACH,IAAU,IAAM,IAAII,EAAAA,wBAEjD,MAAMC,EAAkBC,2BAAyBN,GACjDE,EAAAA,YACMG,GACFE,GACI,IAAIC,EAAAA,wBAAwB,CACxBC,aAAc,uBACdC,UAAW,cACXC,WAAYN,EACZE,eAIZ,MAAMK,EAAuBC,gCAA8Bb,GAC3DE,EAAAA,YACMU,GACFL,GACI,IAAIC,EAAAA,wBAAwB,CACxBC,aAAc,uBACdC,UAAW,uBACXC,WAAYC,EACZL,eAIZ,MAAOO,EAAcC,SAA2BC,QAAQC,IAAI,CACxDC,MAAMb,GACDc,MAAKC,GAAOA,EAAIC,SAChBF,MAAKG,GAAQA,IAClBJ,MAAMN,GACDO,MAAKC,GAAOA,EAAIC,SAChBF,MAAKG,GAAQA,MAEtB,MAAO,IACAR,EACHtB,UAAW,IACJsB,EAAatB,aACbuB,EAAkBvB,WAGhC,CAED+B,wBAAwBC,GACpB,OAAO5B,KAAKD,YAAY8B,MAAKC,GAAcA,EAAWF,UAAYA,GACrE,CAQO1B,gBAAgBD,GACpB,MAAM8B,EAAQ,UACd,OAAO9B,EAAS+B,KAAIC,IAAS,IACtBA,EACHL,QAASK,EAAKL,QAAQM,cACtBC,YAAaF,EAAKE,YAAYD,cAC9BE,aAAcH,EAAKG,aAAaF,cAChCG,WAAYJ,EAAKI,WAAWC,QAAQP,EAAO,MAC3CQ,YAAaN,EAAKM,YAAYD,QAAQP,EAAO,SAEpD"}