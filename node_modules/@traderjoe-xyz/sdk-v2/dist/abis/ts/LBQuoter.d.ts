export declare const LBQuoterABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_routerV2";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_factoryV1";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_factoryV2";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "bp";
        readonly type: "uint256";
    }];
    readonly name: "BinHelper__BinStepOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "BinHelper__IdOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__AddressZero";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__IdenticalAddresses";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__InsufficientAmount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__InsufficientLiquidity";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBQuoter_InvalidLength";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "x";
        readonly type: "uint256";
    }, {
        readonly internalType: "int256";
        readonly name: "y";
        readonly type: "int256";
    }];
    readonly name: "Math128x128__PowerUnderflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "prod1";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "denominator";
        readonly type: "uint256";
    }];
    readonly name: "Math512Bits__MulDivOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "prod1";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "offset";
        readonly type: "uint256";
    }];
    readonly name: "Math512Bits__MulShiftOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offset";
        readonly type: "uint256";
    }];
    readonly name: "Math512Bits__OffsetOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "factoryV1";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "factoryV2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "_route";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }];
    readonly name: "findBestPathFromAmountIn";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address[]";
            readonly name: "route";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "pairs";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "binSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "virtualAmountsWithoutSlippage";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct LBQuoter.Quote";
        readonly name: "quote";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "_route";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountOut";
        readonly type: "uint256";
    }];
    readonly name: "findBestPathFromAmountOut";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address[]";
            readonly name: "route";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "pairs";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "binSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "amounts";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "virtualAmountsWithoutSlippage";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "fees";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct LBQuoter.Quote";
        readonly name: "quote";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "routerV2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];
