// package: cosmwasm.wasm.v1
// file: cosmwasm/wasm/v1/query.proto

import * as cosmwasm_wasm_v1_query_pb from "../../../cosmwasm/wasm/v1/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryContractInfo = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryContractInfoRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryContractInfoResponse;
};

type QueryContractHistory = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryContractHistoryRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryContractHistoryResponse;
};

type QueryContractsByCode = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryContractsByCodeRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryContractsByCodeResponse;
};

type QueryAllContractState = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryAllContractStateRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryAllContractStateResponse;
};

type QueryRawContractState = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryRawContractStateRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryRawContractStateResponse;
};

type QuerySmartContractState = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QuerySmartContractStateRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QuerySmartContractStateResponse;
};

type QueryCode = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryCodeRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryCodeResponse;
};

type QueryCodes = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryCodesRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryCodesResponse;
};

type QueryPinnedCodes = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof cosmwasm_wasm_v1_query_pb.QueryPinnedCodesRequest;
  readonly responseType: typeof cosmwasm_wasm_v1_query_pb.QueryPinnedCodesResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly ContractInfo: QueryContractInfo;
  static readonly ContractHistory: QueryContractHistory;
  static readonly ContractsByCode: QueryContractsByCode;
  static readonly AllContractState: QueryAllContractState;
  static readonly RawContractState: QueryRawContractState;
  static readonly SmartContractState: QuerySmartContractState;
  static readonly Code: QueryCode;
  static readonly Codes: QueryCodes;
  static readonly PinnedCodes: QueryPinnedCodes;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  contractInfo(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryContractInfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryContractInfoResponse|null) => void
  ): UnaryResponse;
  contractInfo(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryContractInfoRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryContractInfoResponse|null) => void
  ): UnaryResponse;
  contractHistory(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryContractHistoryRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryContractHistoryResponse|null) => void
  ): UnaryResponse;
  contractHistory(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryContractHistoryRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryContractHistoryResponse|null) => void
  ): UnaryResponse;
  contractsByCode(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryContractsByCodeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryContractsByCodeResponse|null) => void
  ): UnaryResponse;
  contractsByCode(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryContractsByCodeRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryContractsByCodeResponse|null) => void
  ): UnaryResponse;
  allContractState(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryAllContractStateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryAllContractStateResponse|null) => void
  ): UnaryResponse;
  allContractState(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryAllContractStateRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryAllContractStateResponse|null) => void
  ): UnaryResponse;
  rawContractState(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryRawContractStateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryRawContractStateResponse|null) => void
  ): UnaryResponse;
  rawContractState(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryRawContractStateRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryRawContractStateResponse|null) => void
  ): UnaryResponse;
  smartContractState(
    requestMessage: cosmwasm_wasm_v1_query_pb.QuerySmartContractStateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QuerySmartContractStateResponse|null) => void
  ): UnaryResponse;
  smartContractState(
    requestMessage: cosmwasm_wasm_v1_query_pb.QuerySmartContractStateRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QuerySmartContractStateResponse|null) => void
  ): UnaryResponse;
  code(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryCodeRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryCodeResponse|null) => void
  ): UnaryResponse;
  code(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryCodeRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryCodeResponse|null) => void
  ): UnaryResponse;
  codes(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryCodesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryCodesResponse|null) => void
  ): UnaryResponse;
  codes(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryCodesRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryCodesResponse|null) => void
  ): UnaryResponse;
  pinnedCodes(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryPinnedCodesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryPinnedCodesResponse|null) => void
  ): UnaryResponse;
  pinnedCodes(
    requestMessage: cosmwasm_wasm_v1_query_pb.QueryPinnedCodesRequest,
    callback: (error: ServiceError|null, responseMessage: cosmwasm_wasm_v1_query_pb.QueryPinnedCodesResponse|null) => void
  ): UnaryResponse;
}

