// package: injective.oracle.v1beta1
// file: injective/oracle/v1beta1/query.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../../../google/api/annotations_pb";
import * as injective_oracle_v1beta1_oracle_pb from "../../../injective/oracle/v1beta1/oracle_pb";
import * as injective_oracle_v1beta1_genesis_pb from "../../../injective/oracle/v1beta1/genesis_pb";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";

export class QueryParamsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryParamsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryParamsRequest): QueryParamsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryParamsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryParamsRequest;
  static deserializeBinaryFromReader(message: QueryParamsRequest, reader: jspb.BinaryReader): QueryParamsRequest;
}

export namespace QueryParamsRequest {
  export type AsObject = {
  }
}

export class QueryParamsResponse extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_oracle_v1beta1_oracle_pb.Params | undefined;
  setParams(value?: injective_oracle_v1beta1_oracle_pb.Params): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryParamsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryParamsResponse): QueryParamsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryParamsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryParamsResponse;
  static deserializeBinaryFromReader(message: QueryParamsResponse, reader: jspb.BinaryReader): QueryParamsResponse;
}

export namespace QueryParamsResponse {
  export type AsObject = {
    params?: injective_oracle_v1beta1_oracle_pb.Params.AsObject,
  }
}

export class QueryBandRelayersRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBandRelayersRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBandRelayersRequest): QueryBandRelayersRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBandRelayersRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBandRelayersRequest;
  static deserializeBinaryFromReader(message: QueryBandRelayersRequest, reader: jspb.BinaryReader): QueryBandRelayersRequest;
}

export namespace QueryBandRelayersRequest {
  export type AsObject = {
  }
}

export class QueryBandRelayersResponse extends jspb.Message {
  clearRelayersList(): void;
  getRelayersList(): Array<string>;
  setRelayersList(value: Array<string>): void;
  addRelayers(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBandRelayersResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBandRelayersResponse): QueryBandRelayersResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBandRelayersResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBandRelayersResponse;
  static deserializeBinaryFromReader(message: QueryBandRelayersResponse, reader: jspb.BinaryReader): QueryBandRelayersResponse;
}

export namespace QueryBandRelayersResponse {
  export type AsObject = {
    relayersList: Array<string>,
  }
}

export class QueryBandPriceStatesRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBandPriceStatesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBandPriceStatesRequest): QueryBandPriceStatesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBandPriceStatesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBandPriceStatesRequest;
  static deserializeBinaryFromReader(message: QueryBandPriceStatesRequest, reader: jspb.BinaryReader): QueryBandPriceStatesRequest;
}

export namespace QueryBandPriceStatesRequest {
  export type AsObject = {
  }
}

export class QueryBandPriceStatesResponse extends jspb.Message {
  clearPriceStatesList(): void;
  getPriceStatesList(): Array<injective_oracle_v1beta1_oracle_pb.BandPriceState>;
  setPriceStatesList(value: Array<injective_oracle_v1beta1_oracle_pb.BandPriceState>): void;
  addPriceStates(value?: injective_oracle_v1beta1_oracle_pb.BandPriceState, index?: number): injective_oracle_v1beta1_oracle_pb.BandPriceState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBandPriceStatesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBandPriceStatesResponse): QueryBandPriceStatesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBandPriceStatesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBandPriceStatesResponse;
  static deserializeBinaryFromReader(message: QueryBandPriceStatesResponse, reader: jspb.BinaryReader): QueryBandPriceStatesResponse;
}

export namespace QueryBandPriceStatesResponse {
  export type AsObject = {
    priceStatesList: Array<injective_oracle_v1beta1_oracle_pb.BandPriceState.AsObject>,
  }
}

export class QueryBandIBCPriceStatesRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBandIBCPriceStatesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBandIBCPriceStatesRequest): QueryBandIBCPriceStatesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBandIBCPriceStatesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBandIBCPriceStatesRequest;
  static deserializeBinaryFromReader(message: QueryBandIBCPriceStatesRequest, reader: jspb.BinaryReader): QueryBandIBCPriceStatesRequest;
}

export namespace QueryBandIBCPriceStatesRequest {
  export type AsObject = {
  }
}

export class QueryBandIBCPriceStatesResponse extends jspb.Message {
  clearPriceStatesList(): void;
  getPriceStatesList(): Array<injective_oracle_v1beta1_oracle_pb.BandPriceState>;
  setPriceStatesList(value: Array<injective_oracle_v1beta1_oracle_pb.BandPriceState>): void;
  addPriceStates(value?: injective_oracle_v1beta1_oracle_pb.BandPriceState, index?: number): injective_oracle_v1beta1_oracle_pb.BandPriceState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryBandIBCPriceStatesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryBandIBCPriceStatesResponse): QueryBandIBCPriceStatesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryBandIBCPriceStatesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryBandIBCPriceStatesResponse;
  static deserializeBinaryFromReader(message: QueryBandIBCPriceStatesResponse, reader: jspb.BinaryReader): QueryBandIBCPriceStatesResponse;
}

export namespace QueryBandIBCPriceStatesResponse {
  export type AsObject = {
    priceStatesList: Array<injective_oracle_v1beta1_oracle_pb.BandPriceState.AsObject>,
  }
}

export class QueryPriceFeedPriceStatesRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPriceFeedPriceStatesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPriceFeedPriceStatesRequest): QueryPriceFeedPriceStatesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPriceFeedPriceStatesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPriceFeedPriceStatesRequest;
  static deserializeBinaryFromReader(message: QueryPriceFeedPriceStatesRequest, reader: jspb.BinaryReader): QueryPriceFeedPriceStatesRequest;
}

export namespace QueryPriceFeedPriceStatesRequest {
  export type AsObject = {
  }
}

export class QueryPriceFeedPriceStatesResponse extends jspb.Message {
  clearPriceStatesList(): void;
  getPriceStatesList(): Array<injective_oracle_v1beta1_oracle_pb.PriceFeedState>;
  setPriceStatesList(value: Array<injective_oracle_v1beta1_oracle_pb.PriceFeedState>): void;
  addPriceStates(value?: injective_oracle_v1beta1_oracle_pb.PriceFeedState, index?: number): injective_oracle_v1beta1_oracle_pb.PriceFeedState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryPriceFeedPriceStatesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryPriceFeedPriceStatesResponse): QueryPriceFeedPriceStatesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryPriceFeedPriceStatesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryPriceFeedPriceStatesResponse;
  static deserializeBinaryFromReader(message: QueryPriceFeedPriceStatesResponse, reader: jspb.BinaryReader): QueryPriceFeedPriceStatesResponse;
}

export namespace QueryPriceFeedPriceStatesResponse {
  export type AsObject = {
    priceStatesList: Array<injective_oracle_v1beta1_oracle_pb.PriceFeedState.AsObject>,
  }
}

export class QueryCoinbasePriceStatesRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryCoinbasePriceStatesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryCoinbasePriceStatesRequest): QueryCoinbasePriceStatesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryCoinbasePriceStatesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryCoinbasePriceStatesRequest;
  static deserializeBinaryFromReader(message: QueryCoinbasePriceStatesRequest, reader: jspb.BinaryReader): QueryCoinbasePriceStatesRequest;
}

export namespace QueryCoinbasePriceStatesRequest {
  export type AsObject = {
  }
}

export class QueryCoinbasePriceStatesResponse extends jspb.Message {
  clearPriceStatesList(): void;
  getPriceStatesList(): Array<injective_oracle_v1beta1_oracle_pb.CoinbasePriceState>;
  setPriceStatesList(value: Array<injective_oracle_v1beta1_oracle_pb.CoinbasePriceState>): void;
  addPriceStates(value?: injective_oracle_v1beta1_oracle_pb.CoinbasePriceState, index?: number): injective_oracle_v1beta1_oracle_pb.CoinbasePriceState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryCoinbasePriceStatesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryCoinbasePriceStatesResponse): QueryCoinbasePriceStatesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryCoinbasePriceStatesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryCoinbasePriceStatesResponse;
  static deserializeBinaryFromReader(message: QueryCoinbasePriceStatesResponse, reader: jspb.BinaryReader): QueryCoinbasePriceStatesResponse;
}

export namespace QueryCoinbasePriceStatesResponse {
  export type AsObject = {
    priceStatesList: Array<injective_oracle_v1beta1_oracle_pb.CoinbasePriceState.AsObject>,
  }
}

export class QueryProviderPriceStateRequest extends jspb.Message {
  getProvider(): string;
  setProvider(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryProviderPriceStateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryProviderPriceStateRequest): QueryProviderPriceStateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryProviderPriceStateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryProviderPriceStateRequest;
  static deserializeBinaryFromReader(message: QueryProviderPriceStateRequest, reader: jspb.BinaryReader): QueryProviderPriceStateRequest;
}

export namespace QueryProviderPriceStateRequest {
  export type AsObject = {
    provider: string,
    symbol: string,
  }
}

export class QueryProviderPriceStateResponse extends jspb.Message {
  hasPriceState(): boolean;
  clearPriceState(): void;
  getPriceState(): injective_oracle_v1beta1_oracle_pb.PriceState | undefined;
  setPriceState(value?: injective_oracle_v1beta1_oracle_pb.PriceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryProviderPriceStateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryProviderPriceStateResponse): QueryProviderPriceStateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryProviderPriceStateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryProviderPriceStateResponse;
  static deserializeBinaryFromReader(message: QueryProviderPriceStateResponse, reader: jspb.BinaryReader): QueryProviderPriceStateResponse;
}

export namespace QueryProviderPriceStateResponse {
  export type AsObject = {
    priceState?: injective_oracle_v1beta1_oracle_pb.PriceState.AsObject,
  }
}

export class QueryModuleStateRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateRequest): QueryModuleStateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateRequest;
  static deserializeBinaryFromReader(message: QueryModuleStateRequest, reader: jspb.BinaryReader): QueryModuleStateRequest;
}

export namespace QueryModuleStateRequest {
  export type AsObject = {
  }
}

export class QueryModuleStateResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): injective_oracle_v1beta1_genesis_pb.GenesisState | undefined;
  setState(value?: injective_oracle_v1beta1_genesis_pb.GenesisState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateResponse): QueryModuleStateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateResponse;
  static deserializeBinaryFromReader(message: QueryModuleStateResponse, reader: jspb.BinaryReader): QueryModuleStateResponse;
}

export namespace QueryModuleStateResponse {
  export type AsObject = {
    state?: injective_oracle_v1beta1_genesis_pb.GenesisState.AsObject,
  }
}

export class QueryHistoricalPriceRecordsRequest extends jspb.Message {
  getOracle(): injective_oracle_v1beta1_oracle_pb.OracleTypeMap[keyof injective_oracle_v1beta1_oracle_pb.OracleTypeMap];
  setOracle(value: injective_oracle_v1beta1_oracle_pb.OracleTypeMap[keyof injective_oracle_v1beta1_oracle_pb.OracleTypeMap]): void;

  getSymbolId(): string;
  setSymbolId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryHistoricalPriceRecordsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryHistoricalPriceRecordsRequest): QueryHistoricalPriceRecordsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryHistoricalPriceRecordsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryHistoricalPriceRecordsRequest;
  static deserializeBinaryFromReader(message: QueryHistoricalPriceRecordsRequest, reader: jspb.BinaryReader): QueryHistoricalPriceRecordsRequest;
}

export namespace QueryHistoricalPriceRecordsRequest {
  export type AsObject = {
    oracle: injective_oracle_v1beta1_oracle_pb.OracleTypeMap[keyof injective_oracle_v1beta1_oracle_pb.OracleTypeMap],
    symbolId: string,
  }
}

export class QueryHistoricalPriceRecordsResponse extends jspb.Message {
  clearPriceRecordsList(): void;
  getPriceRecordsList(): Array<injective_oracle_v1beta1_oracle_pb.PriceRecords>;
  setPriceRecordsList(value: Array<injective_oracle_v1beta1_oracle_pb.PriceRecords>): void;
  addPriceRecords(value?: injective_oracle_v1beta1_oracle_pb.PriceRecords, index?: number): injective_oracle_v1beta1_oracle_pb.PriceRecords;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryHistoricalPriceRecordsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryHistoricalPriceRecordsResponse): QueryHistoricalPriceRecordsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryHistoricalPriceRecordsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryHistoricalPriceRecordsResponse;
  static deserializeBinaryFromReader(message: QueryHistoricalPriceRecordsResponse, reader: jspb.BinaryReader): QueryHistoricalPriceRecordsResponse;
}

export namespace QueryHistoricalPriceRecordsResponse {
  export type AsObject = {
    priceRecordsList: Array<injective_oracle_v1beta1_oracle_pb.PriceRecords.AsObject>,
  }
}

export class OracleHistoryOptions extends jspb.Message {
  getMaxAge(): number;
  setMaxAge(value: number): void;

  getIncludeRawHistory(): boolean;
  setIncludeRawHistory(value: boolean): void;

  getIncludeMetadata(): boolean;
  setIncludeMetadata(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OracleHistoryOptions.AsObject;
  static toObject(includeInstance: boolean, msg: OracleHistoryOptions): OracleHistoryOptions.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OracleHistoryOptions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OracleHistoryOptions;
  static deserializeBinaryFromReader(message: OracleHistoryOptions, reader: jspb.BinaryReader): OracleHistoryOptions;
}

export namespace OracleHistoryOptions {
  export type AsObject = {
    maxAge: number,
    includeRawHistory: boolean,
    includeMetadata: boolean,
  }
}

export class QueryOracleVolatilityRequest extends jspb.Message {
  hasBaseInfo(): boolean;
  clearBaseInfo(): void;
  getBaseInfo(): injective_oracle_v1beta1_oracle_pb.OracleInfo | undefined;
  setBaseInfo(value?: injective_oracle_v1beta1_oracle_pb.OracleInfo): void;

  hasQuoteInfo(): boolean;
  clearQuoteInfo(): void;
  getQuoteInfo(): injective_oracle_v1beta1_oracle_pb.OracleInfo | undefined;
  setQuoteInfo(value?: injective_oracle_v1beta1_oracle_pb.OracleInfo): void;

  hasOracleHistoryOptions(): boolean;
  clearOracleHistoryOptions(): void;
  getOracleHistoryOptions(): OracleHistoryOptions | undefined;
  setOracleHistoryOptions(value?: OracleHistoryOptions): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOracleVolatilityRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOracleVolatilityRequest): QueryOracleVolatilityRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOracleVolatilityRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOracleVolatilityRequest;
  static deserializeBinaryFromReader(message: QueryOracleVolatilityRequest, reader: jspb.BinaryReader): QueryOracleVolatilityRequest;
}

export namespace QueryOracleVolatilityRequest {
  export type AsObject = {
    baseInfo?: injective_oracle_v1beta1_oracle_pb.OracleInfo.AsObject,
    quoteInfo?: injective_oracle_v1beta1_oracle_pb.OracleInfo.AsObject,
    oracleHistoryOptions?: OracleHistoryOptions.AsObject,
  }
}

export class QueryOracleVolatilityResponse extends jspb.Message {
  getVolatility(): string;
  setVolatility(value: string): void;

  hasHistoryMetadata(): boolean;
  clearHistoryMetadata(): void;
  getHistoryMetadata(): injective_oracle_v1beta1_oracle_pb.MetadataStatistics | undefined;
  setHistoryMetadata(value?: injective_oracle_v1beta1_oracle_pb.MetadataStatistics): void;

  clearRawHistoryList(): void;
  getRawHistoryList(): Array<injective_oracle_v1beta1_oracle_pb.PriceRecord>;
  setRawHistoryList(value: Array<injective_oracle_v1beta1_oracle_pb.PriceRecord>): void;
  addRawHistory(value?: injective_oracle_v1beta1_oracle_pb.PriceRecord, index?: number): injective_oracle_v1beta1_oracle_pb.PriceRecord;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOracleVolatilityResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOracleVolatilityResponse): QueryOracleVolatilityResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOracleVolatilityResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOracleVolatilityResponse;
  static deserializeBinaryFromReader(message: QueryOracleVolatilityResponse, reader: jspb.BinaryReader): QueryOracleVolatilityResponse;
}

export namespace QueryOracleVolatilityResponse {
  export type AsObject = {
    volatility: string,
    historyMetadata?: injective_oracle_v1beta1_oracle_pb.MetadataStatistics.AsObject,
    rawHistoryList: Array<injective_oracle_v1beta1_oracle_pb.PriceRecord.AsObject>,
  }
}

export class QueryOracleProvidersInfoRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOracleProvidersInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOracleProvidersInfoRequest): QueryOracleProvidersInfoRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOracleProvidersInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOracleProvidersInfoRequest;
  static deserializeBinaryFromReader(message: QueryOracleProvidersInfoRequest, reader: jspb.BinaryReader): QueryOracleProvidersInfoRequest;
}

export namespace QueryOracleProvidersInfoRequest {
  export type AsObject = {
  }
}

export class QueryOracleProvidersInfoResponse extends jspb.Message {
  clearProvidersList(): void;
  getProvidersList(): Array<injective_oracle_v1beta1_oracle_pb.ProviderInfo>;
  setProvidersList(value: Array<injective_oracle_v1beta1_oracle_pb.ProviderInfo>): void;
  addProviders(value?: injective_oracle_v1beta1_oracle_pb.ProviderInfo, index?: number): injective_oracle_v1beta1_oracle_pb.ProviderInfo;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOracleProvidersInfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOracleProvidersInfoResponse): QueryOracleProvidersInfoResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOracleProvidersInfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOracleProvidersInfoResponse;
  static deserializeBinaryFromReader(message: QueryOracleProvidersInfoResponse, reader: jspb.BinaryReader): QueryOracleProvidersInfoResponse;
}

export namespace QueryOracleProvidersInfoResponse {
  export type AsObject = {
    providersList: Array<injective_oracle_v1beta1_oracle_pb.ProviderInfo.AsObject>,
  }
}

export class QueryOracleProviderPricesRequest extends jspb.Message {
  getProvider(): string;
  setProvider(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOracleProviderPricesRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOracleProviderPricesRequest): QueryOracleProviderPricesRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOracleProviderPricesRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOracleProviderPricesRequest;
  static deserializeBinaryFromReader(message: QueryOracleProviderPricesRequest, reader: jspb.BinaryReader): QueryOracleProviderPricesRequest;
}

export namespace QueryOracleProviderPricesRequest {
  export type AsObject = {
    provider: string,
  }
}

export class QueryOracleProviderPricesResponse extends jspb.Message {
  clearProviderstateList(): void;
  getProviderstateList(): Array<injective_oracle_v1beta1_oracle_pb.ProviderState>;
  setProviderstateList(value: Array<injective_oracle_v1beta1_oracle_pb.ProviderState>): void;
  addProviderstate(value?: injective_oracle_v1beta1_oracle_pb.ProviderState, index?: number): injective_oracle_v1beta1_oracle_pb.ProviderState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOracleProviderPricesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOracleProviderPricesResponse): QueryOracleProviderPricesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOracleProviderPricesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOracleProviderPricesResponse;
  static deserializeBinaryFromReader(message: QueryOracleProviderPricesResponse, reader: jspb.BinaryReader): QueryOracleProviderPricesResponse;
}

export namespace QueryOracleProviderPricesResponse {
  export type AsObject = {
    providerstateList: Array<injective_oracle_v1beta1_oracle_pb.ProviderState.AsObject>,
  }
}

export class QueryOraclePriceRequest extends jspb.Message {
  getOracleType(): injective_oracle_v1beta1_oracle_pb.OracleTypeMap[keyof injective_oracle_v1beta1_oracle_pb.OracleTypeMap];
  setOracleType(value: injective_oracle_v1beta1_oracle_pb.OracleTypeMap[keyof injective_oracle_v1beta1_oracle_pb.OracleTypeMap]): void;

  getBase(): string;
  setBase(value: string): void;

  getQuote(): string;
  setQuote(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOraclePriceRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOraclePriceRequest): QueryOraclePriceRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOraclePriceRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOraclePriceRequest;
  static deserializeBinaryFromReader(message: QueryOraclePriceRequest, reader: jspb.BinaryReader): QueryOraclePriceRequest;
}

export namespace QueryOraclePriceRequest {
  export type AsObject = {
    oracleType: injective_oracle_v1beta1_oracle_pb.OracleTypeMap[keyof injective_oracle_v1beta1_oracle_pb.OracleTypeMap],
    base: string,
    quote: string,
  }
}

export class PricePairState extends jspb.Message {
  getPairPrice(): string;
  setPairPrice(value: string): void;

  getBasePrice(): string;
  setBasePrice(value: string): void;

  getQuotePrice(): string;
  setQuotePrice(value: string): void;

  getBaseCumulativePrice(): string;
  setBaseCumulativePrice(value: string): void;

  getQuoteCumulativePrice(): string;
  setQuoteCumulativePrice(value: string): void;

  getBaseTimestamp(): number;
  setBaseTimestamp(value: number): void;

  getQuoteTimestamp(): number;
  setQuoteTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PricePairState.AsObject;
  static toObject(includeInstance: boolean, msg: PricePairState): PricePairState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PricePairState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PricePairState;
  static deserializeBinaryFromReader(message: PricePairState, reader: jspb.BinaryReader): PricePairState;
}

export namespace PricePairState {
  export type AsObject = {
    pairPrice: string,
    basePrice: string,
    quotePrice: string,
    baseCumulativePrice: string,
    quoteCumulativePrice: string,
    baseTimestamp: number,
    quoteTimestamp: number,
  }
}

export class QueryOraclePriceResponse extends jspb.Message {
  hasPricePairState(): boolean;
  clearPricePairState(): void;
  getPricePairState(): PricePairState | undefined;
  setPricePairState(value?: PricePairState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOraclePriceResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOraclePriceResponse): QueryOraclePriceResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOraclePriceResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOraclePriceResponse;
  static deserializeBinaryFromReader(message: QueryOraclePriceResponse, reader: jspb.BinaryReader): QueryOraclePriceResponse;
}

export namespace QueryOraclePriceResponse {
  export type AsObject = {
    pricePairState?: PricePairState.AsObject,
  }
}

