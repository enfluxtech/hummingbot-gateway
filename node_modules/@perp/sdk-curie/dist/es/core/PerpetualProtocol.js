import{getRetryProvider as t}from"../network/network.js";import"../network/constants.js";import"../network/RetryProvider.js";import{isSupportedChainId as i}from"../network/utils.js";import{ChannelRegistry as e}from"../internal/ChannelRegistry.js";import"../constants/envVariables.js";import"../constants/numbers.js";import"big.js";import"ethers";import{ClearingHouse as r}from"./clearingHouse/ClearingHouse.js";import{ClearingHouseConfig as s}from"./clearingHouse/ClearingHouseConfig.js";import{UnsupportedChainError as o,FailedPreconditionError as a,InitSDKError as n}from"../errors/errors.js";import"./position/types.js";import{invariant as m}from"../utils/errorChecker.js";import"../utils/tick.js";import{ContractReader as h}from"./contractReader/ContractReader.js";import{Contracts as l}from"../contracts/Contracts.js";import"./liquidity/LiquidityDraft.js";import{Liquidities as c}from"./liquidity/Liquidities.js";import"./liquidity/LiquidityBase.js";import{Positions as d}from"./position/Positions.js";import"./position/Position.js";import{Markets as p}from"./market/Markets.js";import"./market/Market.js";import{Metadata as u}from"../metadata/Metadata.js";import{Vault as g}from"./vault/Vault.js";import{Wallet as _}from"./wallet/Wallet.js";import{DelegateApproval as f}from"./clearingHouse/DelegateApproval.js";import{LimitOrderBook as w}from"./limitOrder/LimitOrderBook.js";class j{constructor({chainId:r,providerConfigs:s,moduleConfigs:a}){if(!i(r))throw new o;this._chainId=r,this.providerConfigs=s,this.moduleConfigs=a,this._channelRegistry=new e,this.provider=t(s)}get metadata(){return this._metadata}get contracts(){return this._contracts}get contractReader(){return this._contractReader}get wallet(){return this._wallet}get vault(){return this._vault}get markets(){return m(!!this._markets,(()=>new a({functionName:"markets",stateName:"perp",stateValue:"uninitialized"}))),this._markets}get clearingHouseConfig(){return m(!!this._clearingHouseConfig,(()=>new a({functionName:"clearingHouseConfig",stateName:"perp",stateValue:"uninitialized"}))),this._clearingHouseConfig}get clearingHouse(){return this._clearingHouse}get positions(){return this._positions}get liquidities(){return this._liquidities}get channelRegistry(){return this._channelRegistry}get delegateApproval(){return this._delegateApproval}get limitOrderBook(){return this._limitOrderBook}async init(){try{this._metadata=await u.create(this._chainId),this._contracts=new l({metadata:this.metadata,provider:this.provider}),this._contractReader=new h({metadata:this.metadata,provider:this.provider,contracts:this.contracts}),this._markets=new p(this),this._clearingHouseConfig=await s.create(this.contractReader),this._clearingHouse=new r(this)}catch(t){throw new n(t)}}async connect({signer:t}){var e;if(!i(await t.getChainId()))throw new o;const r=await t.getAddress();this.contracts.connect(t),this._wallet=new _(this,r),this._vault=new g(this,r),this.hasConnected()&&(this._delegateApproval=new f(this,null===(e=this.moduleConfigs)||void 0===e?void 0:e.delegateApproval),this._limitOrderBook=new w(this),this._positions=new d(this),this._liquidities=new c(this))}hasInitialized(){return!!this._markets&&!!this._clearingHouse}hasConnected(){return this.hasInitialized()&&!!this._wallet}destroy(){this._channelRegistry.cleanUp()}}export{j as PerpetualProtocol};
//# sourceMappingURL=PerpetualProtocol.js.map
