import Big from "big.js";
export declare function hasNumberChange(a: Big, b: Big): boolean;
export declare function hasNumbersChange(prev: Record<string, Big>, next: Record<string, Big>): boolean;
export declare function hasNumberArrChange(prev: Big[], next: Big[]): boolean;
export declare type MemoizedFetcher = (ignoreChangeCheck?: boolean, prevResultFirst?: boolean) => Promise<void>;
/** FIXME:
 * Add the `prevResultFirst` option as a temp solution for performance.
 * When `prevResultFirst` is true and result has been fetched it will skip fetch.
 * When `prevResultFirst` is true and the fetcher has been called(no result yet),
 * the second call is going to check the previous result per second, until the result is fetched or hit the timeout(10s).
 */
export declare function createMemoizedFetcher<T>(fetcher: () => Promise<T>, handler: (args: T) => void, compareFn: (a: T, b: T) => boolean): (ignoreChangeCheck?: boolean, prevResultFirst?: boolean) => Promise<void>;
