// package: injective.tokenfactory.v1beta1
// file: injective/tokenfactory/v1beta1/events.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";
import * as cosmos_bank_v1beta1_bank_pb from "../../../cosmos/bank/v1beta1/bank_pb";
import * as injective_tokenfactory_v1beta1_authorityMetadata_pb from "../../../injective/tokenfactory/v1beta1/authorityMetadata_pb";

export class EventCreateTFDenom extends jspb.Message {
  getAccount(): string;
  setAccount(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventCreateTFDenom.AsObject;
  static toObject(includeInstance: boolean, msg: EventCreateTFDenom): EventCreateTFDenom.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventCreateTFDenom, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventCreateTFDenom;
  static deserializeBinaryFromReader(message: EventCreateTFDenom, reader: jspb.BinaryReader): EventCreateTFDenom;
}

export namespace EventCreateTFDenom {
  export type AsObject = {
    account: string,
    denom: string,
  }
}

export class EventMintTFDenom extends jspb.Message {
  getRecipientAddress(): string;
  setRecipientAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setAmount(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventMintTFDenom.AsObject;
  static toObject(includeInstance: boolean, msg: EventMintTFDenom): EventMintTFDenom.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventMintTFDenom, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventMintTFDenom;
  static deserializeBinaryFromReader(message: EventMintTFDenom, reader: jspb.BinaryReader): EventMintTFDenom;
}

export namespace EventMintTFDenom {
  export type AsObject = {
    recipientAddress: string,
    amount?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
  }
}

export class EventBurnTFDenom extends jspb.Message {
  getBurnerAddress(): string;
  setBurnerAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setAmount(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventBurnTFDenom.AsObject;
  static toObject(includeInstance: boolean, msg: EventBurnTFDenom): EventBurnTFDenom.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventBurnTFDenom, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventBurnTFDenom;
  static deserializeBinaryFromReader(message: EventBurnTFDenom, reader: jspb.BinaryReader): EventBurnTFDenom;
}

export namespace EventBurnTFDenom {
  export type AsObject = {
    burnerAddress: string,
    amount?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
  }
}

export class EventChangeTFAdmin extends jspb.Message {
  getDenom(): string;
  setDenom(value: string): void;

  getNewAdminAddress(): string;
  setNewAdminAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventChangeTFAdmin.AsObject;
  static toObject(includeInstance: boolean, msg: EventChangeTFAdmin): EventChangeTFAdmin.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventChangeTFAdmin, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventChangeTFAdmin;
  static deserializeBinaryFromReader(message: EventChangeTFAdmin, reader: jspb.BinaryReader): EventChangeTFAdmin;
}

export namespace EventChangeTFAdmin {
  export type AsObject = {
    denom: string,
    newAdminAddress: string,
  }
}

export class EventSetTFDenomMetadata extends jspb.Message {
  getDenom(): string;
  setDenom(value: string): void;

  hasMetadata(): boolean;
  clearMetadata(): void;
  getMetadata(): cosmos_bank_v1beta1_bank_pb.Metadata | undefined;
  setMetadata(value?: cosmos_bank_v1beta1_bank_pb.Metadata): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventSetTFDenomMetadata.AsObject;
  static toObject(includeInstance: boolean, msg: EventSetTFDenomMetadata): EventSetTFDenomMetadata.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventSetTFDenomMetadata, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventSetTFDenomMetadata;
  static deserializeBinaryFromReader(message: EventSetTFDenomMetadata, reader: jspb.BinaryReader): EventSetTFDenomMetadata;
}

export namespace EventSetTFDenomMetadata {
  export type AsObject = {
    denom: string,
    metadata?: cosmos_bank_v1beta1_bank_pb.Metadata.AsObject,
  }
}

