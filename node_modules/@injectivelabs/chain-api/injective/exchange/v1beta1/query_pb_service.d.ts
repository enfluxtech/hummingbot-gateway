// package: injective.exchange.v1beta1
// file: injective/exchange/v1beta1/query.proto

import * as injective_exchange_v1beta1_query_pb from "../../../injective/exchange/v1beta1/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryQueryExchangeParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryExchangeParamsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryExchangeParamsResponse;
};

type QuerySubaccountDeposits = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsResponse;
};

type QuerySubaccountDeposit = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountDepositRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountDepositResponse;
};

type QueryExchangeBalances = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryExchangeBalancesRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryExchangeBalancesResponse;
};

type QuerySpotMarkets = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySpotMarketsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySpotMarketsResponse;
};

type QuerySpotMarket = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySpotMarketRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySpotMarketResponse;
};

type QuerySpotOrderbook = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySpotOrderbookRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySpotOrderbookResponse;
};

type QueryTraderSpotOrders = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse;
};

type QuerySpotOrdersByHashes = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesResponse;
};

type QuerySubaccountOrders = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersResponse;
};

type QueryTraderSpotTransientOrders = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse;
};

type QuerySpotMidPriceAndTOB = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBResponse;
};

type QueryDerivativeMidPriceAndTOB = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBResponse;
};

type QueryDerivativeOrderbook = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookResponse;
};

type QueryTraderDerivativeOrders = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse;
};

type QueryDerivativeOrdersByHashes = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesResponse;
};

type QueryTraderDerivativeTransientOrders = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse;
};

type QueryDerivativeMarkets = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsResponse;
};

type QueryDerivativeMarket = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMarketRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMarketResponse;
};

type QueryDerivativeMarketAddress = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressResponse;
};

type QuerySubaccountTradeNonce = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceResponse;
};

type QueryExchangeModuleState = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryModuleStateRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryModuleStateResponse;
};

type QueryPositions = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryPositionsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryPositionsResponse;
};

type QuerySubaccountPositions = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsResponse;
};

type QuerySubaccountPositionInMarket = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketResponse;
};

type QuerySubaccountEffectivePositionInMarket = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketResponse;
};

type QueryPerpetualMarketInfo = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoResponse;
};

type QueryExpiryFuturesMarketInfo = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoResponse;
};

type QueryPerpetualMarketFunding = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingResponse;
};

type QuerySubaccountOrderMetadata = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataResponse;
};

type QueryTradeRewardPoints = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse;
};

type QueryPendingTradeRewardPoints = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse;
};

type QueryTradeRewardCampaign = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignResponse;
};

type QueryFeeDiscountAccountInfo = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoResponse;
};

type QueryFeeDiscountSchedule = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleResponse;
};

type QueryBalanceMismatches = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesResponse;
};

type QueryBalanceWithBalanceHolds = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsResponse;
};

type QueryFeeDiscountTierStatistics = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsResponse;
};

type QueryMitoVaultInfos = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.MitoVaultInfosRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.MitoVaultInfosResponse;
};

type QueryQueryMarketIDFromVault = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultResponse;
};

type QueryHistoricalTradeRecords = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsResponse;
};

type QueryIsOptedOutOfRewards = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsResponse;
};

type QueryOptedOutOfRewardsAccounts = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsResponse;
};

type QueryMarketVolatility = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryMarketVolatilityRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryMarketVolatilityResponse;
};

type QueryBinaryOptionsMarkets = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryBinaryMarketsRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryBinaryMarketsResponse;
};

type QueryTraderDerivativeConditionalOrders = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersResponse;
};

type QueryMarketAtomicExecutionFeeMultiplier = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierRequest;
  readonly responseType: typeof injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly QueryExchangeParams: QueryQueryExchangeParams;
  static readonly SubaccountDeposits: QuerySubaccountDeposits;
  static readonly SubaccountDeposit: QuerySubaccountDeposit;
  static readonly ExchangeBalances: QueryExchangeBalances;
  static readonly SpotMarkets: QuerySpotMarkets;
  static readonly SpotMarket: QuerySpotMarket;
  static readonly SpotOrderbook: QuerySpotOrderbook;
  static readonly TraderSpotOrders: QueryTraderSpotOrders;
  static readonly SpotOrdersByHashes: QuerySpotOrdersByHashes;
  static readonly SubaccountOrders: QuerySubaccountOrders;
  static readonly TraderSpotTransientOrders: QueryTraderSpotTransientOrders;
  static readonly SpotMidPriceAndTOB: QuerySpotMidPriceAndTOB;
  static readonly DerivativeMidPriceAndTOB: QueryDerivativeMidPriceAndTOB;
  static readonly DerivativeOrderbook: QueryDerivativeOrderbook;
  static readonly TraderDerivativeOrders: QueryTraderDerivativeOrders;
  static readonly DerivativeOrdersByHashes: QueryDerivativeOrdersByHashes;
  static readonly TraderDerivativeTransientOrders: QueryTraderDerivativeTransientOrders;
  static readonly DerivativeMarkets: QueryDerivativeMarkets;
  static readonly DerivativeMarket: QueryDerivativeMarket;
  static readonly DerivativeMarketAddress: QueryDerivativeMarketAddress;
  static readonly SubaccountTradeNonce: QuerySubaccountTradeNonce;
  static readonly ExchangeModuleState: QueryExchangeModuleState;
  static readonly Positions: QueryPositions;
  static readonly SubaccountPositions: QuerySubaccountPositions;
  static readonly SubaccountPositionInMarket: QuerySubaccountPositionInMarket;
  static readonly SubaccountEffectivePositionInMarket: QuerySubaccountEffectivePositionInMarket;
  static readonly PerpetualMarketInfo: QueryPerpetualMarketInfo;
  static readonly ExpiryFuturesMarketInfo: QueryExpiryFuturesMarketInfo;
  static readonly PerpetualMarketFunding: QueryPerpetualMarketFunding;
  static readonly SubaccountOrderMetadata: QuerySubaccountOrderMetadata;
  static readonly TradeRewardPoints: QueryTradeRewardPoints;
  static readonly PendingTradeRewardPoints: QueryPendingTradeRewardPoints;
  static readonly TradeRewardCampaign: QueryTradeRewardCampaign;
  static readonly FeeDiscountAccountInfo: QueryFeeDiscountAccountInfo;
  static readonly FeeDiscountSchedule: QueryFeeDiscountSchedule;
  static readonly BalanceMismatches: QueryBalanceMismatches;
  static readonly BalanceWithBalanceHolds: QueryBalanceWithBalanceHolds;
  static readonly FeeDiscountTierStatistics: QueryFeeDiscountTierStatistics;
  static readonly MitoVaultInfos: QueryMitoVaultInfos;
  static readonly QueryMarketIDFromVault: QueryQueryMarketIDFromVault;
  static readonly HistoricalTradeRecords: QueryHistoricalTradeRecords;
  static readonly IsOptedOutOfRewards: QueryIsOptedOutOfRewards;
  static readonly OptedOutOfRewardsAccounts: QueryOptedOutOfRewardsAccounts;
  static readonly MarketVolatility: QueryMarketVolatility;
  static readonly BinaryOptionsMarkets: QueryBinaryOptionsMarkets;
  static readonly TraderDerivativeConditionalOrders: QueryTraderDerivativeConditionalOrders;
  static readonly MarketAtomicExecutionFeeMultiplier: QueryMarketAtomicExecutionFeeMultiplier;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  queryExchangeParams(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryExchangeParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryExchangeParamsResponse|null) => void
  ): UnaryResponse;
  queryExchangeParams(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryExchangeParamsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryExchangeParamsResponse|null) => void
  ): UnaryResponse;
  subaccountDeposits(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsResponse|null) => void
  ): UnaryResponse;
  subaccountDeposits(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsResponse|null) => void
  ): UnaryResponse;
  subaccountDeposit(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositResponse|null) => void
  ): UnaryResponse;
  subaccountDeposit(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositResponse|null) => void
  ): UnaryResponse;
  exchangeBalances(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryExchangeBalancesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryExchangeBalancesResponse|null) => void
  ): UnaryResponse;
  exchangeBalances(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryExchangeBalancesRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryExchangeBalancesResponse|null) => void
  ): UnaryResponse;
  spotMarkets(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketsResponse|null) => void
  ): UnaryResponse;
  spotMarkets(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketsResponse|null) => void
  ): UnaryResponse;
  spotMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketResponse|null) => void
  ): UnaryResponse;
  spotMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotMarketResponse|null) => void
  ): UnaryResponse;
  spotOrderbook(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrderbookRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrderbookResponse|null) => void
  ): UnaryResponse;
  spotOrderbook(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrderbookRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrderbookResponse|null) => void
  ): UnaryResponse;
  traderSpotOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse|null) => void
  ): UnaryResponse;
  traderSpotOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse|null) => void
  ): UnaryResponse;
  spotOrdersByHashes(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesResponse|null) => void
  ): UnaryResponse;
  spotOrdersByHashes(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesResponse|null) => void
  ): UnaryResponse;
  subaccountOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersResponse|null) => void
  ): UnaryResponse;
  subaccountOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersResponse|null) => void
  ): UnaryResponse;
  traderSpotTransientOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse|null) => void
  ): UnaryResponse;
  traderSpotTransientOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse|null) => void
  ): UnaryResponse;
  spotMidPriceAndTOB(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBResponse|null) => void
  ): UnaryResponse;
  spotMidPriceAndTOB(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBResponse|null) => void
  ): UnaryResponse;
  derivativeMidPriceAndTOB(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBResponse|null) => void
  ): UnaryResponse;
  derivativeMidPriceAndTOB(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBResponse|null) => void
  ): UnaryResponse;
  derivativeOrderbook(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookResponse|null) => void
  ): UnaryResponse;
  derivativeOrderbook(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookResponse|null) => void
  ): UnaryResponse;
  traderDerivativeOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse|null) => void
  ): UnaryResponse;
  traderDerivativeOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse|null) => void
  ): UnaryResponse;
  derivativeOrdersByHashes(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesResponse|null) => void
  ): UnaryResponse;
  derivativeOrdersByHashes(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesResponse|null) => void
  ): UnaryResponse;
  traderDerivativeTransientOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse|null) => void
  ): UnaryResponse;
  traderDerivativeTransientOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse|null) => void
  ): UnaryResponse;
  derivativeMarkets(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsResponse|null) => void
  ): UnaryResponse;
  derivativeMarkets(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsResponse|null) => void
  ): UnaryResponse;
  derivativeMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketResponse|null) => void
  ): UnaryResponse;
  derivativeMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketResponse|null) => void
  ): UnaryResponse;
  derivativeMarketAddress(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressResponse|null) => void
  ): UnaryResponse;
  derivativeMarketAddress(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressResponse|null) => void
  ): UnaryResponse;
  subaccountTradeNonce(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceResponse|null) => void
  ): UnaryResponse;
  subaccountTradeNonce(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceResponse|null) => void
  ): UnaryResponse;
  exchangeModuleState(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryModuleStateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryModuleStateResponse|null) => void
  ): UnaryResponse;
  exchangeModuleState(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryModuleStateRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryModuleStateResponse|null) => void
  ): UnaryResponse;
  positions(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryPositionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryPositionsResponse|null) => void
  ): UnaryResponse;
  positions(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryPositionsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryPositionsResponse|null) => void
  ): UnaryResponse;
  subaccountPositions(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsResponse|null) => void
  ): UnaryResponse;
  subaccountPositions(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsResponse|null) => void
  ): UnaryResponse;
  subaccountPositionInMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketResponse|null) => void
  ): UnaryResponse;
  subaccountPositionInMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketResponse|null) => void
  ): UnaryResponse;
  subaccountEffectivePositionInMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketResponse|null) => void
  ): UnaryResponse;
  subaccountEffectivePositionInMarket(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketResponse|null) => void
  ): UnaryResponse;
  perpetualMarketInfo(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoResponse|null) => void
  ): UnaryResponse;
  perpetualMarketInfo(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoResponse|null) => void
  ): UnaryResponse;
  expiryFuturesMarketInfo(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoResponse|null) => void
  ): UnaryResponse;
  expiryFuturesMarketInfo(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoResponse|null) => void
  ): UnaryResponse;
  perpetualMarketFunding(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingResponse|null) => void
  ): UnaryResponse;
  perpetualMarketFunding(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingResponse|null) => void
  ): UnaryResponse;
  subaccountOrderMetadata(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataResponse|null) => void
  ): UnaryResponse;
  subaccountOrderMetadata(
    requestMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataResponse|null) => void
  ): UnaryResponse;
  tradeRewardPoints(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse|null) => void
  ): UnaryResponse;
  tradeRewardPoints(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse|null) => void
  ): UnaryResponse;
  pendingTradeRewardPoints(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse|null) => void
  ): UnaryResponse;
  pendingTradeRewardPoints(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse|null) => void
  ): UnaryResponse;
  tradeRewardCampaign(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignResponse|null) => void
  ): UnaryResponse;
  tradeRewardCampaign(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignResponse|null) => void
  ): UnaryResponse;
  feeDiscountAccountInfo(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoResponse|null) => void
  ): UnaryResponse;
  feeDiscountAccountInfo(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoResponse|null) => void
  ): UnaryResponse;
  feeDiscountSchedule(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleResponse|null) => void
  ): UnaryResponse;
  feeDiscountSchedule(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleResponse|null) => void
  ): UnaryResponse;
  balanceMismatches(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesResponse|null) => void
  ): UnaryResponse;
  balanceMismatches(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesResponse|null) => void
  ): UnaryResponse;
  balanceWithBalanceHolds(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsResponse|null) => void
  ): UnaryResponse;
  balanceWithBalanceHolds(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsResponse|null) => void
  ): UnaryResponse;
  feeDiscountTierStatistics(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsResponse|null) => void
  ): UnaryResponse;
  feeDiscountTierStatistics(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsResponse|null) => void
  ): UnaryResponse;
  mitoVaultInfos(
    requestMessage: injective_exchange_v1beta1_query_pb.MitoVaultInfosRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.MitoVaultInfosResponse|null) => void
  ): UnaryResponse;
  mitoVaultInfos(
    requestMessage: injective_exchange_v1beta1_query_pb.MitoVaultInfosRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.MitoVaultInfosResponse|null) => void
  ): UnaryResponse;
  queryMarketIDFromVault(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultResponse|null) => void
  ): UnaryResponse;
  queryMarketIDFromVault(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultResponse|null) => void
  ): UnaryResponse;
  historicalTradeRecords(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsResponse|null) => void
  ): UnaryResponse;
  historicalTradeRecords(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsResponse|null) => void
  ): UnaryResponse;
  isOptedOutOfRewards(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsResponse|null) => void
  ): UnaryResponse;
  isOptedOutOfRewards(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsResponse|null) => void
  ): UnaryResponse;
  optedOutOfRewardsAccounts(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsResponse|null) => void
  ): UnaryResponse;
  optedOutOfRewardsAccounts(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsResponse|null) => void
  ): UnaryResponse;
  marketVolatility(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryMarketVolatilityRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryMarketVolatilityResponse|null) => void
  ): UnaryResponse;
  marketVolatility(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryMarketVolatilityRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryMarketVolatilityResponse|null) => void
  ): UnaryResponse;
  binaryOptionsMarkets(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryBinaryMarketsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryBinaryMarketsResponse|null) => void
  ): UnaryResponse;
  binaryOptionsMarkets(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryBinaryMarketsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryBinaryMarketsResponse|null) => void
  ): UnaryResponse;
  traderDerivativeConditionalOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersResponse|null) => void
  ): UnaryResponse;
  traderDerivativeConditionalOrders(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersResponse|null) => void
  ): UnaryResponse;
  marketAtomicExecutionFeeMultiplier(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierResponse|null) => void
  ): UnaryResponse;
  marketAtomicExecutionFeeMultiplier(
    requestMessage: injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierRequest,
    callback: (error: ServiceError|null, responseMessage: injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierResponse|null) => void
  ): UnaryResponse;
}

