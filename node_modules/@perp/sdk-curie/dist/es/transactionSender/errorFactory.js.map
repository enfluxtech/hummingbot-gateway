{"version":3,"file":"errorFactory.js","sources":["../../../src/transactionSender/errorFactory.ts"],"sourcesContent":["import {\n    AlreadyOverPriceLimitOnceError,\n    CollateralDepositCapError,\n    ContractErrorCode,\n    ContractWriteError,\n    ErrorName,\n    NotEnoughAccountValueByImRatioError,\n    NotEnoughLiquidityError,\n    OrdersNumberExceedsError,\n    OverPriceLimitAfterSwapError,\n    OverPriceLimitBeforeSwapError,\n    PositionSizeIsZeroError,\n    PriceSlippageCheckError,\n    RpcIntrinsicGasTooLowError,\n    RpcRejectedError,\n    UniswapV3Error,\n    extractContractErrorCode,\n    isRpcNativeGasTooLowError,\n    isRpcNativeUserDeniedError,\n    MarketNumberExceedsError,\n    OverMaximumPriceSpreadError,\n    NotEnoughMinimumRequiredMarginError,\n} from \"../errors\"\nimport { ClearingHouse, Exchange, OrderBook } from \"../contracts/type\"\n\nimport { TransactionMetadata } from \".\"\n\nexport function getTransactionErrorFactory({\n    error,\n    metadata,\n    gasLimit,\n}: {\n    error: Error\n    metadata: TransactionMetadata\n    gasLimit?: string\n}) {\n    // NOTE: If error is already wrapped.\n    const errorNameList = Object.keys(ErrorName)\n    for (let i = 0; i < errorNameList.length; i++) {\n        if (errorNameList[i] === error.name) {\n            return error\n        }\n    }\n    // NOTE: If is user rejected error.\n    if (isRpcNativeUserDeniedError(error)) {\n        return new RpcRejectedError({ rawError: error, contractFunctionName: metadata.contractFunctionName })\n    }\n    if (isRpcNativeGasTooLowError(error)) {\n        return new RpcIntrinsicGasTooLowError({ rawError: error, contractFunctionName: metadata.contractFunctionName })\n    }\n\n    // NOTE: If getTransaction failed. (include estimateGas failed)\n    const errorCode = extractContractErrorCode(error)\n    let ErrorClass\n    switch (errorCode) {\n        case ContractErrorCode.NOT_ENOUGH_LIQUIDITY: {\n            ErrorClass = NotEnoughLiquidityError\n            break\n        }\n        case ContractErrorCode.PRICE_SLIPPAGE_CHECK_FAILS_TLRS:\n        case ContractErrorCode.PRICE_SLIPPAGE_CHECK_FAILS_TLRL:\n        case ContractErrorCode.PRICE_SLIPPAGE_CHECK_FAILS_TMRL:\n        case ContractErrorCode.PRICE_SLIPPAGE_CHECK_FAILS_TMRS:\n        case ContractErrorCode.PRICE_SLIPPAGE_CHECK_FAILS_PSCF: {\n            ErrorClass = PriceSlippageCheckError\n            break\n        }\n        case ContractErrorCode.COLLATERAL_DEPOSIT_FAILS_GTDC:\n        case ContractErrorCode.COLLATERAL_DEPOSIT_FAILS_GTSTBC: {\n            ErrorClass = CollateralDepositCapError\n            break\n        }\n        case ContractErrorCode.ALREADY_OVER_PRICE_LIMIT_ONCE: {\n            ErrorClass = AlreadyOverPriceLimitOnceError\n            break\n        }\n        case ContractErrorCode.OVER_PRICE_LIMIT_BEFORE_SWAP: {\n            ErrorClass = OverPriceLimitBeforeSwapError\n            break\n        }\n        case ContractErrorCode.OVER_PRICE_LIMIT_AFTER_SWAP: {\n            ErrorClass = OverPriceLimitAfterSwapError\n            break\n        }\n        case ContractErrorCode.POSITION_SIZE_IS_ZERO: {\n            ErrorClass = PositionSizeIsZeroError\n            break\n        }\n        case ContractErrorCode.NOT_ENOUGH_ACCOUNT_VALUE_BY_IM_RATIO: {\n            ErrorClass = NotEnoughAccountValueByImRatioError\n            break\n        }\n        case ContractErrorCode.ORDERS_NUMBER_EXCEEDS: {\n            ErrorClass = OrdersNumberExceedsError\n            break\n        }\n        case ContractErrorCode.LIQUIDITY_MATH_ERROR_LA:\n        case ContractErrorCode.LIQUIDITY_MATH_ERROR_LS: {\n            ErrorClass = UniswapV3Error\n            break\n        }\n        case ContractErrorCode.MARKET_NUMBER_EXCEEDS: {\n            ErrorClass = MarketNumberExceedsError\n            break\n        }\n        case ContractErrorCode.OVER_MAXIMUM_PRICE_SPREAD: {\n            ErrorClass = OverMaximumPriceSpreadError\n            break\n        }\n        case ContractErrorCode.NOT_ENOUGH_MINIMUM_REQUIRED_MARGIN: {\n            ErrorClass = NotEnoughMinimumRequiredMarginError\n            break\n        }\n        default: {\n            ErrorClass = ContractWriteError\n        }\n    }\n    const { contractName, contractFunctionName, args, txPayload } = metadata as TransactionMetadata<\n        OrderBook | ClearingHouse | Exchange\n    >\n    return new ErrorClass({\n        contractName,\n        contractFunctionName,\n        contractErrorCode: errorCode,\n        args,\n        rawError: error,\n        txPayload,\n        ...(gasLimit && { gasLimit }),\n    })\n}\n"],"names":["getTransactionErrorFactory","error","metadata","gasLimit","errorNameList","Object","keys","ErrorName","i","length","name","isRpcNativeUserDeniedError","RpcRejectedError","rawError","contractFunctionName","isRpcNativeGasTooLowError","RpcIntrinsicGasTooLowError","errorCode","extractContractErrorCode","ErrorClass","ContractErrorCode","NOT_ENOUGH_LIQUIDITY","NotEnoughLiquidityError","PRICE_SLIPPAGE_CHECK_FAILS_TLRS","PRICE_SLIPPAGE_CHECK_FAILS_TLRL","PRICE_SLIPPAGE_CHECK_FAILS_TMRL","PRICE_SLIPPAGE_CHECK_FAILS_TMRS","PRICE_SLIPPAGE_CHECK_FAILS_PSCF","PriceSlippageCheckError","COLLATERAL_DEPOSIT_FAILS_GTDC","COLLATERAL_DEPOSIT_FAILS_GTSTBC","CollateralDepositCapError","ALREADY_OVER_PRICE_LIMIT_ONCE","AlreadyOverPriceLimitOnceError","OVER_PRICE_LIMIT_BEFORE_SWAP","OverPriceLimitBeforeSwapError","OVER_PRICE_LIMIT_AFTER_SWAP","OverPriceLimitAfterSwapError","POSITION_SIZE_IS_ZERO","PositionSizeIsZeroError","NOT_ENOUGH_ACCOUNT_VALUE_BY_IM_RATIO","NotEnoughAccountValueByImRatioError","ORDERS_NUMBER_EXCEEDS","OrdersNumberExceedsError","LIQUIDITY_MATH_ERROR_LA","LIQUIDITY_MATH_ERROR_LS","UniswapV3Error","MARKET_NUMBER_EXCEEDS","MarketNumberExceedsError","OVER_MAXIMUM_PRICE_SPREAD","OverMaximumPriceSpreadError","NOT_ENOUGH_MINIMUM_REQUIRED_MARGIN","NotEnoughMinimumRequiredMarginError","ContractWriteError","contractName","args","txPayload","contractErrorCode"],"mappings":"+rBA2BM,SAAUA,GAA2BC,MACvCA,EAAKC,SACLA,EAAQC,SACRA,IAOA,MAAMC,EAAgBC,OAAOC,KAAKC,GAClC,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAcK,OAAQD,IACtC,GAAIJ,EAAcI,KAAOP,EAAMS,KAC3B,OAAOT,EAIf,GAAIU,EAA2BV,GAC3B,OAAO,IAAIW,EAAiB,CAAEC,SAAUZ,EAAOa,qBAAsBZ,EAASY,uBAElF,GAAIC,EAA0Bd,GAC1B,OAAO,IAAIe,EAA2B,CAAEH,SAAUZ,EAAOa,qBAAsBZ,EAASY,uBAI5F,MAAMG,EAAYC,EAAyBjB,GAC3C,IAAIkB,EACJ,OAAQF,GACJ,KAAKG,EAAkBC,qBACnBF,EAAaG,EACb,MAEJ,KAAKF,EAAkBG,gCACvB,KAAKH,EAAkBI,gCACvB,KAAKJ,EAAkBK,gCACvB,KAAKL,EAAkBM,gCACvB,KAAKN,EAAkBO,gCACnBR,EAAaS,EACb,MAEJ,KAAKR,EAAkBS,8BACvB,KAAKT,EAAkBU,gCACnBX,EAAaY,EACb,MAEJ,KAAKX,EAAkBY,8BACnBb,EAAac,EACb,MAEJ,KAAKb,EAAkBc,6BACnBf,EAAagB,EACb,MAEJ,KAAKf,EAAkBgB,4BACnBjB,EAAakB,EACb,MAEJ,KAAKjB,EAAkBkB,sBACnBnB,EAAaoB,EACb,MAEJ,KAAKnB,EAAkBoB,qCACnBrB,EAAasB,EACb,MAEJ,KAAKrB,EAAkBsB,sBACnBvB,EAAawB,EACb,MAEJ,KAAKvB,EAAkBwB,wBACvB,KAAKxB,EAAkByB,wBACnB1B,EAAa2B,EACb,MAEJ,KAAK1B,EAAkB2B,sBACnB5B,EAAa6B,EACb,MAEJ,KAAK5B,EAAkB6B,0BACnB9B,EAAa+B,EACb,MAEJ,KAAK9B,EAAkB+B,mCACnBhC,EAAaiC,EACb,MAEJ,QACIjC,EAAakC,EAGrB,MAAMC,aAAEA,EAAYxC,qBAAEA,EAAoByC,KAAEA,EAAIC,UAAEA,GAActD,EAGhE,OAAO,IAAIiB,EAAW,CAClBmC,eACAxC,uBACA2C,kBAAmBxC,EACnBsC,OACA1C,SAAUZ,EACVuD,eACIrD,GAAY,CAAEA,aAE1B"}