import Big from "big.js";
import { BigNumber } from "ethers";
import { ContractName } from "../../contracts";
import type { PerpetualProtocol } from "../PerpetualProtocol";
export interface ILimitOrder {
    orderType: number;
    salt: Big;
    trader: string;
    baseToken: string;
    isBaseToQuote: boolean;
    isExactInput: boolean;
    amount: Big;
    oppositeAmountBound: Big;
    deadline: Big;
    sqrtPriceLimitX96: Big;
    referralCode: string;
    reduceOnly: boolean;
    roundIdWhenCreated: Big;
    triggerPrice: Big;
}
export declare class LimitOrderBook {
    protected readonly _perp: PerpetualProtocol;
    constructor(_perp: PerpetualProtocol);
    cancelLimitOrder(order: ILimitOrder): Promise<{
        transaction: import("ethers").ContractTransaction;
        metadata: {
            contractName: ContractName;
            contractFunctionName: keyof import("ethers").Contract;
            args: unknown[];
            txPayload: {
                from?: string | undefined;
                to?: string | undefined;
                inputData?: string | undefined;
            } | {
                from: string;
                to: string;
                value: BigNumber | undefined;
                inputData: string;
            };
        };
        gasLimit: string;
    }>;
    getPriceFeedLatestRound({ tickerSymbol }: {
        tickerSymbol: string;
    }): Promise<string | undefined>;
}
