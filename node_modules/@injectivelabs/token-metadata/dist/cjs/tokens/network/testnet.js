"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokensBySymbolForTestnet = exports.testnetSymbolToIBCMap = exports.testnetSymbolToCw20AddressMap = exports.testnetSymbolToErc20AddressMap = void 0;
const tokens_1 = __importStar(require("../tokens"));
exports.testnetSymbolToErc20AddressMap = {
    INJ: '0xAD1794307245443B3Cb55d88e79EEE4d8a548C03',
    USDT: '0x87aB3B4C8661e07D6372361211B96ed4Dc36B1B5',
    APE: '0x44C21afAaF20c270EBbF5914Cfc3b5022173FEB7',
    USDC: '0x07865c6E87B9F70255377e024ace6630C1Eaa37F',
    wETH: '0xdB309Bb079EB419C18fe7D568c61cD2FdB65D9aF',
};
exports.testnetSymbolToCw20AddressMap = {
    SOL: 'inj12ngevx045zpvacus9s6anr258gkwpmthnz80e9',
    USDC: {
        USDCet: 'inj12sqy9uzzl3h3vqxam7sz9f0yvmhampcgesh3qw',
    },
};
exports.testnetSymbolToIBCMap = {
    ASTRO: {
        hash: 'E8AC6B792CDE60AB208CA060CA010A3881F682A7307F624347AB71B6A0B0BF89',
        path: 'transfer/channel-13',
        channelId: 'channel-13',
        baseDenom: 'ASTRO',
    },
};
const getTokensBySymbolForTestnet = () => Object.keys(tokens_1.default).reduce((result, token) => {
    const tokenSymbolToUpperCase = token.toUpperCase();
    const tokenMeta = Object.assign({}, tokens_1.default[token]);
    if (tokens_1.testnetCw20Tokens[tokenSymbolToUpperCase]) {
        tokenMeta.cw20s = [
            ...(tokenMeta.cw20s || []),
            tokens_1.testnetCw20Tokens[tokenSymbolToUpperCase],
        ];
    }
    if (!tokenMeta.erc20 &&
        !tokenMeta.cw20 &&
        !tokenMeta.cw20s &&
        !tokenMeta.ibc) {
        return Object.assign(Object.assign({}, result), { [tokenSymbolToUpperCase]: tokenMeta });
    }
    const tokenSymbol = token;
    const testnetAddressFromMap = exports.testnetSymbolToErc20AddressMap[tokenSymbol];
    const cw20TokenKey = token;
    const cw20TestnetAddressFromMap = exports.testnetSymbolToCw20AddressMap[cw20TokenKey];
    const ibcTestnetDetailsFromMap = exports.testnetSymbolToIBCMap[token];
    if (!testnetAddressFromMap &&
        !cw20TestnetAddressFromMap &&
        !ibcTestnetDetailsFromMap) {
        return Object.assign(Object.assign({}, result), { [tokenSymbolToUpperCase]: tokenMeta });
    }
    const mappedTokenMeta = Object.assign({}, tokenMeta);
    if (ibcTestnetDetailsFromMap && mappedTokenMeta.ibc) {
        mappedTokenMeta.ibc = Object.assign(Object.assign({}, mappedTokenMeta.ibc), { hash: ibcTestnetDetailsFromMap.hash, path: ibcTestnetDetailsFromMap.path, channelId: ibcTestnetDetailsFromMap.channelId });
    }
    if (testnetAddressFromMap && mappedTokenMeta.erc20) {
        mappedTokenMeta.erc20.address = testnetAddressFromMap;
    }
    if (cw20TestnetAddressFromMap) {
        if (mappedTokenMeta.cw20 &&
            typeof cw20TestnetAddressFromMap === 'string') {
            mappedTokenMeta.cw20.address = cw20TestnetAddressFromMap;
        }
        if (mappedTokenMeta.cw20s &&
            typeof cw20TestnetAddressFromMap !== 'string') {
            const cw20Maps = mappedTokenMeta.cw20s.map((cw20) => {
                const symbol = cw20.symbol;
                if (!cw20TestnetAddressFromMap[symbol]) {
                    return cw20;
                }
                return Object.assign(Object.assign({}, cw20), { address: cw20TestnetAddressFromMap[symbol] });
            });
            mappedTokenMeta.cw20s = cw20Maps;
        }
    }
    return Object.assign(Object.assign({}, result), { [tokenSymbolToUpperCase]: mappedTokenMeta });
}, {});
exports.getTokensBySymbolForTestnet = getTokensBySymbolForTestnet;
//# sourceMappingURL=testnet.js.map