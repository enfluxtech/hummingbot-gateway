// package: injective.ocr.v1beta1
// file: injective/ocr/v1beta1/tx.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as injective_ocr_v1beta1_ocr_pb from "../../../injective/ocr/v1beta1/ocr_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";

export class MsgCreateFeed extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  hasConfig(): boolean;
  clearConfig(): void;
  getConfig(): injective_ocr_v1beta1_ocr_pb.FeedConfig | undefined;
  setConfig(value?: injective_ocr_v1beta1_ocr_pb.FeedConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgCreateFeed.AsObject;
  static toObject(includeInstance: boolean, msg: MsgCreateFeed): MsgCreateFeed.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgCreateFeed, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgCreateFeed;
  static deserializeBinaryFromReader(message: MsgCreateFeed, reader: jspb.BinaryReader): MsgCreateFeed;
}

export namespace MsgCreateFeed {
  export type AsObject = {
    sender: string,
    config?: injective_ocr_v1beta1_ocr_pb.FeedConfig.AsObject,
  }
}

export class MsgCreateFeedResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgCreateFeedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgCreateFeedResponse): MsgCreateFeedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgCreateFeedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgCreateFeedResponse;
  static deserializeBinaryFromReader(message: MsgCreateFeedResponse, reader: jspb.BinaryReader): MsgCreateFeedResponse;
}

export namespace MsgCreateFeedResponse {
  export type AsObject = {
  }
}

export class MsgUpdateFeed extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  clearSignersList(): void;
  getSignersList(): Array<string>;
  setSignersList(value: Array<string>): void;
  addSigners(value: string, index?: number): string;

  clearTransmittersList(): void;
  getTransmittersList(): Array<string>;
  setTransmittersList(value: Array<string>): void;
  addTransmitters(value: string, index?: number): string;

  getLinkPerObservation(): string;
  setLinkPerObservation(value: string): void;

  getLinkPerTransmission(): string;
  setLinkPerTransmission(value: string): void;

  getLinkDenom(): string;
  setLinkDenom(value: string): void;

  getFeedAdmin(): string;
  setFeedAdmin(value: string): void;

  getBillingAdmin(): string;
  setBillingAdmin(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgUpdateFeed.AsObject;
  static toObject(includeInstance: boolean, msg: MsgUpdateFeed): MsgUpdateFeed.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgUpdateFeed, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgUpdateFeed;
  static deserializeBinaryFromReader(message: MsgUpdateFeed, reader: jspb.BinaryReader): MsgUpdateFeed;
}

export namespace MsgUpdateFeed {
  export type AsObject = {
    sender: string,
    feedId: string,
    signersList: Array<string>,
    transmittersList: Array<string>,
    linkPerObservation: string,
    linkPerTransmission: string,
    linkDenom: string,
    feedAdmin: string,
    billingAdmin: string,
  }
}

export class MsgUpdateFeedResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgUpdateFeedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgUpdateFeedResponse): MsgUpdateFeedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgUpdateFeedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgUpdateFeedResponse;
  static deserializeBinaryFromReader(message: MsgUpdateFeedResponse, reader: jspb.BinaryReader): MsgUpdateFeedResponse;
}

export namespace MsgUpdateFeedResponse {
  export type AsObject = {
  }
}

export class MsgTransmit extends jspb.Message {
  getTransmitter(): string;
  setTransmitter(value: string): void;

  getConfigDigest(): Uint8Array | string;
  getConfigDigest_asU8(): Uint8Array;
  getConfigDigest_asB64(): string;
  setConfigDigest(value: Uint8Array | string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  getEpoch(): number;
  setEpoch(value: number): void;

  getRound(): number;
  setRound(value: number): void;

  getExtraHash(): Uint8Array | string;
  getExtraHash_asU8(): Uint8Array;
  getExtraHash_asB64(): string;
  setExtraHash(value: Uint8Array | string): void;

  hasReport(): boolean;
  clearReport(): void;
  getReport(): injective_ocr_v1beta1_ocr_pb.Report | undefined;
  setReport(value?: injective_ocr_v1beta1_ocr_pb.Report): void;

  clearSignaturesList(): void;
  getSignaturesList(): Array<Uint8Array | string>;
  getSignaturesList_asU8(): Array<Uint8Array>;
  getSignaturesList_asB64(): Array<string>;
  setSignaturesList(value: Array<Uint8Array | string>): void;
  addSignatures(value: Uint8Array | string, index?: number): Uint8Array | string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTransmit.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTransmit): MsgTransmit.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTransmit, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTransmit;
  static deserializeBinaryFromReader(message: MsgTransmit, reader: jspb.BinaryReader): MsgTransmit;
}

export namespace MsgTransmit {
  export type AsObject = {
    transmitter: string,
    configDigest: Uint8Array | string,
    feedId: string,
    epoch: number,
    round: number,
    extraHash: Uint8Array | string,
    report?: injective_ocr_v1beta1_ocr_pb.Report.AsObject,
    signaturesList: Array<Uint8Array | string>,
  }
}

export class MsgTransmitResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTransmitResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTransmitResponse): MsgTransmitResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTransmitResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTransmitResponse;
  static deserializeBinaryFromReader(message: MsgTransmitResponse, reader: jspb.BinaryReader): MsgTransmitResponse;
}

export namespace MsgTransmitResponse {
  export type AsObject = {
  }
}

export class MsgFundFeedRewardPool extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setAmount(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgFundFeedRewardPool.AsObject;
  static toObject(includeInstance: boolean, msg: MsgFundFeedRewardPool): MsgFundFeedRewardPool.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgFundFeedRewardPool, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgFundFeedRewardPool;
  static deserializeBinaryFromReader(message: MsgFundFeedRewardPool, reader: jspb.BinaryReader): MsgFundFeedRewardPool;
}

export namespace MsgFundFeedRewardPool {
  export type AsObject = {
    sender: string,
    feedId: string,
    amount?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
  }
}

export class MsgFundFeedRewardPoolResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgFundFeedRewardPoolResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgFundFeedRewardPoolResponse): MsgFundFeedRewardPoolResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgFundFeedRewardPoolResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgFundFeedRewardPoolResponse;
  static deserializeBinaryFromReader(message: MsgFundFeedRewardPoolResponse, reader: jspb.BinaryReader): MsgFundFeedRewardPoolResponse;
}

export namespace MsgFundFeedRewardPoolResponse {
  export type AsObject = {
  }
}

export class MsgWithdrawFeedRewardPool extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setAmount(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgWithdrawFeedRewardPool.AsObject;
  static toObject(includeInstance: boolean, msg: MsgWithdrawFeedRewardPool): MsgWithdrawFeedRewardPool.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgWithdrawFeedRewardPool, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgWithdrawFeedRewardPool;
  static deserializeBinaryFromReader(message: MsgWithdrawFeedRewardPool, reader: jspb.BinaryReader): MsgWithdrawFeedRewardPool;
}

export namespace MsgWithdrawFeedRewardPool {
  export type AsObject = {
    sender: string,
    feedId: string,
    amount?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
  }
}

export class MsgWithdrawFeedRewardPoolResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgWithdrawFeedRewardPoolResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgWithdrawFeedRewardPoolResponse): MsgWithdrawFeedRewardPoolResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgWithdrawFeedRewardPoolResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgWithdrawFeedRewardPoolResponse;
  static deserializeBinaryFromReader(message: MsgWithdrawFeedRewardPoolResponse, reader: jspb.BinaryReader): MsgWithdrawFeedRewardPoolResponse;
}

export namespace MsgWithdrawFeedRewardPoolResponse {
  export type AsObject = {
  }
}

export class MsgSetPayees extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  clearTransmittersList(): void;
  getTransmittersList(): Array<string>;
  setTransmittersList(value: Array<string>): void;
  addTransmitters(value: string, index?: number): string;

  clearPayeesList(): void;
  getPayeesList(): Array<string>;
  setPayeesList(value: Array<string>): void;
  addPayees(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgSetPayees.AsObject;
  static toObject(includeInstance: boolean, msg: MsgSetPayees): MsgSetPayees.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgSetPayees, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgSetPayees;
  static deserializeBinaryFromReader(message: MsgSetPayees, reader: jspb.BinaryReader): MsgSetPayees;
}

export namespace MsgSetPayees {
  export type AsObject = {
    sender: string,
    feedId: string,
    transmittersList: Array<string>,
    payeesList: Array<string>,
  }
}

export class MsgSetPayeesResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgSetPayeesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgSetPayeesResponse): MsgSetPayeesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgSetPayeesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgSetPayeesResponse;
  static deserializeBinaryFromReader(message: MsgSetPayeesResponse, reader: jspb.BinaryReader): MsgSetPayeesResponse;
}

export namespace MsgSetPayeesResponse {
  export type AsObject = {
  }
}

export class MsgTransferPayeeship extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getTransmitter(): string;
  setTransmitter(value: string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  getProposed(): string;
  setProposed(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTransferPayeeship.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTransferPayeeship): MsgTransferPayeeship.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTransferPayeeship, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTransferPayeeship;
  static deserializeBinaryFromReader(message: MsgTransferPayeeship, reader: jspb.BinaryReader): MsgTransferPayeeship;
}

export namespace MsgTransferPayeeship {
  export type AsObject = {
    sender: string,
    transmitter: string,
    feedId: string,
    proposed: string,
  }
}

export class MsgTransferPayeeshipResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTransferPayeeshipResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTransferPayeeshipResponse): MsgTransferPayeeshipResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTransferPayeeshipResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTransferPayeeshipResponse;
  static deserializeBinaryFromReader(message: MsgTransferPayeeshipResponse, reader: jspb.BinaryReader): MsgTransferPayeeshipResponse;
}

export namespace MsgTransferPayeeshipResponse {
  export type AsObject = {
  }
}

export class MsgAcceptPayeeship extends jspb.Message {
  getPayee(): string;
  setPayee(value: string): void;

  getTransmitter(): string;
  setTransmitter(value: string): void;

  getFeedId(): string;
  setFeedId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgAcceptPayeeship.AsObject;
  static toObject(includeInstance: boolean, msg: MsgAcceptPayeeship): MsgAcceptPayeeship.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgAcceptPayeeship, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgAcceptPayeeship;
  static deserializeBinaryFromReader(message: MsgAcceptPayeeship, reader: jspb.BinaryReader): MsgAcceptPayeeship;
}

export namespace MsgAcceptPayeeship {
  export type AsObject = {
    payee: string,
    transmitter: string,
    feedId: string,
  }
}

export class MsgAcceptPayeeshipResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgAcceptPayeeshipResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgAcceptPayeeshipResponse): MsgAcceptPayeeshipResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgAcceptPayeeshipResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgAcceptPayeeshipResponse;
  static deserializeBinaryFromReader(message: MsgAcceptPayeeshipResponse, reader: jspb.BinaryReader): MsgAcceptPayeeshipResponse;
}

export namespace MsgAcceptPayeeshipResponse {
  export type AsObject = {
  }
}

