// source: injective/ocr/v1beta1/ocr.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
goog.exportSymbol('proto.injective.ocr.v1beta1.ContractConfig', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EpochAndRound', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EventAnswerUpdated', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EventConfigSet', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EventNewRound', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EventNewTransmission', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EventOraclePaid', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.EventTransmitted', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedConfig', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedConfigInfo', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.FeedProperties', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.GasReimbursements', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.ModuleParams', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.OracleObservationsCounts', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.Params', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.Payee', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.Report', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.ReportToSign', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.SetBatchConfigProposal', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.SetConfigProposal', null, global);
goog.exportSymbol('proto.injective.ocr.v1beta1.Transmission', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.Params.displayName = 'proto.injective.ocr.v1beta1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.FeedConfig.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedConfig.displayName = 'proto.injective.ocr.v1beta1.FeedConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedConfigInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedConfigInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedConfigInfo.displayName = 'proto.injective.ocr.v1beta1.FeedConfigInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.ModuleParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.ModuleParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.ModuleParams.displayName = 'proto.injective.ocr.v1beta1.ModuleParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.ContractConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.ContractConfig.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.ContractConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.ContractConfig.displayName = 'proto.injective.ocr.v1beta1.ContractConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.SetConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.SetConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.SetConfigProposal.displayName = 'proto.injective.ocr.v1beta1.SetConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.FeedProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.FeedProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.FeedProperties.displayName = 'proto.injective.ocr.v1beta1.FeedProperties';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.SetBatchConfigProposal.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.SetBatchConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.SetBatchConfigProposal.displayName = 'proto.injective.ocr.v1beta1.SetBatchConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.OracleObservationsCounts.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.OracleObservationsCounts, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.OracleObservationsCounts.displayName = 'proto.injective.ocr.v1beta1.OracleObservationsCounts';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.GasReimbursements = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.GasReimbursements.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.GasReimbursements, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.GasReimbursements.displayName = 'proto.injective.ocr.v1beta1.GasReimbursements';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.Payee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.Payee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.Payee.displayName = 'proto.injective.ocr.v1beta1.Payee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.Transmission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.Transmission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.Transmission.displayName = 'proto.injective.ocr.v1beta1.Transmission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EpochAndRound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EpochAndRound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EpochAndRound.displayName = 'proto.injective.ocr.v1beta1.EpochAndRound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.Report = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.Report.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.Report, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.Report.displayName = 'proto.injective.ocr.v1beta1.Report';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.ReportToSign = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.ReportToSign, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.ReportToSign.displayName = 'proto.injective.ocr.v1beta1.ReportToSign';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EventOraclePaid = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EventOraclePaid, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EventOraclePaid.displayName = 'proto.injective.ocr.v1beta1.EventOraclePaid';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EventAnswerUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EventAnswerUpdated.displayName = 'proto.injective.ocr.v1beta1.EventAnswerUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EventNewRound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EventNewRound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EventNewRound.displayName = 'proto.injective.ocr.v1beta1.EventNewRound';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EventTransmitted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EventTransmitted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EventTransmitted.displayName = 'proto.injective.ocr.v1beta1.EventTransmitted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EventNewTransmission = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.ocr.v1beta1.EventNewTransmission.repeatedFields_, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EventNewTransmission, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EventNewTransmission.displayName = 'proto.injective.ocr.v1beta1.EventNewTransmission';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.ocr.v1beta1.EventConfigSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.ocr.v1beta1.EventConfigSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.ocr.v1beta1.EventConfigSet.displayName = 'proto.injective.ocr.v1beta1.EventConfigSet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    linkDenom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payoutBlockInterval: jspb.Message.getFieldWithDefault(msg, 2, 0),
    moduleAdmin: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.Params}
 */
proto.injective.ocr.v1beta1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.Params;
  return proto.injective.ocr.v1beta1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.Params}
 */
proto.injective.ocr.v1beta1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkDenom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPayoutBlockInterval(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModuleAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLinkDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayoutBlockInterval();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getModuleAdmin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string link_denom = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.Params.prototype.getLinkDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.Params} returns this
 */
proto.injective.ocr.v1beta1.Params.prototype.setLinkDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 payout_block_interval = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.Params.prototype.getPayoutBlockInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.Params} returns this
 */
proto.injective.ocr.v1beta1.Params.prototype.setPayoutBlockInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string module_admin = 3;
 * @return {string}
 */
proto.injective.ocr.v1beta1.Params.prototype.getModuleAdmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.Params} returns this
 */
proto.injective.ocr.v1beta1.Params.prototype.setModuleAdmin = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.FeedConfig.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    signersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    transmittersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    f: jspb.Message.getFieldWithDefault(msg, 3, 0),
    onchainConfig: msg.getOnchainConfig_asB64(),
    offchainConfigVersion: jspb.Message.getFieldWithDefault(msg, 5, 0),
    offchainConfig: msg.getOffchainConfig_asB64(),
    moduleParams: (f = msg.getModuleParams()) && proto.injective.ocr.v1beta1.ModuleParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedConfig}
 */
proto.injective.ocr.v1beta1.FeedConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedConfig;
  return proto.injective.ocr.v1beta1.FeedConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedConfig}
 */
proto.injective.ocr.v1beta1.FeedConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addSigners(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTransmitters(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setF(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOnchainConfig(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffchainConfigVersion(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffchainConfig(value);
      break;
    case 7:
      var value = new proto.injective.ocr.v1beta1.ModuleParams;
      reader.readMessage(value,proto.injective.ocr.v1beta1.ModuleParams.deserializeBinaryFromReader);
      msg.setModuleParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getTransmittersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getF();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getOnchainConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getOffchainConfigVersion();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getOffchainConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getModuleParams();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.injective.ocr.v1beta1.ModuleParams.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string signers = 1;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getSignersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.setSignersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.addSigners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * repeated string transmitters = 2;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getTransmittersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.setTransmittersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.addTransmitters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.clearTransmittersList = function() {
  return this.setTransmittersList([]);
};


/**
 * optional uint32 f = 3;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getF = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.setF = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes onchain_config = 4;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOnchainConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes onchain_config = 4;
 * This is a type-conversion wrapper around `getOnchainConfig()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOnchainConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOnchainConfig()));
};


/**
 * optional bytes onchain_config = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOnchainConfig()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOnchainConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOnchainConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.setOnchainConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint64 offchain_config_version = 5;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOffchainConfigVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.setOffchainConfigVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes offchain_config = 6;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOffchainConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes offchain_config = 6;
 * This is a type-conversion wrapper around `getOffchainConfig()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOffchainConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffchainConfig()));
};


/**
 * optional bytes offchain_config = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffchainConfig()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getOffchainConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffchainConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.setOffchainConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional ModuleParams module_params = 7;
 * @return {?proto.injective.ocr.v1beta1.ModuleParams}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.getModuleParams = function() {
  return /** @type{?proto.injective.ocr.v1beta1.ModuleParams} */ (
    jspb.Message.getWrapperField(this, proto.injective.ocr.v1beta1.ModuleParams, 7));
};


/**
 * @param {?proto.injective.ocr.v1beta1.ModuleParams|undefined} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
*/
proto.injective.ocr.v1beta1.FeedConfig.prototype.setModuleParams = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.FeedConfig} returns this
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.clearModuleParams = function() {
  return this.setModuleParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.FeedConfig.prototype.hasModuleParams = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedConfigInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedConfigInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    latestConfigDigest: msg.getLatestConfigDigest_asB64(),
    f: jspb.Message.getFieldWithDefault(msg, 2, 0),
    n: jspb.Message.getFieldWithDefault(msg, 3, 0),
    configCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    latestConfigBlockNumber: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedConfigInfo;
  return proto.injective.ocr.v1beta1.FeedConfigInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedConfigInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestConfigDigest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setF(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setN(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatestConfigBlockNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedConfigInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedConfigInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatestConfigDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getF();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getN();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getConfigCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLatestConfigBlockNumber();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional bytes latest_config_digest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getLatestConfigDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes latest_config_digest = 1;
 * This is a type-conversion wrapper around `getLatestConfigDigest()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getLatestConfigDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLatestConfigDigest()));
};


/**
 * optional bytes latest_config_digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestConfigDigest()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getLatestConfigDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLatestConfigDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo} returns this
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.setLatestConfigDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint32 f = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getF = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo} returns this
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.setF = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 n = 3;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo} returns this
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 config_count = 4;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getConfigCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo} returns this
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.setConfigCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 latest_config_block_number = 5;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.getLatestConfigBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedConfigInfo} returns this
 */
proto.injective.ocr.v1beta1.FeedConfigInfo.prototype.setLatestConfigBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.ModuleParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.ModuleParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.ModuleParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    minAnswer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxAnswer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    linkPerObservation: jspb.Message.getFieldWithDefault(msg, 4, ""),
    linkPerTransmission: jspb.Message.getFieldWithDefault(msg, 5, ""),
    linkDenom: jspb.Message.getFieldWithDefault(msg, 6, ""),
    uniqueReports: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    description: jspb.Message.getFieldWithDefault(msg, 8, ""),
    feedAdmin: jspb.Message.getFieldWithDefault(msg, 9, ""),
    billingAdmin: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.ModuleParams}
 */
proto.injective.ocr.v1beta1.ModuleParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.ModuleParams;
  return proto.injective.ocr.v1beta1.ModuleParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.ModuleParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.ModuleParams}
 */
proto.injective.ocr.v1beta1.ModuleParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinAnswer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxAnswer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkPerObservation(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkPerTransmission(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkDenom(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUniqueReports(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedAdmin(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBillingAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.ModuleParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.ModuleParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.ModuleParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxAnswer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLinkPerObservation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLinkPerTransmission();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLinkDenom();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUniqueReports();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getFeedAdmin();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getBillingAdmin();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string min_answer = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getMinAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setMinAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string max_answer = 3;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getMaxAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setMaxAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string link_per_observation = 4;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getLinkPerObservation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setLinkPerObservation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string link_per_transmission = 5;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getLinkPerTransmission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setLinkPerTransmission = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string link_denom = 6;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getLinkDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setLinkDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool unique_reports = 7;
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getUniqueReports = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setUniqueReports = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string description = 8;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string feed_admin = 9;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getFeedAdmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setFeedAdmin = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string billing_admin = 10;
 * @return {string}
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.getBillingAdmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.ModuleParams} returns this
 */
proto.injective.ocr.v1beta1.ModuleParams.prototype.setBillingAdmin = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.ContractConfig.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.ContractConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.ContractConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.ContractConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    configCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    transmittersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    f: jspb.Message.getFieldWithDefault(msg, 4, 0),
    onchainConfig: msg.getOnchainConfig_asB64(),
    offchainConfigVersion: jspb.Message.getFieldWithDefault(msg, 6, 0),
    offchainConfig: msg.getOffchainConfig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.ContractConfig}
 */
proto.injective.ocr.v1beta1.ContractConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.ContractConfig;
  return proto.injective.ocr.v1beta1.ContractConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.ContractConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.ContractConfig}
 */
proto.injective.ocr.v1beta1.ContractConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfigCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSigners(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTransmitters(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setF(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOnchainConfig(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffchainConfigVersion(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffchainConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.ContractConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.ContractConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.ContractConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTransmittersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getF();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getOnchainConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getOffchainConfigVersion();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getOffchainConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional uint64 config_count = 1;
 * @return {number}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getConfigCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setConfigCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string signers = 2;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getSignersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setSignersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.addSigners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * repeated string transmitters = 3;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getTransmittersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setTransmittersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.addTransmitters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.clearTransmittersList = function() {
  return this.setTransmittersList([]);
};


/**
 * optional uint32 f = 4;
 * @return {number}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getF = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setF = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes onchain_config = 5;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOnchainConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes onchain_config = 5;
 * This is a type-conversion wrapper around `getOnchainConfig()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOnchainConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOnchainConfig()));
};


/**
 * optional bytes onchain_config = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOnchainConfig()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOnchainConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOnchainConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setOnchainConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint64 offchain_config_version = 6;
 * @return {number}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOffchainConfigVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setOffchainConfigVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes offchain_config = 7;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOffchainConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes offchain_config = 7;
 * This is a type-conversion wrapper around `getOffchainConfig()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOffchainConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffchainConfig()));
};


/**
 * optional bytes offchain_config = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffchainConfig()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.getOffchainConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffchainConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.ContractConfig} returns this
 */
proto.injective.ocr.v1beta1.ContractConfig.prototype.setOffchainConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.SetConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.SetConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.SetConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    config: (f = msg.getConfig()) && proto.injective.ocr.v1beta1.FeedConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.SetConfigProposal}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.SetConfigProposal;
  return proto.injective.ocr.v1beta1.SetConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.SetConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.SetConfigProposal}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new proto.injective.ocr.v1beta1.FeedConfig;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.SetConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.SetConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.SetConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.injective.ocr.v1beta1.FeedConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.SetConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.SetConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FeedConfig config = 3;
 * @return {?proto.injective.ocr.v1beta1.FeedConfig}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.getConfig = function() {
  return /** @type{?proto.injective.ocr.v1beta1.FeedConfig} */ (
    jspb.Message.getWrapperField(this, proto.injective.ocr.v1beta1.FeedConfig, 3));
};


/**
 * @param {?proto.injective.ocr.v1beta1.FeedConfig|undefined} value
 * @return {!proto.injective.ocr.v1beta1.SetConfigProposal} returns this
*/
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.SetConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.SetConfigProposal.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.FeedProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.FeedProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    f: jspb.Message.getFieldWithDefault(msg, 2, 0),
    onchainConfig: msg.getOnchainConfig_asB64(),
    offchainConfigVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    offchainConfig: msg.getOffchainConfig_asB64(),
    minAnswer: jspb.Message.getFieldWithDefault(msg, 6, ""),
    maxAnswer: jspb.Message.getFieldWithDefault(msg, 7, ""),
    linkPerObservation: jspb.Message.getFieldWithDefault(msg, 8, ""),
    linkPerTransmission: jspb.Message.getFieldWithDefault(msg, 9, ""),
    uniqueReports: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    description: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.FeedProperties}
 */
proto.injective.ocr.v1beta1.FeedProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.FeedProperties;
  return proto.injective.ocr.v1beta1.FeedProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.FeedProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.FeedProperties}
 */
proto.injective.ocr.v1beta1.FeedProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setF(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOnchainConfig(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOffchainConfigVersion(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffchainConfig(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinAnswer(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxAnswer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkPerObservation(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkPerTransmission(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUniqueReports(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.FeedProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.FeedProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.FeedProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getF();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getOnchainConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOffchainConfigVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOffchainConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getMinAnswer();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMaxAnswer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLinkPerObservation();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getLinkPerTransmission();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getUniqueReports();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 f = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getF = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setF = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes onchain_config = 3;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOnchainConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes onchain_config = 3;
 * This is a type-conversion wrapper around `getOnchainConfig()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOnchainConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOnchainConfig()));
};


/**
 * optional bytes onchain_config = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOnchainConfig()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOnchainConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOnchainConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setOnchainConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint64 offchain_config_version = 4;
 * @return {number}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOffchainConfigVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setOffchainConfigVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bytes offchain_config = 5;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOffchainConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes offchain_config = 5;
 * This is a type-conversion wrapper around `getOffchainConfig()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOffchainConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffchainConfig()));
};


/**
 * optional bytes offchain_config = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffchainConfig()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getOffchainConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffchainConfig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setOffchainConfig = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string min_answer = 6;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getMinAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setMinAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string max_answer = 7;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getMaxAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setMaxAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string link_per_observation = 8;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getLinkPerObservation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setLinkPerObservation = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string link_per_transmission = 9;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getLinkPerTransmission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setLinkPerTransmission = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bool unique_reports = 10;
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getUniqueReports = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setUniqueReports = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional string description = 11;
 * @return {string}
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.FeedProperties} returns this
 */
proto.injective.ocr.v1beta1.FeedProperties.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.repeatedFields_ = [3,4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.SetBatchConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    signersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    transmittersList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    linkDenom: jspb.Message.getFieldWithDefault(msg, 5, ""),
    feedPropertiesList: jspb.Message.toObjectList(msg.getFeedPropertiesList(),
    proto.injective.ocr.v1beta1.FeedProperties.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.SetBatchConfigProposal;
  return proto.injective.ocr.v1beta1.SetBatchConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSigners(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTransmitters(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkDenom(value);
      break;
    case 6:
      var value = new proto.injective.ocr.v1beta1.FeedProperties;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedProperties.deserializeBinaryFromReader);
      msg.addFeedProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.SetBatchConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSignersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTransmittersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getLinkDenom();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFeedPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.injective.ocr.v1beta1.FeedProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string signers = 3;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.getSignersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.setSignersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.addSigners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.clearSignersList = function() {
  return this.setSignersList([]);
};


/**
 * repeated string transmitters = 4;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.getTransmittersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.setTransmittersList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.addTransmitters = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.clearTransmittersList = function() {
  return this.setTransmittersList([]);
};


/**
 * optional string link_denom = 5;
 * @return {string}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.getLinkDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.setLinkDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated FeedProperties feed_properties = 6;
 * @return {!Array<!proto.injective.ocr.v1beta1.FeedProperties>}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.getFeedPropertiesList = function() {
  return /** @type{!Array<!proto.injective.ocr.v1beta1.FeedProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.ocr.v1beta1.FeedProperties, 6));
};


/**
 * @param {!Array<!proto.injective.ocr.v1beta1.FeedProperties>} value
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
*/
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.setFeedPropertiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.injective.ocr.v1beta1.FeedProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.FeedProperties}
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.addFeedProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.injective.ocr.v1beta1.FeedProperties, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.SetBatchConfigProposal} returns this
 */
proto.injective.ocr.v1beta1.SetBatchConfigProposal.prototype.clearFeedPropertiesList = function() {
  return this.setFeedPropertiesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.OracleObservationsCounts.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.OracleObservationsCounts} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.toObject = function(includeInstance, msg) {
  var f, obj = {
    countsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.OracleObservationsCounts}
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.OracleObservationsCounts;
  return proto.injective.ocr.v1beta1.OracleObservationsCounts.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.OracleObservationsCounts} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.OracleObservationsCounts}
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCounts(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.OracleObservationsCounts.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.OracleObservationsCounts} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCountsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 counts = 1;
 * @return {!Array<number>}
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.prototype.getCountsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.injective.ocr.v1beta1.OracleObservationsCounts} returns this
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.prototype.setCountsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.OracleObservationsCounts} returns this
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.prototype.addCounts = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.OracleObservationsCounts} returns this
 */
proto.injective.ocr.v1beta1.OracleObservationsCounts.prototype.clearCountsList = function() {
  return this.setCountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.GasReimbursements.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.GasReimbursements.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.GasReimbursements.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.GasReimbursements} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.GasReimbursements.toObject = function(includeInstance, msg) {
  var f, obj = {
    reimbursementsList: jspb.Message.toObjectList(msg.getReimbursementsList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.GasReimbursements}
 */
proto.injective.ocr.v1beta1.GasReimbursements.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.GasReimbursements;
  return proto.injective.ocr.v1beta1.GasReimbursements.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.GasReimbursements} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.GasReimbursements}
 */
proto.injective.ocr.v1beta1.GasReimbursements.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addReimbursements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.GasReimbursements.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.GasReimbursements.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.GasReimbursements} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.GasReimbursements.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReimbursementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated cosmos.base.v1beta1.Coin reimbursements = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.injective.ocr.v1beta1.GasReimbursements.prototype.getReimbursementsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.injective.ocr.v1beta1.GasReimbursements} returns this
*/
proto.injective.ocr.v1beta1.GasReimbursements.prototype.setReimbursementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.ocr.v1beta1.GasReimbursements.prototype.addReimbursements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.GasReimbursements} returns this
 */
proto.injective.ocr.v1beta1.GasReimbursements.prototype.clearReimbursementsList = function() {
  return this.setReimbursementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.Payee.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.Payee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.Payee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Payee.toObject = function(includeInstance, msg) {
  var f, obj = {
    transmitterAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paymentAddr: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.Payee}
 */
proto.injective.ocr.v1beta1.Payee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.Payee;
  return proto.injective.ocr.v1beta1.Payee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.Payee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.Payee}
 */
proto.injective.ocr.v1beta1.Payee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransmitterAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.Payee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.Payee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.Payee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Payee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransmitterAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPaymentAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string transmitter_addr = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.Payee.prototype.getTransmitterAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.Payee} returns this
 */
proto.injective.ocr.v1beta1.Payee.prototype.setTransmitterAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payment_addr = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.Payee.prototype.getPaymentAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.Payee} returns this
 */
proto.injective.ocr.v1beta1.Payee.prototype.setPaymentAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.Transmission.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.Transmission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.Transmission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Transmission.toObject = function(includeInstance, msg) {
  var f, obj = {
    answer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    observationsTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    transmissionTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.Transmission}
 */
proto.injective.ocr.v1beta1.Transmission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.Transmission;
  return proto.injective.ocr.v1beta1.Transmission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.Transmission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.Transmission}
 */
proto.injective.ocr.v1beta1.Transmission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObservationsTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTransmissionTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.Transmission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.Transmission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.Transmission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Transmission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getObservationsTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTransmissionTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string answer = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.Transmission.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.Transmission} returns this
 */
proto.injective.ocr.v1beta1.Transmission.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 observations_timestamp = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.Transmission.prototype.getObservationsTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.Transmission} returns this
 */
proto.injective.ocr.v1beta1.Transmission.prototype.setObservationsTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 transmission_timestamp = 3;
 * @return {number}
 */
proto.injective.ocr.v1beta1.Transmission.prototype.getTransmissionTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.Transmission} returns this
 */
proto.injective.ocr.v1beta1.Transmission.prototype.setTransmissionTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EpochAndRound.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EpochAndRound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EpochAndRound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EpochAndRound.toObject = function(includeInstance, msg) {
  var f, obj = {
    epoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    round: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EpochAndRound}
 */
proto.injective.ocr.v1beta1.EpochAndRound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EpochAndRound;
  return proto.injective.ocr.v1beta1.EpochAndRound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EpochAndRound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EpochAndRound}
 */
proto.injective.ocr.v1beta1.EpochAndRound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EpochAndRound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EpochAndRound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EpochAndRound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EpochAndRound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 epoch = 1;
 * @return {number}
 */
proto.injective.ocr.v1beta1.EpochAndRound.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.EpochAndRound} returns this
 */
proto.injective.ocr.v1beta1.EpochAndRound.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 round = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.EpochAndRound.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.EpochAndRound} returns this
 */
proto.injective.ocr.v1beta1.EpochAndRound.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.Report.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.Report.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.Report.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.Report} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Report.toObject = function(includeInstance, msg) {
  var f, obj = {
    observationsTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    observers: msg.getObservers_asB64(),
    observationsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.Report}
 */
proto.injective.ocr.v1beta1.Report.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.Report;
  return proto.injective.ocr.v1beta1.Report.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.Report} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.Report}
 */
proto.injective.ocr.v1beta1.Report.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObservationsTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setObservers(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addObservations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.Report.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.Report.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.Report} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.Report.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObservationsTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getObservers_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getObservationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional int64 observations_timestamp = 1;
 * @return {number}
 */
proto.injective.ocr.v1beta1.Report.prototype.getObservationsTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.Report} returns this
 */
proto.injective.ocr.v1beta1.Report.prototype.setObservationsTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes observers = 2;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.Report.prototype.getObservers = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes observers = 2;
 * This is a type-conversion wrapper around `getObservers()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.Report.prototype.getObservers_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getObservers()));
};


/**
 * optional bytes observers = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObservers()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.Report.prototype.getObservers_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getObservers()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.Report} returns this
 */
proto.injective.ocr.v1beta1.Report.prototype.setObservers = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated string observations = 3;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.Report.prototype.getObservationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.Report} returns this
 */
proto.injective.ocr.v1beta1.Report.prototype.setObservationsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.Report} returns this
 */
proto.injective.ocr.v1beta1.Report.prototype.addObservations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.Report} returns this
 */
proto.injective.ocr.v1beta1.Report.prototype.clearObservationsList = function() {
  return this.setObservationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.ReportToSign.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.ReportToSign} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.ReportToSign.toObject = function(includeInstance, msg) {
  var f, obj = {
    configDigest: msg.getConfigDigest_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0),
    round: jspb.Message.getFieldWithDefault(msg, 3, 0),
    extraHash: msg.getExtraHash_asB64(),
    report: msg.getReport_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.ReportToSign}
 */
proto.injective.ocr.v1beta1.ReportToSign.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.ReportToSign;
  return proto.injective.ocr.v1beta1.ReportToSign.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.ReportToSign} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.ReportToSign}
 */
proto.injective.ocr.v1beta1.ReportToSign.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigDigest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRound(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtraHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReport(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.ReportToSign.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.ReportToSign} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.ReportToSign.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRound();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExtraHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getReport_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes config_digest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getConfigDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes config_digest = 1;
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getConfigDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigDigest()));
};


/**
 * optional bytes config_digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getConfigDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.ReportToSign} returns this
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.setConfigDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.ReportToSign} returns this
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 round = 3;
 * @return {number}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getRound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.ReportToSign} returns this
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.setRound = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes extra_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getExtraHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes extra_hash = 4;
 * This is a type-conversion wrapper around `getExtraHash()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getExtraHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtraHash()));
};


/**
 * optional bytes extra_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraHash()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getExtraHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtraHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.ReportToSign} returns this
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.setExtraHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes report = 5;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getReport = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes report = 5;
 * This is a type-conversion wrapper around `getReport()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getReport_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReport()));
};


/**
 * optional bytes report = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReport()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.getReport_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReport()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.ReportToSign} returns this
 */
proto.injective.ocr.v1beta1.ReportToSign.prototype.setReport = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EventOraclePaid.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EventOraclePaid} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventOraclePaid.toObject = function(includeInstance, msg) {
  var f, obj = {
    transmitterAddr: jspb.Message.getFieldWithDefault(msg, 1, ""),
    payeeAddr: jspb.Message.getFieldWithDefault(msg, 2, ""),
    amount: (f = msg.getAmount()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EventOraclePaid}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EventOraclePaid;
  return proto.injective.ocr.v1beta1.EventOraclePaid.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EventOraclePaid} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EventOraclePaid}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransmitterAddr(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayeeAddr(value);
      break;
    case 3:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EventOraclePaid.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EventOraclePaid} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventOraclePaid.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransmitterAddr();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPayeeAddr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string transmitter_addr = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.getTransmitterAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventOraclePaid} returns this
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.setTransmitterAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string payee_addr = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.getPayeeAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventOraclePaid} returns this
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.setPayeeAddr = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional cosmos.base.v1beta1.Coin amount = 3;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.getAmount = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 3));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.ocr.v1beta1.EventOraclePaid} returns this
*/
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.EventOraclePaid} returns this
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.EventOraclePaid.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EventAnswerUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EventAnswerUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    current: jspb.Message.getFieldWithDefault(msg, 1, ""),
    roundId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EventAnswerUpdated}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EventAnswerUpdated;
  return proto.injective.ocr.v1beta1.EventAnswerUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EventAnswerUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EventAnswerUpdated}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoundId(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EventAnswerUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EventAnswerUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoundId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string current = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.getCurrent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventAnswerUpdated} returns this
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.setCurrent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string round_id = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.getRoundId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventAnswerUpdated} returns this
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.setRoundId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp updated_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.getUpdatedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.injective.ocr.v1beta1.EventAnswerUpdated} returns this
*/
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.EventAnswerUpdated} returns this
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.clearUpdatedAt = function() {
  return this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.EventAnswerUpdated.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EventNewRound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EventNewRound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventNewRound.toObject = function(includeInstance, msg) {
  var f, obj = {
    roundId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startedBy: jspb.Message.getFieldWithDefault(msg, 2, ""),
    startedAt: (f = msg.getStartedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EventNewRound}
 */
proto.injective.ocr.v1beta1.EventNewRound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EventNewRound;
  return proto.injective.ocr.v1beta1.EventNewRound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EventNewRound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EventNewRound}
 */
proto.injective.ocr.v1beta1.EventNewRound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRoundId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStartedBy(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EventNewRound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EventNewRound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventNewRound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRoundId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartedBy();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStartedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string round_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.getRoundId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventNewRound} returns this
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.setRoundId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string started_by = 2;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.getStartedBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventNewRound} returns this
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.setStartedBy = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp started_at = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.getStartedAt = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.injective.ocr.v1beta1.EventNewRound} returns this
*/
proto.injective.ocr.v1beta1.EventNewRound.prototype.setStartedAt = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.EventNewRound} returns this
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.clearStartedAt = function() {
  return this.setStartedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.EventNewRound.prototype.hasStartedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EventTransmitted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EventTransmitted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventTransmitted.toObject = function(includeInstance, msg) {
  var f, obj = {
    configDigest: msg.getConfigDigest_asB64(),
    epoch: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EventTransmitted}
 */
proto.injective.ocr.v1beta1.EventTransmitted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EventTransmitted;
  return proto.injective.ocr.v1beta1.EventTransmitted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EventTransmitted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EventTransmitted}
 */
proto.injective.ocr.v1beta1.EventTransmitted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigDigest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpoch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EventTransmitted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EventTransmitted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventTransmitted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEpoch();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes config_digest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.getConfigDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes config_digest = 1;
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.getConfigDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigDigest()));
};


/**
 * optional bytes config_digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.getConfigDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.EventTransmitted} returns this
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.setConfigDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 epoch = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.getEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.EventTransmitted} returns this
 */
proto.injective.ocr.v1beta1.EventTransmitted.prototype.setEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.ocr.v1beta1.EventNewTransmission.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EventNewTransmission.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EventNewTransmission} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventNewTransmission.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    aggregatorRoundId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    answer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    transmitter: jspb.Message.getFieldWithDefault(msg, 4, ""),
    observationsTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    observationsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    observers: msg.getObservers_asB64(),
    configDigest: msg.getConfigDigest_asB64(),
    epochAndRound: (f = msg.getEpochAndRound()) && proto.injective.ocr.v1beta1.EpochAndRound.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EventNewTransmission;
  return proto.injective.ocr.v1beta1.EventNewTransmission.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EventNewTransmission} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAggregatorRoundId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransmitter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setObservationsTimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addObservations(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setObservers(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigDigest(value);
      break;
    case 9:
      var value = new proto.injective.ocr.v1beta1.EpochAndRound;
      reader.readMessage(value,proto.injective.ocr.v1beta1.EpochAndRound.deserializeBinaryFromReader);
      msg.setEpochAndRound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EventNewTransmission.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EventNewTransmission} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventNewTransmission.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAggregatorRoundId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTransmitter();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getObservationsTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getObservationsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getObservers_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getConfigDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = message.getEpochAndRound();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.injective.ocr.v1beta1.EpochAndRound.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 aggregator_round_id = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getAggregatorRoundId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setAggregatorRoundId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string answer = 3;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string transmitter = 4;
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getTransmitter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setTransmitter = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 observations_timestamp = 5;
 * @return {number}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getObservationsTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setObservationsTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated string observations = 6;
 * @return {!Array<string>}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getObservationsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setObservationsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.addObservations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.clearObservationsList = function() {
  return this.setObservationsList([]);
};


/**
 * optional bytes observers = 7;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getObservers = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes observers = 7;
 * This is a type-conversion wrapper around `getObservers()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getObservers_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getObservers()));
};


/**
 * optional bytes observers = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getObservers()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getObservers_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getObservers()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setObservers = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional bytes config_digest = 8;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getConfigDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes config_digest = 8;
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getConfigDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigDigest()));
};


/**
 * optional bytes config_digest = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getConfigDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setConfigDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 8, value);
};


/**
 * optional EpochAndRound epoch_and_round = 9;
 * @return {?proto.injective.ocr.v1beta1.EpochAndRound}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.getEpochAndRound = function() {
  return /** @type{?proto.injective.ocr.v1beta1.EpochAndRound} */ (
    jspb.Message.getWrapperField(this, proto.injective.ocr.v1beta1.EpochAndRound, 9));
};


/**
 * @param {?proto.injective.ocr.v1beta1.EpochAndRound|undefined} value
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
*/
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.setEpochAndRound = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.EventNewTransmission} returns this
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.clearEpochAndRound = function() {
  return this.setEpochAndRound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.EventNewTransmission.prototype.hasEpochAndRound = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.ocr.v1beta1.EventConfigSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.ocr.v1beta1.EventConfigSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventConfigSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    configDigest: msg.getConfigDigest_asB64(),
    previousConfigBlockNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    config: (f = msg.getConfig()) && proto.injective.ocr.v1beta1.FeedConfig.toObject(includeInstance, f),
    configInfo: (f = msg.getConfigInfo()) && proto.injective.ocr.v1beta1.FeedConfigInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet}
 */
proto.injective.ocr.v1beta1.EventConfigSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.ocr.v1beta1.EventConfigSet;
  return proto.injective.ocr.v1beta1.EventConfigSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.ocr.v1beta1.EventConfigSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet}
 */
proto.injective.ocr.v1beta1.EventConfigSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfigDigest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPreviousConfigBlockNumber(value);
      break;
    case 3:
      var value = new proto.injective.ocr.v1beta1.FeedConfig;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    case 4:
      var value = new proto.injective.ocr.v1beta1.FeedConfigInfo;
      reader.readMessage(value,proto.injective.ocr.v1beta1.FeedConfigInfo.deserializeBinaryFromReader);
      msg.setConfigInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.ocr.v1beta1.EventConfigSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.ocr.v1beta1.EventConfigSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.ocr.v1beta1.EventConfigSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfigDigest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPreviousConfigBlockNumber();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.injective.ocr.v1beta1.FeedConfig.serializeBinaryToWriter
    );
  }
  f = message.getConfigInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.injective.ocr.v1beta1.FeedConfigInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes config_digest = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.getConfigDigest = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes config_digest = 1;
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {string}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.getConfigDigest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfigDigest()));
};


/**
 * optional bytes config_digest = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfigDigest()`
 * @return {!Uint8Array}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.getConfigDigest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfigDigest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet} returns this
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.setConfigDigest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 previous_config_block_number = 2;
 * @return {number}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.getPreviousConfigBlockNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet} returns this
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.setPreviousConfigBlockNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional FeedConfig config = 3;
 * @return {?proto.injective.ocr.v1beta1.FeedConfig}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.getConfig = function() {
  return /** @type{?proto.injective.ocr.v1beta1.FeedConfig} */ (
    jspb.Message.getWrapperField(this, proto.injective.ocr.v1beta1.FeedConfig, 3));
};


/**
 * @param {?proto.injective.ocr.v1beta1.FeedConfig|undefined} value
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet} returns this
*/
proto.injective.ocr.v1beta1.EventConfigSet.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet} returns this
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional FeedConfigInfo config_info = 4;
 * @return {?proto.injective.ocr.v1beta1.FeedConfigInfo}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.getConfigInfo = function() {
  return /** @type{?proto.injective.ocr.v1beta1.FeedConfigInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.ocr.v1beta1.FeedConfigInfo, 4));
};


/**
 * @param {?proto.injective.ocr.v1beta1.FeedConfigInfo|undefined} value
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet} returns this
*/
proto.injective.ocr.v1beta1.EventConfigSet.prototype.setConfigInfo = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.ocr.v1beta1.EventConfigSet} returns this
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.clearConfigInfo = function() {
  return this.setConfigInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.ocr.v1beta1.EventConfigSet.prototype.hasConfigInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.injective.ocr.v1beta1);
