import JSBI from 'jsbi';
import { Token, Percent, TokenAmount, ChainId } from '@traderjoe-xyz/sdk';
import { LBPair, LBPairReservesAndId, LBPairFeeParameters, LiquidityDistribution, BinReserves } from '../types';
import { Hex, PublicClient } from 'viem';
/** Class representing a pair of tokens. */
export declare class PairV2 {
    readonly token0: Token;
    readonly token1: Token;
    constructor(tokenA: Token, tokenB: Token);
    /**
     * Returns all available LBPairs for this pair
     *
     * @param {boolean} isV21
     * @param {PublicClient} publicClient
     * @param {ChainId} chainId
     * @returns {Promise<LBPair[]>}
     */
    fetchAvailableLBPairs(isV21: boolean, publicClient: PublicClient, chainId: ChainId): Promise<readonly LBPair[]>;
    /**
     * Fetches LBPair for token0, token1, and given binStep
     *
     * @param {number} binStep
     * @param {boolean} isV21
     * @param {PublicClient} publicClient
     * @param {ChainId} chainId
     * @returns {Promise<LBPair>}
     */
    fetchLBPair(binStep: number, isV21: boolean, publicClient: PublicClient, chainId: ChainId): Promise<LBPair>;
    /**
     * Checks whether this pair equals to that provided in the param
     *
     * @param {PairV2} pair
     * @returns {boolean} true if equal, otherwise false
     */
    equals(pair: PairV2): boolean;
    /**
     * @static
     * Returns all possible combination of token pairs
     *
     * @param {Token} inputToken
     * @param {Token} outputToken
     * @param {Token[]} bases
     * @returns {[Token, Token][]}
     */
    static createAllTokenPairs(inputToken: Token, outputToken: Token, bases: Token[]): [Token, Token][];
    /**
     * @static
     * Returns the initialized pairs given a list of token pairs
     *
     * @param {[Token, Token][]} tokenPairs
     * @returns {PairV2[]}
     */
    static initPairs(tokenPairs: [Token, Token][]): PairV2[];
    /**
     * Fetches the reserves active bin id for the LBPair
     *
     * @param {Hex} LBPairAddr
     * @param {boolean} isV21
     * @param {PublicClient} publicClient
     * @returns {Promise<LBPairReservesAndId>}
     */
    static getLBPairReservesAndId(LBPairAddr: Hex, isV21: boolean, publicClient: PublicClient): Promise<LBPairReservesAndId>;
    /**
     * Fetches the fee parameters for the LBPair
     *
     * @param {Hex} LBPairAddr
     * @param {PublicClient} publicClient
     * @returns {Promise<LBPairFeeParameters>}
     */
    static getFeeParameters(LBPairAddr: Hex, publicClient: PublicClient): Promise<LBPairFeeParameters>;
    /**
     * Calculate amountX and amountY
     *
     * @param {number[]} binIds
     * @param {number[]} activeBin
     * @param {BinReserves[]} bins
     * @param {bigint[]} totalSupplies
     * @param {string[]} liquidity
     * @returns
     */
    static calculateAmounts(binIds: number[], activeBin: number, bins: BinReserves[], totalSupplies: bigint[], liquidity: string[]): {
        amountX: JSBI;
        amountY: JSBI;
    };
    /**
     * Returns the amount and distribution args for on-chain addLiquidity() method
     *
     * @param binStep
     * @param token0Amount
     * @param token1Amount
     * @param amountSlippage
     * @param priceSlippage
     * @param liquidityDistribution
     * @returns
     */
    addLiquidityParameters(binStep: number, token0Amount: TokenAmount, token1Amount: TokenAmount, amountSlippage: Percent, priceSlippage: Percent, liquidityDistribution: LiquidityDistribution): {
        tokenX: Token;
        tokenY: Token;
        amountX: string;
        amountY: string;
        amountXMin: string;
        amountYMin: string;
        idSlippage: number;
        deltaIds: number[];
        distributionX: bigint[];
        distributionY: bigint[];
    };
    /**
     * Calculates amountX, amountY, amountXMin, and amountYMin needed for on-chain removeLiquidity() method
     *
     * @param {number[]} userPositionIds - List of binIds that user has position
     * @param {number} activeBin - The active bin id for the LBPair
     * @param {Bin[]} bins - List of bins whose indices match those of userPositionIds
     * @param {BigNumber[]} totalSupplies - List of bin's total supplies whose indices match those of userPositionIds
     * @param {string[]} amountsToRemove - List of amounts specified by the user to remove in each of their position
     * @param {Percent} amountSlippage - The amounts slippage used to calculate amountXMin and amountYMin
     * @returns
     */
    calculateAmountsToRemove(userPositionIds: number[], activeBin: number, bins: BinReserves[], totalSupplies: bigint[], amountsToRemove: string[], amountSlippage: Percent): {
        amountX: JSBI;
        amountY: JSBI;
        amountXMin: JSBI;
        amountYMin: JSBI;
    };
}
