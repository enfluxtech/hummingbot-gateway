import{Channel as t}from"../../internal/Channel.js";import{ChannelEventSource as e}from"../../internal/ChannelEventSource.js";import{createMemoizedFetcher as r,hasNumberChange as a}from"../../internal/createMemoizedFetcher.js";import{DEFAULT_PERIOD as n}from"../../internal/config.js";import{PositionDraft as o}from"../position/PositionDraft.js";import"big.js";import{invariant as i}from"../../utils/errorChecker.js";import{big2BigNumberAndScaleUp as c}from"../../utils/formatters.js";import"../../utils/tick.js";import{poll as s}from"../../utils/poll.js";import"../../constants/envVariables.js";import{BIG_ONE as u}from"../../constants/numbers.js";import{utils as p,constants as m}from"ethers";import{ContractName as l}from"../../contracts/Contracts.js";import{LiquidityDraft as d}from"../liquidity/LiquidityDraft.js";import{UnauthorizedError as h}from"../../errors/errors.js";import{getTransaction as k}from"../../transactionSender/index.js";class f extends t{constructor(t){super(t.channelRegistry),this._perp=t,this._cache=new Map}createPositionDraft({tickerSymbol:t,amountInput:e,isAmountInputBase:r,side:a}){const n=this._perp.markets.getMarket({tickerSymbol:t});return new o(this._perp,{market:n,amountInput:e,isAmountInputBase:r,side:a})}createLiquidityDraft({tickerSymbol:t,lowerTick:e,upperTick:r,rawQuoteAmount:a,rawBaseAmount:n}){const o=this._perp.markets.getMarket({tickerSymbol:t});return new d({perp:this._perp,market:o,lowerTick:e,upperTick:r,rawQuoteAmount:a,rawBaseAmount:n})}async openPosition(t,e,r){i(this._perp.hasConnected(),(()=>new h({functionName:"openPosition"})));const a=await t.getOppositeAmountBound(e),n=r?p.formatBytes32String(r):m.HashZero;return k({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:l.CLEARINGHOUSE,contractFunctionName:"openPosition",args:[{baseToken:t.market.baseAddress,isBaseToQuote:t.isBaseToQuote,isExactInput:t.isExactInput,amount:c(t.amountInput),oppositeAmountBound:c(a),sqrtPriceLimitX96:0,deadline:m.MaxUint256,referralCode:n}]})}async closePosition(t,e,r){i(this._perp.hasConnected(),(()=>new h({functionName:"closePosition"})));const a=await t.getOppositeAmountBound(e),n=r?p.formatBytes32String(r):m.HashZero;return k({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:l.CLEARINGHOUSE,contractFunctionName:"closePosition",args:[{baseToken:t.market.baseAddress,oppositeAmountBound:c(a),sqrtPriceLimitX96:0,deadline:m.MaxUint256,referralCode:n}]})}async addLiquidity(t,e){i(this._perp.hasConnected(),(()=>new h({functionName:"addLiquidity"})));const r=await t.getBaseAmount(),a=await t.getQuoteAmount(),n=c(r),o=c(a),s=c(r.mul(u.sub(e))),p=c(a.mul(u.sub(e)));return k({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:l.CLEARINGHOUSE,contractFunctionName:"addLiquidity",args:[{baseToken:t.market.baseAddress,base:n,quote:o,lowerTick:t.lowerTick,upperTick:t.upperTick,minBase:s,minQuote:p,deadline:m.MaxUint256,useTakerBalance:!1}]})}async removeLiquidity(t,e,r){i(this._perp.hasConnected(),(()=>new h({functionName:"removeLiquidity"})));const{amountBase:a,amountQuote:n}=await t.getLiquidityAmounts(),o=c(a.mul(e).mul(u.sub(r))),s=c(n.mul(e).mul(u.sub(r)));return k({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:l.CLEARINGHOUSE,contractFunctionName:"removeLiquidity",args:[{baseToken:t.market.baseAddress,lowerTick:t.lowerTick,upperTick:t.upperTick,liquidity:c(t.liquidity.mul(e),0),minBase:o,minQuote:s,deadline:m.MaxUint256}]})}async quitMarket(t){i(this._perp.hasConnected(),(()=>new h({functionName:"quitMarket"})));const e=this._perp.markets.getMarket({tickerSymbol:t}).baseAddress,r=this._perp.wallet.account;return k({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:l.CLEARINGHOUSE,contractFunctionName:"quitMarket",args:[r,e]})}_getEventSourceMap(){const t=this._createFetchAndEmitAccountValueUpdated();return{updated:new e({eventSourceStarter:()=>{var e,r;return s(t,(null===(r=null===(e=this._perp.moduleConfigs)||void 0===e?void 0:e.clearingHouse)||void 0===r?void 0:r.period)||n).cancel},initEventEmitter:()=>t(!0,!0)})}}async _fetchUpdateData(t){try{return await t()}catch(t){this.emit("updateError",{error:t})}}_createFetchAndEmitAccountValueUpdated(){return r((()=>this._fetchUpdateData((()=>this._fetch("accountValue",{cache:!1})))),(()=>this.emit("updated",this)),((t,e)=>!t||!e||a(t,e)))}async getAccountValue({cache:t=!0}={}){return this._fetch("accountValue",{cache:t})}async _fetch(t,{cache:e=!0}={}){if(this._cache.has(t)&&e)return this._cache.get(t);let r;if("accountValue"===t)i(this._perp.hasConnected(),(()=>new h({functionName:"getAccountValue"}))),r=await this._perp.contractReader.getAccountValue(this._perp.wallet.account);return this._cache.set(t,r),r}}export{f as ClearingHouse};
//# sourceMappingURL=ClearingHouse.js.map
