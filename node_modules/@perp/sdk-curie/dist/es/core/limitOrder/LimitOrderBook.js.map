{"version":3,"file":"LimitOrderBook.js","sources":["../../../../src/core/limitOrder/LimitOrderBook.ts"],"sourcesContent":["import Big from \"big.js\"\nimport { BigNumber } from \"ethers\"\nimport { BIG_ZERO } from \"../../constants\"\nimport { ContractName } from \"../../contracts\"\nimport { LimitOrderBook as ContractLimitOrderBook } from \"../../contracts/type\"\nimport { UnauthorizedError } from \"../../errors\"\nimport { getTransaction } from \"../../transactionSender\"\nimport { big2BigNumberAndScaleUp, invariant } from \"../../utils\"\nimport type { PerpetualProtocol } from \"../PerpetualProtocol\"\n\nexport interface ILimitOrder {\n    orderType: number\n    salt: Big\n    trader: string\n    baseToken: string\n    isBaseToQuote: boolean\n    isExactInput: boolean\n    amount: Big\n    oppositeAmountBound: Big\n    deadline: Big\n    sqrtPriceLimitX96: Big\n    referralCode: string\n    reduceOnly: boolean\n    roundIdWhenCreated: Big\n    triggerPrice: Big\n}\n\nexport class LimitOrderBook {\n    constructor(protected readonly _perp: PerpetualProtocol) {}\n\n    async cancelLimitOrder(order: ILimitOrder) {\n        invariant(this._perp.hasConnected(), () => new UnauthorizedError({ functionName: \"cancelLimitOrder\" }))\n\n        return getTransaction<ContractLimitOrderBook, \"cancelLimitOrder\">({\n            account: this._perp.wallet.account,\n            contract: this._perp.contracts.limitOrderBook,\n            contractName: ContractName.CLEARINGHOUSE,\n            contractFunctionName: \"cancelLimitOrder\",\n            args: [\n                {\n                    orderType: order.orderType,\n                    salt: Number(order.salt),\n                    trader: order.trader,\n                    baseToken: order.baseToken,\n                    isBaseToQuote: order.isBaseToQuote,\n                    isExactInput: order.isExactInput,\n                    amount: big2BigNumberAndScaleUp(order.amount, 0),\n                    oppositeAmountBound: big2BigNumberAndScaleUp(order.oppositeAmountBound, 0),\n                    deadline: big2BigNumberAndScaleUp(order.deadline, 0),\n                    sqrtPriceLimitX96: big2BigNumberAndScaleUp(order.sqrtPriceLimitX96, 0),\n                    // NOTE: referralCode must be byte32string which is returned from appsync\n                    referralCode: order.referralCode,\n                    reduceOnly: order.reduceOnly,\n                    roundIdWhenCreated: big2BigNumberAndScaleUp(order.roundIdWhenCreated, 0),\n                    triggerPrice: big2BigNumberAndScaleUp(order.triggerPrice, 0),\n                },\n            ],\n        })\n    }\n\n    async getPriceFeedLatestRound({ tickerSymbol }: { tickerSymbol: string }): Promise<string | undefined> {\n        const market = this._perp.markets.getMarket({ tickerSymbol })\n        try {\n            // NOTE: Expected to throw error when is not using ChainLink as priceFeed since there's no `getPriceFeedAggregator` in other price feed.\n            // NOTE: On-demand check if price feed supports this for now, better to batch check all markets during sdk init.\n            const { contract: aggregatorContract } = await market.getPriceFeedAggregator()\n            const { roundId } = await aggregatorContract.latestRoundData()\n            return roundId.toString()\n        } catch (error) {\n            return undefined\n        }\n    }\n}\n"],"names":["LimitOrderBook","constructor","_perp","this","async","order","invariant","hasConnected","UnauthorizedError","functionName","getTransaction","account","wallet","contract","contracts","limitOrderBook","contractName","ContractName","CLEARINGHOUSE","contractFunctionName","args","orderType","salt","Number","trader","baseToken","isBaseToQuote","isExactInput","amount","big2BigNumberAndScaleUp","oppositeAmountBound","deadline","sqrtPriceLimitX96","referralCode","reduceOnly","roundIdWhenCreated","triggerPrice","tickerSymbol","market","markets","getMarket","aggregatorContract","getPriceFeedAggregator","roundId","latestRoundData","toString","error"],"mappings":"ibA2BaA,EACTC,YAA+BC,GAAAC,KAAKD,MAALA,CAA4B,CAE3DE,uBAAuBC,GAGnB,OAFAC,EAAUH,KAAKD,MAAMK,gBAAgB,IAAM,IAAIC,EAAkB,CAAEC,aAAc,uBAE1EC,EAA2D,CAC9DC,QAASR,KAAKD,MAAMU,OAAOD,QAC3BE,SAAUV,KAAKD,MAAMY,UAAUC,eAC/BC,aAAcC,EAAaC,cAC3BC,qBAAsB,mBACtBC,KAAM,CACF,CACIC,UAAWhB,EAAMgB,UACjBC,KAAMC,OAAOlB,EAAMiB,MACnBE,OAAQnB,EAAMmB,OACdC,UAAWpB,EAAMoB,UACjBC,cAAerB,EAAMqB,cACrBC,aAActB,EAAMsB,aACpBC,OAAQC,EAAwBxB,EAAMuB,OAAQ,GAC9CE,oBAAqBD,EAAwBxB,EAAMyB,oBAAqB,GACxEC,SAAUF,EAAwBxB,EAAM0B,SAAU,GAClDC,kBAAmBH,EAAwBxB,EAAM2B,kBAAmB,GAEpEC,aAAc5B,EAAM4B,aACpBC,WAAY7B,EAAM6B,WAClBC,mBAAoBN,EAAwBxB,EAAM8B,mBAAoB,GACtEC,aAAcP,EAAwBxB,EAAM+B,aAAc,MAIzE,CAEDhC,+BAA8BiC,aAAEA,IAC5B,MAAMC,EAASnC,KAAKD,MAAMqC,QAAQC,UAAU,CAAEH,iBAC9C,IAGI,MAAQxB,SAAU4B,SAA6BH,EAAOI,0BAChDC,QAAEA,SAAkBF,EAAmBG,kBAC7C,OAAOD,EAAQE,UAGlB,CAFC,MAAOC,GACL,MACH,CACJ"}