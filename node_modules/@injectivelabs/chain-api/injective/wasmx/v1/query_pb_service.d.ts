// package: injective.wasmx.v1
// file: injective/wasmx/v1/query.proto

import * as injective_wasmx_v1_query_pb from "../../../injective/wasmx/v1/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryWasmxParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_wasmx_v1_query_pb.QueryWasmxParamsRequest;
  readonly responseType: typeof injective_wasmx_v1_query_pb.QueryWasmxParamsResponse;
};

type QueryWasmxModuleState = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_wasmx_v1_query_pb.QueryModuleStateRequest;
  readonly responseType: typeof injective_wasmx_v1_query_pb.QueryModuleStateResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly WasmxParams: QueryWasmxParams;
  static readonly WasmxModuleState: QueryWasmxModuleState;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  wasmxParams(
    requestMessage: injective_wasmx_v1_query_pb.QueryWasmxParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_wasmx_v1_query_pb.QueryWasmxParamsResponse|null) => void
  ): UnaryResponse;
  wasmxParams(
    requestMessage: injective_wasmx_v1_query_pb.QueryWasmxParamsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_wasmx_v1_query_pb.QueryWasmxParamsResponse|null) => void
  ): UnaryResponse;
  wasmxModuleState(
    requestMessage: injective_wasmx_v1_query_pb.QueryModuleStateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_wasmx_v1_query_pb.QueryModuleStateResponse|null) => void
  ): UnaryResponse;
  wasmxModuleState(
    requestMessage: injective_wasmx_v1_query_pb.QueryModuleStateRequest,
    callback: (error: ServiceError|null, responseMessage: injective_wasmx_v1_query_pb.QueryModuleStateResponse|null) => void
  ): UnaryResponse;
}

