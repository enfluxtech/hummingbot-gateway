// source: injective/tokenfactory/v1beta1/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var cosmos_bank_v1beta1_bank_pb = require('../../../cosmos/bank/v1beta1/bank_pb.js');
goog.object.extend(proto, cosmos_bank_v1beta1_bank_pb);
var injective_tokenfactory_v1beta1_authorityMetadata_pb = require('../../../injective/tokenfactory/v1beta1/authorityMetadata_pb.js');
goog.object.extend(proto, injective_tokenfactory_v1beta1_authorityMetadata_pb);
goog.exportSymbol('proto.injective.tokenfactory.v1beta1.EventBurnTFDenom', null, global);
goog.exportSymbol('proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin', null, global);
goog.exportSymbol('proto.injective.tokenfactory.v1beta1.EventCreateTFDenom', null, global);
goog.exportSymbol('proto.injective.tokenfactory.v1beta1.EventMintTFDenom', null, global);
goog.exportSymbol('proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.tokenfactory.v1beta1.EventCreateTFDenom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.displayName = 'proto.injective.tokenfactory.v1beta1.EventCreateTFDenom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.tokenfactory.v1beta1.EventMintTFDenom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.tokenfactory.v1beta1.EventMintTFDenom.displayName = 'proto.injective.tokenfactory.v1beta1.EventMintTFDenom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.tokenfactory.v1beta1.EventBurnTFDenom, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.displayName = 'proto.injective.tokenfactory.v1beta1.EventBurnTFDenom';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.displayName = 'proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.displayName = 'proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, ""),
    denom: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom}
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.tokenfactory.v1beta1.EventCreateTFDenom;
  return proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom}
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom} returns this
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string denom = 2;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventCreateTFDenom} returns this
 */
proto.injective.tokenfactory.v1beta1.EventCreateTFDenom.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.tokenfactory.v1beta1.EventMintTFDenom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipientAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: (f = msg.getAmount()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.tokenfactory.v1beta1.EventMintTFDenom;
  return proto.injective.tokenfactory.v1beta1.EventMintTFDenom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientAddress(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.tokenfactory.v1beta1.EventMintTFDenom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipientAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string recipient_address = 1;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.getRecipientAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom} returns this
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.setRecipientAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional cosmos.base.v1beta1.Coin amount = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.getAmount = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom} returns this
*/
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.tokenfactory.v1beta1.EventMintTFDenom} returns this
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.tokenfactory.v1beta1.EventMintTFDenom.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.toObject = function(includeInstance, msg) {
  var f, obj = {
    burnerAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: (f = msg.getAmount()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.tokenfactory.v1beta1.EventBurnTFDenom;
  return proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBurnerAddress(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBurnerAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string burner_address = 1;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.getBurnerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom} returns this
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.setBurnerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional cosmos.base.v1beta1.Coin amount = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.getAmount = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom} returns this
*/
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.setAmount = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.tokenfactory.v1beta1.EventBurnTFDenom} returns this
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.clearAmount = function() {
  return this.setAmount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.tokenfactory.v1beta1.EventBurnTFDenom.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newAdminAddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin}
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin;
  return proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin}
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewAdminAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewAdminAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin} returns this
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string new_admin_address = 2;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.prototype.getNewAdminAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin} returns this
 */
proto.injective.tokenfactory.v1beta1.EventChangeTFAdmin.prototype.setNewAdminAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    metadata: (f = msg.getMetadata()) && cosmos_bank_v1beta1_bank_pb.Metadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata;
  return proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = new cosmos_bank_v1beta1_bank_pb.Metadata;
      reader.readMessage(value,cosmos_bank_v1beta1_bank_pb.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_bank_v1beta1_bank_pb.Metadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata} returns this
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional cosmos.bank.v1beta1.Metadata metadata = 2;
 * @return {?proto.cosmos.bank.v1beta1.Metadata}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.getMetadata = function() {
  return /** @type{?proto.cosmos.bank.v1beta1.Metadata} */ (
    jspb.Message.getWrapperField(this, cosmos_bank_v1beta1_bank_pb.Metadata, 2));
};


/**
 * @param {?proto.cosmos.bank.v1beta1.Metadata|undefined} value
 * @return {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata} returns this
*/
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata} returns this
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.tokenfactory.v1beta1.EventSetTFDenomMetadata.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.injective.tokenfactory.v1beta1);
