import { ChannelEventSource } from "./ChannelEventSource";
import { ChannelRegistry } from "./ChannelRegistry";
export declare type EventHandler = (...any: any[]) => void | Promise<void>;
declare type EventHandlersMap<EventName extends string> = {
    [key in EventName]?: EventHandler[] | undefined;
};
declare type EventSourceMap<EventName extends string> = {
    [key in EventName]?: ChannelEventSource<EventName>;
};
/**
 * @date 16/12/2021
 * @export
 * @class Channel
 * @template EventName
 * @member {ChannelConfig} _config (channel config)
 * @member {ChannelRegistry} _channelRegistry (register the channel instance under this scope)
 * @member {EventSourceMap} _eventSourceMap (a channel can bind several event sources; event source can trigger the channel to emit an event)
 * @member {EventHandlersMap} _eventHandlersMap ()
 */
export declare class Channel<EventName extends string = string> {
    protected readonly _channelRegistry?: ChannelRegistry<EventName> | undefined;
    private _eventSourceMap;
    private _eventHandlersMap;
    constructor(_channelRegistry?: ChannelRegistry<EventName> | undefined);
    get hasNoHandlers(): boolean;
    on(eventName: EventName, handler: EventHandler): () => void;
    off(eventName: EventName, handler: EventHandler): void;
    offEvent(eventName: EventName): void;
    offAll(): void;
    once(eventName: EventName, handler: EventHandler): void;
    emit(eventName: EventName, ...args: any[]): void;
    getHandlers(eventName: EventName): EventHandlersMap<EventName>[EventName] | null;
    protected _getEventSourceMap?(): EventSourceMap<EventName>;
    private _tryRegistryAdd;
    private _tryRegistryRemove;
    private _tryEventSourceStop;
}
export {};
