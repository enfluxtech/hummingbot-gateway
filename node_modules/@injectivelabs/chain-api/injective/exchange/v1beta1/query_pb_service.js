// package: injective.exchange.v1beta1
// file: injective/exchange/v1beta1/query.proto

var injective_exchange_v1beta1_query_pb = require("../../../injective/exchange/v1beta1/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "injective.exchange.v1beta1.Query";
  return Query;
}());

Query.QueryExchangeParams = {
  methodName: "QueryExchangeParams",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryExchangeParamsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryExchangeParamsResponse
};

Query.SubaccountDeposits = {
  methodName: "SubaccountDeposits",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositsResponse
};

Query.SubaccountDeposit = {
  methodName: "SubaccountDeposit",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountDepositResponse
};

Query.ExchangeBalances = {
  methodName: "ExchangeBalances",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryExchangeBalancesRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryExchangeBalancesResponse
};

Query.SpotMarkets = {
  methodName: "SpotMarkets",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySpotMarketsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySpotMarketsResponse
};

Query.SpotMarket = {
  methodName: "SpotMarket",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySpotMarketRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySpotMarketResponse
};

Query.SpotOrderbook = {
  methodName: "SpotOrderbook",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySpotOrderbookRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySpotOrderbookResponse
};

Query.TraderSpotOrders = {
  methodName: "TraderSpotOrders",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse
};

Query.SpotOrdersByHashes = {
  methodName: "SpotOrdersByHashes",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySpotOrdersByHashesResponse
};

Query.SubaccountOrders = {
  methodName: "SubaccountOrders",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountOrdersResponse
};

Query.TraderSpotTransientOrders = {
  methodName: "TraderSpotTransientOrders",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTraderSpotOrdersResponse
};

Query.SpotMidPriceAndTOB = {
  methodName: "SpotMidPriceAndTOB",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySpotMidPriceAndTOBResponse
};

Query.DerivativeMidPriceAndTOB = {
  methodName: "DerivativeMidPriceAndTOB",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryDerivativeMidPriceAndTOBResponse
};

Query.DerivativeOrderbook = {
  methodName: "DerivativeOrderbook",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryDerivativeOrderbookResponse
};

Query.TraderDerivativeOrders = {
  methodName: "TraderDerivativeOrders",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse
};

Query.DerivativeOrdersByHashes = {
  methodName: "DerivativeOrdersByHashes",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryDerivativeOrdersByHashesResponse
};

Query.TraderDerivativeTransientOrders = {
  methodName: "TraderDerivativeTransientOrders",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeOrdersResponse
};

Query.DerivativeMarkets = {
  methodName: "DerivativeMarkets",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketsResponse
};

Query.DerivativeMarket = {
  methodName: "DerivativeMarket",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketResponse
};

Query.DerivativeMarketAddress = {
  methodName: "DerivativeMarketAddress",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryDerivativeMarketAddressResponse
};

Query.SubaccountTradeNonce = {
  methodName: "SubaccountTradeNonce",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountTradeNonceResponse
};

Query.ExchangeModuleState = {
  methodName: "ExchangeModuleState",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryModuleStateRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryModuleStateResponse
};

Query.Positions = {
  methodName: "Positions",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryPositionsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryPositionsResponse
};

Query.SubaccountPositions = {
  methodName: "SubaccountPositions",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionsResponse
};

Query.SubaccountPositionInMarket = {
  methodName: "SubaccountPositionInMarket",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountPositionInMarketResponse
};

Query.SubaccountEffectivePositionInMarket = {
  methodName: "SubaccountEffectivePositionInMarket",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountEffectivePositionInMarketResponse
};

Query.PerpetualMarketInfo = {
  methodName: "PerpetualMarketInfo",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketInfoResponse
};

Query.ExpiryFuturesMarketInfo = {
  methodName: "ExpiryFuturesMarketInfo",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryExpiryFuturesMarketInfoResponse
};

Query.PerpetualMarketFunding = {
  methodName: "PerpetualMarketFunding",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryPerpetualMarketFundingResponse
};

Query.SubaccountOrderMetadata = {
  methodName: "SubaccountOrderMetadata",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataRequest,
  responseType: injective_exchange_v1beta1_query_pb.QuerySubaccountOrderMetadataResponse
};

Query.TradeRewardPoints = {
  methodName: "TradeRewardPoints",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse
};

Query.PendingTradeRewardPoints = {
  methodName: "PendingTradeRewardPoints",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTradeRewardPointsResponse
};

Query.TradeRewardCampaign = {
  methodName: "TradeRewardCampaign",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTradeRewardCampaignResponse
};

Query.FeeDiscountAccountInfo = {
  methodName: "FeeDiscountAccountInfo",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryFeeDiscountAccountInfoResponse
};

Query.FeeDiscountSchedule = {
  methodName: "FeeDiscountSchedule",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryFeeDiscountScheduleResponse
};

Query.BalanceMismatches = {
  methodName: "BalanceMismatches",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryBalanceMismatchesResponse
};

Query.BalanceWithBalanceHolds = {
  methodName: "BalanceWithBalanceHolds",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryBalanceWithBalanceHoldsResponse
};

Query.FeeDiscountTierStatistics = {
  methodName: "FeeDiscountTierStatistics",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryFeeDiscountTierStatisticsResponse
};

Query.MitoVaultInfos = {
  methodName: "MitoVaultInfos",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.MitoVaultInfosRequest,
  responseType: injective_exchange_v1beta1_query_pb.MitoVaultInfosResponse
};

Query.QueryMarketIDFromVault = {
  methodName: "QueryMarketIDFromVault",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryMarketIDFromVaultResponse
};

Query.HistoricalTradeRecords = {
  methodName: "HistoricalTradeRecords",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryHistoricalTradeRecordsResponse
};

Query.IsOptedOutOfRewards = {
  methodName: "IsOptedOutOfRewards",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryIsOptedOutOfRewardsResponse
};

Query.OptedOutOfRewardsAccounts = {
  methodName: "OptedOutOfRewardsAccounts",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryOptedOutOfRewardsAccountsResponse
};

Query.MarketVolatility = {
  methodName: "MarketVolatility",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryMarketVolatilityRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryMarketVolatilityResponse
};

Query.BinaryOptionsMarkets = {
  methodName: "BinaryOptionsMarkets",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryBinaryMarketsRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryBinaryMarketsResponse
};

Query.TraderDerivativeConditionalOrders = {
  methodName: "TraderDerivativeConditionalOrders",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryTraderDerivativeConditionalOrdersResponse
};

Query.MarketAtomicExecutionFeeMultiplier = {
  methodName: "MarketAtomicExecutionFeeMultiplier",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierRequest,
  responseType: injective_exchange_v1beta1_query_pb.QueryMarketAtomicExecutionFeeMultiplierResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.queryExchangeParams = function queryExchangeParams(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.QueryExchangeParams, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountDeposits = function subaccountDeposits(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountDeposits, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountDeposit = function subaccountDeposit(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountDeposit, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.exchangeBalances = function exchangeBalances(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ExchangeBalances, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.spotMarkets = function spotMarkets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SpotMarkets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.spotMarket = function spotMarket(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SpotMarket, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.spotOrderbook = function spotOrderbook(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SpotOrderbook, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traderSpotOrders = function traderSpotOrders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraderSpotOrders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.spotOrdersByHashes = function spotOrdersByHashes(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SpotOrdersByHashes, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountOrders = function subaccountOrders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountOrders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traderSpotTransientOrders = function traderSpotTransientOrders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraderSpotTransientOrders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.spotMidPriceAndTOB = function spotMidPriceAndTOB(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SpotMidPriceAndTOB, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.derivativeMidPriceAndTOB = function derivativeMidPriceAndTOB(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.DerivativeMidPriceAndTOB, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.derivativeOrderbook = function derivativeOrderbook(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.DerivativeOrderbook, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traderDerivativeOrders = function traderDerivativeOrders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraderDerivativeOrders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.derivativeOrdersByHashes = function derivativeOrdersByHashes(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.DerivativeOrdersByHashes, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traderDerivativeTransientOrders = function traderDerivativeTransientOrders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraderDerivativeTransientOrders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.derivativeMarkets = function derivativeMarkets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.DerivativeMarkets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.derivativeMarket = function derivativeMarket(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.DerivativeMarket, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.derivativeMarketAddress = function derivativeMarketAddress(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.DerivativeMarketAddress, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountTradeNonce = function subaccountTradeNonce(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountTradeNonce, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.exchangeModuleState = function exchangeModuleState(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ExchangeModuleState, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.positions = function positions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Positions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountPositions = function subaccountPositions(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountPositions, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountPositionInMarket = function subaccountPositionInMarket(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountPositionInMarket, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountEffectivePositionInMarket = function subaccountEffectivePositionInMarket(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountEffectivePositionInMarket, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.perpetualMarketInfo = function perpetualMarketInfo(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PerpetualMarketInfo, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.expiryFuturesMarketInfo = function expiryFuturesMarketInfo(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ExpiryFuturesMarketInfo, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.perpetualMarketFunding = function perpetualMarketFunding(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PerpetualMarketFunding, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.subaccountOrderMetadata = function subaccountOrderMetadata(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SubaccountOrderMetadata, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.tradeRewardPoints = function tradeRewardPoints(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TradeRewardPoints, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.pendingTradeRewardPoints = function pendingTradeRewardPoints(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PendingTradeRewardPoints, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.tradeRewardCampaign = function tradeRewardCampaign(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TradeRewardCampaign, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.feeDiscountAccountInfo = function feeDiscountAccountInfo(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FeeDiscountAccountInfo, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.feeDiscountSchedule = function feeDiscountSchedule(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FeeDiscountSchedule, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.balanceMismatches = function balanceMismatches(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.BalanceMismatches, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.balanceWithBalanceHolds = function balanceWithBalanceHolds(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.BalanceWithBalanceHolds, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.feeDiscountTierStatistics = function feeDiscountTierStatistics(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FeeDiscountTierStatistics, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.mitoVaultInfos = function mitoVaultInfos(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MitoVaultInfos, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.queryMarketIDFromVault = function queryMarketIDFromVault(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.QueryMarketIDFromVault, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.historicalTradeRecords = function historicalTradeRecords(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.HistoricalTradeRecords, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.isOptedOutOfRewards = function isOptedOutOfRewards(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.IsOptedOutOfRewards, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.optedOutOfRewardsAccounts = function optedOutOfRewardsAccounts(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.OptedOutOfRewardsAccounts, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.marketVolatility = function marketVolatility(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MarketVolatility, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.binaryOptionsMarkets = function binaryOptionsMarkets(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.BinaryOptionsMarkets, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traderDerivativeConditionalOrders = function traderDerivativeConditionalOrders(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraderDerivativeConditionalOrders, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.marketAtomicExecutionFeeMultiplier = function marketAtomicExecutionFeeMultiplier(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MarketAtomicExecutionFeeMultiplier, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

