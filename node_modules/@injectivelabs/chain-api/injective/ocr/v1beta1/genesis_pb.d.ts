// package: injective.ocr.v1beta1
// file: injective/ocr/v1beta1/genesis.proto

import * as jspb from "google-protobuf";
import * as injective_ocr_v1beta1_ocr_pb from "../../../injective/ocr/v1beta1/ocr_pb";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";

export class GenesisState extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_ocr_v1beta1_ocr_pb.Params | undefined;
  setParams(value?: injective_ocr_v1beta1_ocr_pb.Params): void;

  clearFeedConfigsList(): void;
  getFeedConfigsList(): Array<injective_ocr_v1beta1_ocr_pb.FeedConfig>;
  setFeedConfigsList(value: Array<injective_ocr_v1beta1_ocr_pb.FeedConfig>): void;
  addFeedConfigs(value?: injective_ocr_v1beta1_ocr_pb.FeedConfig, index?: number): injective_ocr_v1beta1_ocr_pb.FeedConfig;

  clearLatestEpochAndRoundsList(): void;
  getLatestEpochAndRoundsList(): Array<FeedEpochAndRound>;
  setLatestEpochAndRoundsList(value: Array<FeedEpochAndRound>): void;
  addLatestEpochAndRounds(value?: FeedEpochAndRound, index?: number): FeedEpochAndRound;

  clearFeedTransmissionsList(): void;
  getFeedTransmissionsList(): Array<FeedTransmission>;
  setFeedTransmissionsList(value: Array<FeedTransmission>): void;
  addFeedTransmissions(value?: FeedTransmission, index?: number): FeedTransmission;

  clearLatestAggregatorRoundIdsList(): void;
  getLatestAggregatorRoundIdsList(): Array<FeedLatestAggregatorRoundIDs>;
  setLatestAggregatorRoundIdsList(value: Array<FeedLatestAggregatorRoundIDs>): void;
  addLatestAggregatorRoundIds(value?: FeedLatestAggregatorRoundIDs, index?: number): FeedLatestAggregatorRoundIDs;

  clearRewardPoolsList(): void;
  getRewardPoolsList(): Array<RewardPool>;
  setRewardPoolsList(value: Array<RewardPool>): void;
  addRewardPools(value?: RewardPool, index?: number): RewardPool;

  clearFeedObservationCountsList(): void;
  getFeedObservationCountsList(): Array<FeedCounts>;
  setFeedObservationCountsList(value: Array<FeedCounts>): void;
  addFeedObservationCounts(value?: FeedCounts, index?: number): FeedCounts;

  clearFeedTransmissionCountsList(): void;
  getFeedTransmissionCountsList(): Array<FeedCounts>;
  setFeedTransmissionCountsList(value: Array<FeedCounts>): void;
  addFeedTransmissionCounts(value?: FeedCounts, index?: number): FeedCounts;

  clearPendingPayeeshipsList(): void;
  getPendingPayeeshipsList(): Array<PendingPayeeship>;
  setPendingPayeeshipsList(value: Array<PendingPayeeship>): void;
  addPendingPayeeships(value?: PendingPayeeship, index?: number): PendingPayeeship;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenesisState.AsObject;
  static toObject(includeInstance: boolean, msg: GenesisState): GenesisState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenesisState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenesisState;
  static deserializeBinaryFromReader(message: GenesisState, reader: jspb.BinaryReader): GenesisState;
}

export namespace GenesisState {
  export type AsObject = {
    params?: injective_ocr_v1beta1_ocr_pb.Params.AsObject,
    feedConfigsList: Array<injective_ocr_v1beta1_ocr_pb.FeedConfig.AsObject>,
    latestEpochAndRoundsList: Array<FeedEpochAndRound.AsObject>,
    feedTransmissionsList: Array<FeedTransmission.AsObject>,
    latestAggregatorRoundIdsList: Array<FeedLatestAggregatorRoundIDs.AsObject>,
    rewardPoolsList: Array<RewardPool.AsObject>,
    feedObservationCountsList: Array<FeedCounts.AsObject>,
    feedTransmissionCountsList: Array<FeedCounts.AsObject>,
    pendingPayeeshipsList: Array<PendingPayeeship.AsObject>,
  }
}

export class FeedTransmission extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  hasTransmission(): boolean;
  clearTransmission(): void;
  getTransmission(): injective_ocr_v1beta1_ocr_pb.Transmission | undefined;
  setTransmission(value?: injective_ocr_v1beta1_ocr_pb.Transmission): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FeedTransmission.AsObject;
  static toObject(includeInstance: boolean, msg: FeedTransmission): FeedTransmission.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FeedTransmission, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FeedTransmission;
  static deserializeBinaryFromReader(message: FeedTransmission, reader: jspb.BinaryReader): FeedTransmission;
}

export namespace FeedTransmission {
  export type AsObject = {
    feedId: string,
    transmission?: injective_ocr_v1beta1_ocr_pb.Transmission.AsObject,
  }
}

export class FeedEpochAndRound extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  hasEpochAndRound(): boolean;
  clearEpochAndRound(): void;
  getEpochAndRound(): injective_ocr_v1beta1_ocr_pb.EpochAndRound | undefined;
  setEpochAndRound(value?: injective_ocr_v1beta1_ocr_pb.EpochAndRound): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FeedEpochAndRound.AsObject;
  static toObject(includeInstance: boolean, msg: FeedEpochAndRound): FeedEpochAndRound.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FeedEpochAndRound, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FeedEpochAndRound;
  static deserializeBinaryFromReader(message: FeedEpochAndRound, reader: jspb.BinaryReader): FeedEpochAndRound;
}

export namespace FeedEpochAndRound {
  export type AsObject = {
    feedId: string,
    epochAndRound?: injective_ocr_v1beta1_ocr_pb.EpochAndRound.AsObject,
  }
}

export class FeedLatestAggregatorRoundIDs extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  getAggregatorRoundId(): number;
  setAggregatorRoundId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FeedLatestAggregatorRoundIDs.AsObject;
  static toObject(includeInstance: boolean, msg: FeedLatestAggregatorRoundIDs): FeedLatestAggregatorRoundIDs.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FeedLatestAggregatorRoundIDs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FeedLatestAggregatorRoundIDs;
  static deserializeBinaryFromReader(message: FeedLatestAggregatorRoundIDs, reader: jspb.BinaryReader): FeedLatestAggregatorRoundIDs;
}

export namespace FeedLatestAggregatorRoundIDs {
  export type AsObject = {
    feedId: string,
    aggregatorRoundId: number,
  }
}

export class RewardPool extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setAmount(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): RewardPool.AsObject;
  static toObject(includeInstance: boolean, msg: RewardPool): RewardPool.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RewardPool, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RewardPool;
  static deserializeBinaryFromReader(message: RewardPool, reader: jspb.BinaryReader): RewardPool;
}

export namespace RewardPool {
  export type AsObject = {
    feedId: string,
    amount?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
  }
}

export class FeedCounts extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  clearCountsList(): void;
  getCountsList(): Array<Count>;
  setCountsList(value: Array<Count>): void;
  addCounts(value?: Count, index?: number): Count;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FeedCounts.AsObject;
  static toObject(includeInstance: boolean, msg: FeedCounts): FeedCounts.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FeedCounts, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FeedCounts;
  static deserializeBinaryFromReader(message: FeedCounts, reader: jspb.BinaryReader): FeedCounts;
}

export namespace FeedCounts {
  export type AsObject = {
    feedId: string,
    countsList: Array<Count.AsObject>,
  }
}

export class Count extends jspb.Message {
  getAddress(): string;
  setAddress(value: string): void;

  getCount(): number;
  setCount(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Count.AsObject;
  static toObject(includeInstance: boolean, msg: Count): Count.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Count, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Count;
  static deserializeBinaryFromReader(message: Count, reader: jspb.BinaryReader): Count;
}

export namespace Count {
  export type AsObject = {
    address: string,
    count: number,
  }
}

export class PendingPayeeship extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  getTransmitter(): string;
  setTransmitter(value: string): void;

  getProposedPayee(): string;
  setProposedPayee(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PendingPayeeship.AsObject;
  static toObject(includeInstance: boolean, msg: PendingPayeeship): PendingPayeeship.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PendingPayeeship, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PendingPayeeship;
  static deserializeBinaryFromReader(message: PendingPayeeship, reader: jspb.BinaryReader): PendingPayeeship;
}

export namespace PendingPayeeship {
  export type AsObject = {
    feedId: string,
    transmitter: string,
    proposedPayee: string,
  }
}

