{"version":3,"file":"errors.js","sources":["../../../src/errors/errors.ts"],"sourcesContent":["import { AccountBalance, ClearingHouse, Exchange, OrderBook, Quoter, Vault } from \"../contracts/type\"\nimport { Contract as EthersContract } from \"ethers\"\n\n/* CONTRACT */\nexport interface ContractNativeError extends Error {\n    code: number\n    message: string\n    data: string\n}\n\nexport enum ContractErrorCode {\n    /* READ */\n    UNISWAP_BROKER_INSUFFICIENT_LIQUIDITY = \"UB_UOA\",\n    QUOTER_INSUFFICIENT_LIQUIDITY = \"Q_UOA\",\n    NOT_ENOUGH_FREE_COLLATERAL = \"CH_NEFCI\",\n\n    /* WRITE */\n    PRICE_SLIPPAGE_CHECK_FAILS_PSCF = \"CH_PSCF\",\n    PRICE_SLIPPAGE_CHECK_FAILS_TLRS = \"CH_TLRS\",\n    PRICE_SLIPPAGE_CHECK_FAILS_TMRS = \"CH_TMRS\",\n    PRICE_SLIPPAGE_CHECK_FAILS_TLRL = \"CH_TLRL\",\n    PRICE_SLIPPAGE_CHECK_FAILS_TMRL = \"CH_TMRL\",\n    COLLATERAL_DEPOSIT_FAILS_GTDC = \"V_GTDC\",\n    COLLATERAL_DEPOSIT_FAILS_GTSTBC = \"V_GTSTBC\",\n    ALREADY_OVER_PRICE_LIMIT_ONCE = \"EX_AOPLO\",\n    OVER_PRICE_LIMIT_BEFORE_SWAP = \"EX_OPLBS\",\n    OVER_PRICE_LIMIT_AFTER_SWAP = \"EX_OPLAS\",\n    POSITION_SIZE_IS_ZERO = \"CH_PSZ\",\n    NOT_ENOUGH_ACCOUNT_VALUE_BY_IM_RATIO = \"CH_NEFCI\",\n    ORDERS_NUMBER_EXCEEDS = \"OB_ONE\",\n    NOT_ENOUGH_LIQUIDITY = \"OB_NEL\",\n    NON_EXISTENT_OPEN_ORDER = \"OB_NEO\",\n    MARKET_NUMBER_EXCEEDS = \"AB_MNE\",\n    OVER_MAXIMUM_PRICE_SPREAD = \"CH_OMPS\",\n    NOT_ENOUGH_MINIMUM_REQUIRED_MARGIN = \"CH_NEMRM\",\n\n    /* UNISWAP ERROR */\n    LIQUIDITY_MATH_ERROR_LS = \"LS\", // https://github.com/Uniswap/v3-core/blob/f03155670ec1667406b83a539e23dcccf32a03bc/contracts/libraries/LiquidityMath.sol#L12\n    LIQUIDITY_MATH_ERROR_LA = \"LA\", // https://github.com/Uniswap/v3-core/blob/f03155670ec1667406b83a539e23dcccf32a03bc/contracts/libraries/LiquidityMath.sol#L14\n}\n\n/* SDK */\nexport enum ErrorName {\n    INIT_SDK_ERROR = \"init_sdk_error\",\n    UNSUPPORTED_CHAIN = \"unsupported_chain\",\n    TYPE_ERROR = \"type_error\",\n    ARGUMENT_ERROR = \"argument_error\",\n    FAILED_PRECONDITION_ERROR = \"failed_precondition_error\",\n    UNAUTHORIZED_ERROR = \"unauthorized_error\",\n    GRAPHQL_QUERY_ERROR = \"graphql_query_error\",\n    RPC_CLOSED_ERROR = \"rpc_closed_error\",\n    RPC_REJECTED_ERROR = \"rpc_rejected_error\",\n    RPC_TIMEOUT_ERROR = \"rpc_timeout_error\",\n    RPC_MAX_RETRY_ERROR = \"rpc_max_retry_error\",\n    RPC_GAS_TOO_LOW_ERROR = \"rpc_gas_too_low_error\",\n\n    /* CONTRACT READ */\n    CONTRACT_READ_ERROR = \"contract_read_error\",\n    MULTICALL_READ_ERROR = \"multicall_read_error\",\n    MULTICALL_READ_ENCODE_ERROR = \"multicall_read_encode_error\",\n    MULTICALL_READ_DECODE_ERROR = \"multicall_read_decode_error\",\n    INSUFFICIENT_LIQUIDITY_ERROR = \"insufficient_liquidity_error\",\n    UNISWAP_BROKER_INSUFFICIENT_LIQUIDITY_ERROR = \"uniswap_broker_insufficient_liquidity_error\",\n    NOT_ENOUGH_FREE_COLLATERAL_ERROR = \"not_enough_free_collateral_error\",\n    REDUCE_POSITION_TOO_MUCH_ERROR = \"reduce_position_too_much_error\",\n\n    /* CONTRACT WRITE */\n    CONTRACT_WRITE_ERROR = \"contract_write_error\",\n    PRICE_SLIPPAGE_CHECK_ERROR = \"price_slippage_check_error\",\n    COLLATERAL_DEPOSIT_CAP_ERROR = \"collateral_deposit_cap_error\",\n    ALREADY_OVER_PRICE_LIMIT_ONCE_ERROR = \"already_over_price_limit_once_error\",\n    OVER_PRICE_LIMIT_BEFORE_SWAP_ERROR = \"over_price_limit_before_swap_error\",\n    OVER_PRICE_LIMIT_AFTER_SWAP_ERROR = \"over_price_limit_after_swap_error\",\n    POSITION_SIZE_IS_ZERO_ERROR = \"position_size_is_zero_error\",\n    NOT_ENOUGH_ACCOUNT_VALUE_BY_IM_RATIO_ERROR = \"not_enough_account_value_by_im_ratio_error\",\n    ORDERS_NUMBER_EXCEEDS_ERROR = \"orders_number_exceeds_error\",\n    NOT_ENOUGH_LIQUIDITY_ERROR = \"not_enough_liquidity_error\",\n    NON_EXISTENT_OPEN_ORDER_ERROR = \"non_existent_open_order_error\",\n    MARKET_NUMBER_EXCEEDS_ERROR = \"market_number_exceeds_error\",\n    OVER_MAXIMUM_PRICE_SPREAD_ERROR = \"over_maximum_price_spread_error\",\n    NOT_ENOUGH_MINIMUM_REQUIRED_MARGIN_ERROR = \"not_enough_minimum_required_margin_error\",\n\n    /* UNISWAP Error*/\n    UNISWAP_ERROR = \"uniswap_error\",\n}\n\nexport type SDKErrorContractRead =\n    | ContractReadError<EthersContract>\n    | InsufficientLiquidityError\n    | UniswapBrokerInsufficientLiquidityError\n    | NotEnoughFreeCollateralError\n\nexport type SDKErrorContractWrite =\n    | ContractWriteError<EthersContract>\n    | NotEnoughLiquidityError\n    | PriceSlippageCheckError\n\nexport type SDKErrorGraph = GraphqlQueryError\n\nexport type SDKErrorRpc = RpcClosedError | RpcRejectedError | RpcIntrinsicGasTooLowError\n\nexport type SDKErrorGeneral = UnauthorizedError | ArgumentError | FailedPreconditionError | TypeError\n\nexport type SDKError = SDKErrorContractRead | SDKErrorContractWrite | SDKErrorGraph | SDKErrorRpc | SDKErrorGeneral\n\nexport function isSDKErrorContractRead(error: any): error is SDKErrorContractRead {\n    return error instanceof ContractReadError\n}\n\nexport function isSDKErrorContractWrite(error: any): error is SDKErrorContractWrite {\n    return error instanceof ContractWriteError\n}\n\nexport function isSDKError(error: any): error is SDKError {\n    const errorName = (error as SDKError)?.name as ErrorName | undefined\n    return !!errorName && Object.values(ErrorName).includes(errorName)\n}\n\n/* ========== ERRORS ========== */\ninterface SDKBaseErrorParams {\n    rawError?: Error\n}\nabstract class SDKBaseError extends Error {\n    readonly rawError?: Error\n    constructor(data?: SDKBaseErrorParams) {\n        super()\n        this.rawError = data?.rawError\n        this.stack = data?.rawError?.stack\n    }\n}\n\n// NOTE: init error\nexport class InitSDKError extends Error {\n    constructor(error: Error) {\n        super()\n        this.name = ErrorName.INIT_SDK_ERROR\n        this.message = `Init SDK error.`\n        this.stack = error.stack\n    }\n}\n\ninterface TypeErrorParams extends SDKBaseErrorParams {\n    functionName: string\n    variableName: string\n    variableValue: any\n    type: string\n}\nexport class TypeError extends SDKBaseError {\n    constructor(data: TypeErrorParams) {\n        super(data)\n        this.name = ErrorName.TYPE_ERROR\n        this.message = `Execute ${data.functionName} function failed, \"${data.variableName}\": ${JSON.stringify(\n            data.variableValue,\n        )} (${typeof data.variableValue}) is not typeof ${data.type}.`\n    }\n}\n\ninterface ArgumentErrorParams extends SDKBaseErrorParams {\n    functionName: string\n    key: string\n    value: any\n}\nexport class ArgumentError extends SDKBaseError {\n    constructor(data: ArgumentErrorParams) {\n        super(data)\n        this.name = ErrorName.ARGUMENT_ERROR\n        this.message = `Value ${JSON.stringify(data.value)} is invalid for ${data.key} in ${\n            data.functionName\n        } function.`\n    }\n}\n\ninterface FailedPreconditionErrorParams extends SDKBaseErrorParams {\n    functionName: string\n    stateName: string\n    stateValue: any\n}\nexport class FailedPreconditionError extends SDKBaseError {\n    constructor(data: FailedPreconditionErrorParams) {\n        super(data)\n        this.name = ErrorName.FAILED_PRECONDITION_ERROR\n        this.message = `Execute ${data.functionName} function failed, the ${\n            data.stateName\n        } state should not be ${JSON.stringify(data.stateValue)}.`\n    }\n}\n\n// NOTE: specialized failed precondition error\ninterface UnauthorizedErrorParams extends SDKBaseErrorParams {\n    functionName: string\n}\nexport class UnauthorizedError extends SDKBaseError {\n    constructor(data: UnauthorizedErrorParams) {\n        super(data)\n        this.name = ErrorName.UNAUTHORIZED_ERROR\n        this.message = `Execute ${data.functionName} function failed, account undetected.`\n    }\n}\n\n// NOTE: unsupported chain error\nexport class UnsupportedChainError extends Error {\n    constructor() {\n        super()\n        this.name = ErrorName.UNSUPPORTED_CHAIN\n        this.message = `The current chain you selected is unsupported.`\n    }\n}\n\n/* ========== CONTRACT ========== */\nexport interface ContractErrorParams<ContractFunctionName> extends SDKBaseErrorParams {\n    contractName: string\n    contractFunctionName: ContractFunctionName\n    contractErrorCode?: ContractErrorCode\n    args?: { [key: string]: any }\n    context?: { [key: string]: any }\n}\n\n/* ========== MULTICALL READ ========== */\nexport class MulticallReadError<ContractType extends EthersContract> extends SDKBaseError {\n    readonly contractName: string\n    readonly contractFunctionName: keyof ContractType\n    readonly contractErrorCode?: ContractErrorCode\n    readonly arguments: string\n    readonly context: string\n    constructor(data: ContractErrorParams<keyof ContractType>) {\n        super(data)\n        const { contractName, contractFunctionName, contractErrorCode, args, context } = data\n        this.name = ErrorName.MULTICALL_READ_ERROR\n        this.message = `Read ${contractName} contract error, invoke ${String(contractFunctionName)} function failed.`\n        this.contractName = contractName\n        this.contractFunctionName = contractFunctionName\n        this.contractErrorCode = contractErrorCode\n        this.arguments = JSON.stringify(args)\n        this.context = JSON.stringify(context)\n    }\n}\n\nexport class MulticallEncodeError<ContractType extends EthersContract> extends MulticallReadError<ContractType> {\n    constructor(data: ContractErrorParams<keyof ContractType>) {\n        super(data)\n        this.name = ErrorName.MULTICALL_READ_ENCODE_ERROR\n    }\n}\n\nexport class MulticallDecodeError<ContractType extends EthersContract> extends MulticallReadError<ContractType> {\n    constructor(data: ContractErrorParams<keyof ContractType>) {\n        super(data)\n        this.name = ErrorName.MULTICALL_READ_DECODE_ERROR\n    }\n}\n\n/* ========== CONTRACT READ ========== */\nexport type ContractReadErrorParams<ContractFunctionName> = ContractErrorParams<ContractFunctionName>\n\nexport class ContractReadError<ContractType extends EthersContract> extends SDKBaseError {\n    readonly contractName: string\n    readonly contractFunctionName: keyof ContractType\n    readonly contractErrorCode?: ContractErrorCode\n    readonly arguments: string\n    readonly context: string\n    constructor(data: ContractReadErrorParams<keyof ContractType>) {\n        super(data)\n        const { contractName, contractFunctionName, contractErrorCode, args, context } = data\n        this.name = ErrorName.CONTRACT_READ_ERROR\n        this.message = `Read ${contractName} contract error, invoke ${String(contractFunctionName)} function failed.`\n        this.contractName = contractName\n        this.contractFunctionName = contractFunctionName\n        this.contractErrorCode = contractErrorCode\n        this.arguments = JSON.stringify(args)\n        this.context = JSON.stringify(context)\n    }\n}\n\nexport class InsufficientLiquidityError extends ContractReadError<Quoter> {\n    constructor(data: ContractReadErrorParams<keyof Quoter>) {\n        super(data)\n        this.name = ErrorName.INSUFFICIENT_LIQUIDITY_ERROR\n    }\n}\n\nexport class UniswapBrokerInsufficientLiquidityError extends ContractReadError<ClearingHouse> {\n    constructor(data: ContractReadErrorParams<keyof ClearingHouse>) {\n        super(data)\n        this.name = ErrorName.UNISWAP_BROKER_INSUFFICIENT_LIQUIDITY_ERROR\n    }\n}\n\nexport class NotEnoughFreeCollateralError extends ContractReadError<ClearingHouse> {\n    constructor(data: ContractReadErrorParams<keyof ClearingHouse>) {\n        super(data)\n        this.name = ErrorName.NOT_ENOUGH_FREE_COLLATERAL_ERROR\n    }\n}\n\nexport class ReducePositionInvalidError extends ContractReadError<ClearingHouse> {\n    constructor(data: ContractReadErrorParams<keyof ClearingHouse>) {\n        super(data)\n        this.name = ErrorName.REDUCE_POSITION_TOO_MUCH_ERROR\n    }\n}\n\n/* ========== CONTRACT WRITE ========== */\ninterface ContractWriteBaseErrorParams<ContractFunctionName> extends ContractErrorParams<ContractFunctionName> {\n    txHash?: string\n    gasLimit?: string\n    txPayload?: {\n        from?: string\n        to?: string\n        inputData?: string\n    }\n}\n\nexport class ContractWriteError<ContractType extends EthersContract> extends SDKBaseError {\n    readonly contractName: string\n    readonly contractFunctionName: keyof ContractType\n    readonly contractErrorCode?: ContractErrorCode\n    readonly arguments: string\n    readonly context: string\n    readonly txHash?: string\n    readonly gasLimit?: string\n    readonly from?: string\n    readonly to?: string\n    readonly inputData?: string\n\n    constructor(data: ContractWriteBaseErrorParams<keyof ContractType>) {\n        super(data)\n        const { contractName, contractFunctionName, contractErrorCode, context, txHash, gasLimit, args, txPayload } =\n            data\n        this.name = ErrorName.CONTRACT_WRITE_ERROR\n        this.message =\n            `Write ${contractName} contract error, invoke ${String(contractFunctionName)} function failed.` +\n            (contractErrorCode ? ` (Error Code: ${contractErrorCode})` : \"\")\n        this.contractName = contractName\n        this.contractFunctionName = contractFunctionName\n        this.contractErrorCode = contractErrorCode\n        this.arguments = JSON.stringify(args)\n        this.context = JSON.stringify(context)\n        this.txHash = txHash\n        this.gasLimit = gasLimit\n        this.from = txPayload?.from\n        this.to = txPayload?.to\n        this.inputData = txPayload?.inputData\n    }\n}\n\nexport type ContractWriteErrorParams<ContractFunctionName> = ContractWriteBaseErrorParams<ContractFunctionName> &\n    Required<Pick<ContractWriteBaseErrorParams<ContractFunctionName>, \"contractErrorCode\">>\n\nexport class CollateralDepositCapError extends ContractWriteError<Vault> {\n    constructor(data: ContractWriteErrorParams<keyof Vault>) {\n        super({ ...data })\n        this.name = ErrorName.COLLATERAL_DEPOSIT_CAP_ERROR\n    }\n}\n\nexport class PriceSlippageCheckError extends ContractWriteError<ClearingHouse> {\n    constructor(data: ContractWriteErrorParams<keyof ClearingHouse>) {\n        super({ ...data })\n        this.name = ErrorName.PRICE_SLIPPAGE_CHECK_ERROR\n    }\n}\n\nexport class AlreadyOverPriceLimitOnceError extends ContractWriteError<Exchange> {\n    constructor(data: ContractWriteErrorParams<keyof Exchange>) {\n        super({ ...data })\n        this.name = ErrorName.ALREADY_OVER_PRICE_LIMIT_ONCE_ERROR\n    }\n}\n\nexport class OverPriceLimitBeforeSwapError extends ContractWriteError<Exchange> {\n    constructor(data: ContractWriteErrorParams<keyof Exchange>) {\n        super({ ...data })\n        this.name = ErrorName.OVER_PRICE_LIMIT_BEFORE_SWAP_ERROR\n    }\n}\n\nexport class OverPriceLimitAfterSwapError extends ContractWriteError<Exchange> {\n    constructor(data: ContractWriteErrorParams<keyof Exchange>) {\n        super({ ...data })\n        this.name = ErrorName.OVER_PRICE_LIMIT_AFTER_SWAP_ERROR\n    }\n}\n\nexport class PositionSizeIsZeroError extends ContractWriteError<ClearingHouse> {\n    constructor(data: ContractWriteErrorParams<keyof ClearingHouse>) {\n        super({ ...data })\n        this.name = ErrorName.POSITION_SIZE_IS_ZERO_ERROR\n    }\n}\n\nexport class NotEnoughAccountValueByImRatioError extends ContractWriteError<ClearingHouse> {\n    constructor(data: ContractWriteErrorParams<keyof ClearingHouse>) {\n        super({ ...data })\n        this.name = ErrorName.NOT_ENOUGH_ACCOUNT_VALUE_BY_IM_RATIO_ERROR\n    }\n}\n\nexport class OrdersNumberExceedsError extends ContractWriteError<OrderBook> {\n    constructor(data: ContractWriteErrorParams<keyof OrderBook>) {\n        super({ ...data })\n        this.name = ErrorName.ORDERS_NUMBER_EXCEEDS_ERROR\n    }\n}\n\nexport class NotEnoughLiquidityError extends ContractWriteError<OrderBook> {\n    constructor(data: ContractWriteErrorParams<keyof OrderBook>) {\n        super({ ...data })\n        this.name = ErrorName.NOT_ENOUGH_LIQUIDITY_ERROR\n    }\n}\n\nexport class NonExistentOpenOrderError extends ContractWriteError<OrderBook> {\n    constructor(data: ContractWriteErrorParams<keyof OrderBook>) {\n        super({ ...data })\n        this.name = ErrorName.NON_EXISTENT_OPEN_ORDER_ERROR\n    }\n}\n\nexport class MarketNumberExceedsError extends ContractWriteError<AccountBalance> {\n    constructor(data: ContractWriteErrorParams<keyof AccountBalance>) {\n        super({ ...data })\n        this.name = ErrorName.MARKET_NUMBER_EXCEEDS_ERROR\n    }\n}\n\nexport class OverMaximumPriceSpreadError extends ContractWriteError<ClearingHouse> {\n    constructor(data: ContractWriteErrorParams<keyof ClearingHouse>) {\n        super({ ...data })\n        this.name = ErrorName.OVER_MAXIMUM_PRICE_SPREAD_ERROR\n    }\n}\n\nexport class NotEnoughMinimumRequiredMarginError extends ContractWriteError<ClearingHouse> {\n    constructor(data: ContractWriteErrorParams<keyof ClearingHouse>) {\n        super({ ...data })\n        this.name = ErrorName.NOT_ENOUGH_MINIMUM_REQUIRED_MARGIN_ERROR\n    }\n}\n\n// NOTE: if wanna see the detail message of uniswap error, see the rawError fields\nexport class UniswapV3Error extends ContractWriteError<ClearingHouse> {\n    constructor(data: ContractWriteErrorParams<keyof ClearingHouse>) {\n        super({ ...data })\n        this.name = ErrorName.UNISWAP_ERROR\n    }\n}\n\n// NOTE: GRAPHQL\ninterface GraphqlQueryErrorParams extends SDKBaseErrorParams {\n    functionName: string\n    query: string\n    args?: { [key: string]: any }\n}\nexport class GraphqlQueryError extends SDKBaseError {\n    readonly functionName: string\n    readonly query: string\n    readonly args: string\n    constructor(data: GraphqlQueryErrorParams) {\n        super(data)\n        this.name = ErrorName.GRAPHQL_QUERY_ERROR\n        this.message = `Query error, invoke ${data.functionName} failed.`\n        this.functionName = data.functionName\n        this.query = data.query\n        this.args = JSON.stringify(data.args)\n    }\n}\n\n/* ========== ETHER ========== */\nexport enum RpcErrorCode {\n    // NOTE: https://eips.ethereum.org/EIPS/eip-1193\n    USER_DENIED_TRANSACTION = 4001,\n    // NOTE: According to https://github.com/MetaMask/eth-rpc-errors/blob/main/src/error-constants.ts,\n    // -32000 simply means invalid input, so using string here is more clearly.\n    INTRINSIC_GAS_TOO_LOW = \"intrinsic gas too low\",\n}\n\nexport interface RpcNativeError extends Error {\n    code: number\n    data?: unknown\n}\n\nexport function isRpcNativeUserDeniedError(error: Error): error is RpcNativeError {\n    return (error as RpcNativeError)?.code === RpcErrorCode.USER_DENIED_TRANSACTION\n}\nexport function isRpcNativeGasTooLowError(error: Error): error is RpcNativeError {\n    return (error as RpcNativeError)?.message.indexOf(RpcErrorCode.INTRINSIC_GAS_TOO_LOW) > -1\n}\n\n// NOTE: RPC\ninterface RpcErrorParams extends SDKBaseErrorParams {\n    contractFunctionName: keyof EthersContract\n}\n\nexport class RpcIntrinsicGasTooLowError extends SDKBaseError {\n    readonly contractFunctionName: keyof EthersContract\n    constructor(data: RpcErrorParams) {\n        super(data)\n        this.name = ErrorName.RPC_GAS_TOO_LOW_ERROR\n        this.message = `Not enough ETH for gas fee.`\n        this.contractFunctionName = data.contractFunctionName\n    }\n}\nexport class RpcRejectedError extends SDKBaseError {\n    readonly contractFunctionName: keyof EthersContract\n    constructor(data: RpcErrorParams) {\n        super(data)\n        this.name = ErrorName.RPC_REJECTED_ERROR\n        this.message = `RPC error: user rejected.`\n        this.contractFunctionName = data.contractFunctionName\n    }\n}\n\nexport class RpcClosedError extends SDKBaseError {\n    constructor(data: SDKBaseErrorParams) {\n        super(data)\n        this.name = ErrorName.RPC_CLOSED_ERROR\n        this.message = `RPC error: websocket closed.`\n    }\n}\n\nexport class RpcTimeoutError extends SDKBaseError {\n    constructor(data?: SDKBaseErrorParams) {\n        super(data)\n        this.name = ErrorName.RPC_TIMEOUT_ERROR\n        this.message = `RPC error: request timeout.`\n    }\n}\n\ninterface RpcMaxRetryErrorParams extends SDKBaseErrorParams {\n    rawErrors?: Error[]\n}\n\nexport class RpcMaxRetryError extends SDKBaseError {\n    readonly rawErrors?: Error[]\n    constructor({ rawErrors, ...error }: RpcMaxRetryErrorParams) {\n        super(error)\n        this.name = ErrorName.RPC_MAX_RETRY_ERROR\n        this.message = `RPC error: max retry limit reached`\n        this.rawErrors = rawErrors\n    }\n}\n"],"names":["ContractErrorCode","ErrorName","RpcErrorCode","isSDKErrorContractRead","error","ContractReadError","isSDKErrorContractWrite","ContractWriteError","isSDKError","errorName","_a","name","Object","values","includes","SDKBaseError","Error","constructor","data","super","this","rawError","stack","InitSDKError","INIT_SDK_ERROR","message","TypeError","TYPE_ERROR","functionName","variableName","JSON","stringify","variableValue","type","ArgumentError","ARGUMENT_ERROR","value","key","FailedPreconditionError","FAILED_PRECONDITION_ERROR","stateName","stateValue","UnauthorizedError","UNAUTHORIZED_ERROR","UnsupportedChainError","UNSUPPORTED_CHAIN","MulticallReadError","contractName","contractFunctionName","contractErrorCode","args","context","MULTICALL_READ_ERROR","String","arguments","MulticallEncodeError","MULTICALL_READ_ENCODE_ERROR","MulticallDecodeError","MULTICALL_READ_DECODE_ERROR","CONTRACT_READ_ERROR","InsufficientLiquidityError","INSUFFICIENT_LIQUIDITY_ERROR","UniswapBrokerInsufficientLiquidityError","UNISWAP_BROKER_INSUFFICIENT_LIQUIDITY_ERROR","NotEnoughFreeCollateralError","NOT_ENOUGH_FREE_COLLATERAL_ERROR","ReducePositionInvalidError","REDUCE_POSITION_TOO_MUCH_ERROR","txHash","gasLimit","txPayload","CONTRACT_WRITE_ERROR","from","to","inputData","CollateralDepositCapError","COLLATERAL_DEPOSIT_CAP_ERROR","PriceSlippageCheckError","PRICE_SLIPPAGE_CHECK_ERROR","AlreadyOverPriceLimitOnceError","ALREADY_OVER_PRICE_LIMIT_ONCE_ERROR","OverPriceLimitBeforeSwapError","OVER_PRICE_LIMIT_BEFORE_SWAP_ERROR","OverPriceLimitAfterSwapError","OVER_PRICE_LIMIT_AFTER_SWAP_ERROR","PositionSizeIsZeroError","POSITION_SIZE_IS_ZERO_ERROR","NotEnoughAccountValueByImRatioError","NOT_ENOUGH_ACCOUNT_VALUE_BY_IM_RATIO_ERROR","OrdersNumberExceedsError","ORDERS_NUMBER_EXCEEDS_ERROR","NotEnoughLiquidityError","NOT_ENOUGH_LIQUIDITY_ERROR","NonExistentOpenOrderError","NON_EXISTENT_OPEN_ORDER_ERROR","MarketNumberExceedsError","MARKET_NUMBER_EXCEEDS_ERROR","OverMaximumPriceSpreadError","OVER_MAXIMUM_PRICE_SPREAD_ERROR","NotEnoughMinimumRequiredMarginError","NOT_ENOUGH_MINIMUM_REQUIRED_MARGIN_ERROR","UniswapV3Error","UNISWAP_ERROR","GraphqlQueryError","GRAPHQL_QUERY_ERROR","query","isRpcNativeUserDeniedError","code","USER_DENIED_TRANSACTION","isRpcNativeGasTooLowError","indexOf","INTRINSIC_GAS_TOO_LOW","RpcIntrinsicGasTooLowError","RPC_GAS_TOO_LOW_ERROR","RpcRejectedError","RPC_REJECTED_ERROR","RpcClosedError","RPC_CLOSED_ERROR","RpcTimeoutError","RPC_TIMEOUT_ERROR","RpcMaxRetryError","rawErrors","RPC_MAX_RETRY_ERROR"],"mappings":"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"}