import { Token, TokenAmount, Price, Percent, CurrencyAmount, TradeType, ChainId } from '@traderjoe-xyz/sdk';
import { RouteV2 } from './route';
import { TradeOptions, TradeOptionsDeadline, TradeFee, SwapParameters, Quote } from '../types';
import { Hex, PublicClient } from 'viem';
/** Class representing a trade */
export declare class TradeV2 {
    readonly quote: Quote;
    readonly route: RouteV2;
    readonly tradeType: TradeType;
    readonly inputAmount: TokenAmount;
    readonly outputAmount: TokenAmount;
    readonly executionPrice: Price;
    readonly exactQuote: TokenAmount;
    readonly priceImpact: Percent;
    readonly isNativeIn: boolean;
    readonly isNativeOut: boolean;
    constructor(route: RouteV2, tokenIn: Token, tokenOut: Token, quote: Quote, isExactIn: boolean, isNativeIn: boolean, isNativeOut: boolean);
    /**
     * Get the minimum amount that must be received from this trade for the given slippage tolerance
     *
     * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
     * @returns {CurrencyAmount}
     */
    minimumAmountOut(slippageTolerance: Percent): CurrencyAmount;
    /**
     * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
     *
     * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
     * @returns {CurrencyAmount}
     */
    maximumAmountIn(slippageTolerance: Percent): CurrencyAmount;
    /**
     * Returns the on-chain method name and args for this trade
     *
     * @param {TradeOptions | TradeOptionsDeadline} options
     * @returns {SwapParameters}
     */
    swapCallParameters(options: TradeOptions | TradeOptionsDeadline): SwapParameters;
    /**
     * Calculates trade fee in terms of inputToken
     *
     * @returns {TradeFee}
     */
    getTradeFee(): Promise<TradeFee>;
    /**
     * Returns an estimate of the gas cost for the trade
     *
     * @param {PublicClient} publicClient - The public client
     * @param {ChainId} chainId - The network chain id
     * @param {Percent} slippageTolerance - The slippage tolerance
     * @returns {Promise<BigNumber>}
     */
    estimateGas(publicClient: PublicClient, account: Hex, chainId: ChainId, slippageTolerance: Percent): Promise<bigint>;
    /**
     * @static
     * Returns the list of trades, given a list of routes and a fixed amount of the input token
     *
     * @param {RouteV2[]} routes
     * @param {TokenAmount} tokenAmountIn
     * @param {Token} tokenOut
     * @param {boolean} isNativeIn
     * @param {boolean} isNativeOut
     * @param {PublicClient} publicClient
     * @param {ChainId} chainId
     * @returns {TradeV2[]}
     */
    static getTradesExactIn(routes: RouteV2[], tokenAmountIn: TokenAmount, tokenOut: Token, isNativeIn: boolean, isNativeOut: boolean, publicClient: PublicClient, chainId: ChainId): Promise<Array<TradeV2 | undefined>>;
    /**
     * @static
     * Returns the list of trades, given a list of routes and a fixed amount of the output token
     *
     * @param {RouteV2[]} routes
     * @param {TokenAmount} tokenAmountOut
     * @param {Token} tokenIn
     * @param {boolean} isNativeIn
     * @param {boolean} isNativeOut
     * @param {PublicClient} publicClient
     * @param {ChainId} chainId
     * @returns {TradeV2[]}
     */
    static getTradesExactOut(routes: RouteV2[], tokenAmountOut: TokenAmount, tokenIn: Token, isNativeIn: boolean, isNativeOut: boolean, publicClient: PublicClient, chainId: ChainId): Promise<Array<TradeV2 | undefined>>;
    /**
     * @static
     * Returns the best trade
     *
     * @param {TradeV2[]} trades
     * @param {boolean} isExactIn
     * @returns {TradeV2}
     */
    static chooseBestTrade(trades: TradeV2[], isExactIn: boolean): TradeV2 | undefined;
    /**
     * Selects the best trade given trades and gas
     *
     * @param {TradeV2[]} trades
     * @param {bigint[]} estimatedGas
     * @returns {bestTrade: TradeV2, estimatedGas: bigint}
     */
    static chooseBestTradeWithGas(trades: TradeV2[], estimatedGas: bigint[]): {
        bestTrade: TradeV2;
        estimatedGas: bigint;
    };
    /**
     * Returns an object representing this trade for a readable cosole.log
     *
     * @returns {Object}
     */
    toLog(): {
        route: {
            path: string;
        };
        tradeType: string;
        inputAmount: string;
        outputAmount: string;
        executionPrice: string;
        exactQuote: string;
        priceImpact: string;
        quote: {
            route: string;
            pairs: string;
            binSteps: string;
            versions: string;
            amounts: string;
            fees: string;
            virtualAmountsWithoutSlippage: string;
        };
    };
}
