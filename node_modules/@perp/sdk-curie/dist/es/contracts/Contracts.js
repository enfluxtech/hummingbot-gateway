import{AccountBalance__factory as e}from"./type/factories/AccountBalance__factory.js";import{constants as t}from"ethers";import{BaseToken__factory as o}from"./type/factories/BaseToken__factory.js";import{ClearingHouse__factory as r}from"./type/factories/ClearingHouse__factory.js";import{ClearingHouseConfig__factory as a}from"./type/factories/ClearingHouseConfig__factory.js";import{CollateralManager__factory as c}from"./type/factories/CollateralManager__factory.js";import{DelegateApproval__factory as s}from"./type/factories/DelegateApproval__factory.js";import{Exchange__factory as i}from"./type/factories/Exchange__factory.js";import"./type/factories/InsuranceFund__factory.js";import{IERC20Metadata__factory as n}from"./type/factories/IERC20Metadata__factory.js";import{MarketRegistry__factory as l}from"./type/factories/MarketRegistry__factory.js";import{OrderBook__factory as p}from"./type/factories/OrderBook__factory.js";import"./type/factories/QuoteToken__factory.js";import{Vault__factory as f}from"./type/factories/Vault__factory.js";import"./type/factories/VirtualToken__factory.js";import"./type/factories/BandPriceFeed__factory.js";import{ChainlinkPriceFeed__factory as d}from"./type/factories/ChainlinkPriceFeed__factory.js";import"./type/factories/ChainlinkPriceFeedV2__factory.js";import"./type/factories/EmergencyPriceFeed__factory.js";import{IPriceFeed__factory as _}from"./type/factories/IPriceFeed__factory.js";import"./type/factories/PriceFeedUpdater__factory.js";import"./type/factories/CumulativeTwap__factory.js";import{Multicall2__factory as m}from"./type/factories/Multicall2__factory.js";import{PerpPortal__factory as y}from"./type/factories/PerpPortal__factory.js";import{Quoter__factory as h}from"./type/factories/Quoter__factory.js";import{LimitOrderBook__factory as g}from"./type/factories/LimitOrderBook__factory.js";import"./type/factories/LimitOrderRewardVault__factory.js";import"./type/factories/MetaTxGateway__factory.js";import{UniswapV3Pool__factory as k}from"./type/factories/UniswapV3Pool__factory.js";import{AggregatorV3Interface__factory as T}from"./type/factories/AggregatorV3Interface__factory.js";var u;!function(e){e.VAULT="Vault",e.CLEARINGHOUSE="ClearingHouse",e.ORDERBOOK="OrderBook",e.CLEARINGHOUSE_CONFIG="ClearingHouseConfig",e.COLLATERAL_MANAGER="CollateralManager",e.SETTLEMENT_TOKEN="SettlementToken",e.COLLATERAL_TOKENS="CollateralTokens",e.BASE_TOKEN="BaseToken",e.CHAINLINK_PRICE_FEED="ChainlinkPriceFeed",e.POOL="Pool",e.QUOTER="Quoter",e.EXCHANGE="Exchange",e.ACCOUNT_BALANCE="AccountBalance",e.MARKET_REGISTRY="MarketRegistry",e.MULTICALL2="Multicall2",e.PerpPortal="PerpPortal",e.Token0="Token0",e.Token1="Token1",e.LimitOrderBook="LimitOrderBook",e.DelegateApproval="DelegateApproval"}(u||(u={}));class C{constructor({metadata:_,provider:u}){this.hasSigner=!1,this.collateralTokenMap=new Map;const{ClearingHouse:C,ClearingHouseConfig:A,OrderBook:E,Vault:j,Quoter:O,Exchange:M,MarketRegistry:P,AccountBalance:B,Multicall2:L,PerpPortal:R,CollateralManager:v,LimitOrderBook:F,DelegateApproval:H}=_.contracts,{USDC:I}=_.externalContracts,N=_.collaterals;this._setCollateralTokenMap(N,u),this.vault=f.connect(j.address,u),this.clearingHouse=r.connect(C.address,u),this.clearingHouseConfig=a.connect(A.address,u),this.orderBook=p.connect(E.address,u),this.collateralManager=c.connect(v.address,u),this.settlementToken=n.connect(I,u),this.baseToken=o.connect(t.AddressZero,u),this.baseTokenPriceFeed=d.connect(t.AddressZero,u),this.baseTokenPriceFeedAggregator=T.connect(t.AddressZero,u),this.pool=k.connect(t.AddressZero,u),this.quoter=h.connect(O.address,u),this.exchange=i.connect(M.address,u),this.marketRegistry=l.connect(P.address,u),this.accountBalance=e.connect(B.address,u),this.multicall2=m.connect(L.address,u),this.perpPortal=y.connect(R.address,u),this.limitOrderBook=g.connect(F.address,u),this.delegateApproval=s.connect(H.address,u),this._provider=u}connect(e){this.hasSigner=!0,this.vault=this.vault.connect(e),this.clearingHouse=this.clearingHouse.connect(e),this.settlementToken=this.settlementToken.connect(e),this.collateralTokenMap.forEach(((t,o)=>{this.collateralTokenMap.set(o,{...t,contract:t.contract.connect(e)})})),this.delegateApproval=this.delegateApproval.connect(e),this.limitOrderBook=this.limitOrderBook.connect(e)}createIERC20Token(e){return n.connect(e,this._provider)}_setCollateralTokenMap(e,t){e.forEach((e=>this.collateralTokenMap.set(e.address,{contract:n.connect(e.address,t),priceFeedContract:_.connect(e.priceFeedAddress,t)})))}}export{u as ContractName,C as Contracts};
//# sourceMappingURL=Contracts.js.map
