// package: injective.oracle.v1beta1
// file: injective/oracle/v1beta1/oracle.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";

export class Params extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Params.AsObject;
  static toObject(includeInstance: boolean, msg: Params): Params.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Params, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Params;
  static deserializeBinaryFromReader(message: Params, reader: jspb.BinaryReader): Params;
}

export namespace Params {
  export type AsObject = {
  }
}

export class OracleInfo extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  getOracleType(): OracleTypeMap[keyof OracleTypeMap];
  setOracleType(value: OracleTypeMap[keyof OracleTypeMap]): void;

  getScaleFactor(): number;
  setScaleFactor(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OracleInfo.AsObject;
  static toObject(includeInstance: boolean, msg: OracleInfo): OracleInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OracleInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OracleInfo;
  static deserializeBinaryFromReader(message: OracleInfo, reader: jspb.BinaryReader): OracleInfo;
}

export namespace OracleInfo {
  export type AsObject = {
    symbol: string,
    oracleType: OracleTypeMap[keyof OracleTypeMap],
    scaleFactor: number,
  }
}

export class ChainlinkPriceState extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  getAnswer(): string;
  setAnswer(value: string): void;

  getTimestamp(): number;
  setTimestamp(value: number): void;

  hasPriceState(): boolean;
  clearPriceState(): void;
  getPriceState(): PriceState | undefined;
  setPriceState(value?: PriceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ChainlinkPriceState.AsObject;
  static toObject(includeInstance: boolean, msg: ChainlinkPriceState): ChainlinkPriceState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ChainlinkPriceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ChainlinkPriceState;
  static deserializeBinaryFromReader(message: ChainlinkPriceState, reader: jspb.BinaryReader): ChainlinkPriceState;
}

export namespace ChainlinkPriceState {
  export type AsObject = {
    feedId: string,
    answer: string,
    timestamp: number,
    priceState?: PriceState.AsObject,
  }
}

export class BandPriceState extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  getRate(): string;
  setRate(value: string): void;

  getResolveTime(): number;
  setResolveTime(value: number): void;

  getRequestId(): number;
  setRequestId(value: number): void;

  hasPriceState(): boolean;
  clearPriceState(): void;
  getPriceState(): PriceState | undefined;
  setPriceState(value?: PriceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BandPriceState.AsObject;
  static toObject(includeInstance: boolean, msg: BandPriceState): BandPriceState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BandPriceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BandPriceState;
  static deserializeBinaryFromReader(message: BandPriceState, reader: jspb.BinaryReader): BandPriceState;
}

export namespace BandPriceState {
  export type AsObject = {
    symbol: string,
    rate: string,
    resolveTime: number,
    requestId: number,
    priceState?: PriceState.AsObject,
  }
}

export class PriceFeedState extends jspb.Message {
  getBase(): string;
  setBase(value: string): void;

  getQuote(): string;
  setQuote(value: string): void;

  hasPriceState(): boolean;
  clearPriceState(): void;
  getPriceState(): PriceState | undefined;
  setPriceState(value?: PriceState): void;

  clearRelayersList(): void;
  getRelayersList(): Array<string>;
  setRelayersList(value: Array<string>): void;
  addRelayers(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceFeedState.AsObject;
  static toObject(includeInstance: boolean, msg: PriceFeedState): PriceFeedState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceFeedState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceFeedState;
  static deserializeBinaryFromReader(message: PriceFeedState, reader: jspb.BinaryReader): PriceFeedState;
}

export namespace PriceFeedState {
  export type AsObject = {
    base: string,
    quote: string,
    priceState?: PriceState.AsObject,
    relayersList: Array<string>,
  }
}

export class ProviderInfo extends jspb.Message {
  getProvider(): string;
  setProvider(value: string): void;

  clearRelayersList(): void;
  getRelayersList(): Array<string>;
  setRelayersList(value: Array<string>): void;
  addRelayers(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProviderInfo.AsObject;
  static toObject(includeInstance: boolean, msg: ProviderInfo): ProviderInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProviderInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProviderInfo;
  static deserializeBinaryFromReader(message: ProviderInfo, reader: jspb.BinaryReader): ProviderInfo;
}

export namespace ProviderInfo {
  export type AsObject = {
    provider: string,
    relayersList: Array<string>,
  }
}

export class ProviderState extends jspb.Message {
  hasProviderInfo(): boolean;
  clearProviderInfo(): void;
  getProviderInfo(): ProviderInfo | undefined;
  setProviderInfo(value?: ProviderInfo): void;

  clearProviderPriceStatesList(): void;
  getProviderPriceStatesList(): Array<ProviderPriceState>;
  setProviderPriceStatesList(value: Array<ProviderPriceState>): void;
  addProviderPriceStates(value?: ProviderPriceState, index?: number): ProviderPriceState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProviderState.AsObject;
  static toObject(includeInstance: boolean, msg: ProviderState): ProviderState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProviderState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProviderState;
  static deserializeBinaryFromReader(message: ProviderState, reader: jspb.BinaryReader): ProviderState;
}

export namespace ProviderState {
  export type AsObject = {
    providerInfo?: ProviderInfo.AsObject,
    providerPriceStatesList: Array<ProviderPriceState.AsObject>,
  }
}

export class ProviderPriceState extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  hasState(): boolean;
  clearState(): void;
  getState(): PriceState | undefined;
  setState(value?: PriceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ProviderPriceState.AsObject;
  static toObject(includeInstance: boolean, msg: ProviderPriceState): ProviderPriceState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ProviderPriceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ProviderPriceState;
  static deserializeBinaryFromReader(message: ProviderPriceState, reader: jspb.BinaryReader): ProviderPriceState;
}

export namespace ProviderPriceState {
  export type AsObject = {
    symbol: string,
    state?: PriceState.AsObject,
  }
}

export class PriceFeedInfo extends jspb.Message {
  getBase(): string;
  setBase(value: string): void;

  getQuote(): string;
  setQuote(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceFeedInfo.AsObject;
  static toObject(includeInstance: boolean, msg: PriceFeedInfo): PriceFeedInfo.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceFeedInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceFeedInfo;
  static deserializeBinaryFromReader(message: PriceFeedInfo, reader: jspb.BinaryReader): PriceFeedInfo;
}

export namespace PriceFeedInfo {
  export type AsObject = {
    base: string,
    quote: string,
  }
}

export class PriceFeedPrice extends jspb.Message {
  getPrice(): string;
  setPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceFeedPrice.AsObject;
  static toObject(includeInstance: boolean, msg: PriceFeedPrice): PriceFeedPrice.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceFeedPrice, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceFeedPrice;
  static deserializeBinaryFromReader(message: PriceFeedPrice, reader: jspb.BinaryReader): PriceFeedPrice;
}

export namespace PriceFeedPrice {
  export type AsObject = {
    price: string,
  }
}

export class CoinbasePriceState extends jspb.Message {
  getKind(): string;
  setKind(value: string): void;

  getTimestamp(): number;
  setTimestamp(value: number): void;

  getKey(): string;
  setKey(value: string): void;

  getValue(): number;
  setValue(value: number): void;

  hasPriceState(): boolean;
  clearPriceState(): void;
  getPriceState(): PriceState | undefined;
  setPriceState(value?: PriceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CoinbasePriceState.AsObject;
  static toObject(includeInstance: boolean, msg: CoinbasePriceState): CoinbasePriceState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CoinbasePriceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CoinbasePriceState;
  static deserializeBinaryFromReader(message: CoinbasePriceState, reader: jspb.BinaryReader): CoinbasePriceState;
}

export namespace CoinbasePriceState {
  export type AsObject = {
    kind: string,
    timestamp: number,
    key: string,
    value: number,
    priceState?: PriceState.AsObject,
  }
}

export class PriceState extends jspb.Message {
  getPrice(): string;
  setPrice(value: string): void;

  getCumulativePrice(): string;
  setCumulativePrice(value: string): void;

  getTimestamp(): number;
  setTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceState.AsObject;
  static toObject(includeInstance: boolean, msg: PriceState): PriceState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceState;
  static deserializeBinaryFromReader(message: PriceState, reader: jspb.BinaryReader): PriceState;
}

export namespace PriceState {
  export type AsObject = {
    price: string,
    cumulativePrice: string,
    timestamp: number,
  }
}

export class BandOracleRequest extends jspb.Message {
  getRequestId(): number;
  setRequestId(value: number): void;

  getOracleScriptId(): number;
  setOracleScriptId(value: number): void;

  clearSymbolsList(): void;
  getSymbolsList(): Array<string>;
  setSymbolsList(value: Array<string>): void;
  addSymbols(value: string, index?: number): string;

  getAskCount(): number;
  setAskCount(value: number): void;

  getMinCount(): number;
  setMinCount(value: number): void;

  clearFeeLimitList(): void;
  getFeeLimitList(): Array<cosmos_base_v1beta1_coin_pb.Coin>;
  setFeeLimitList(value: Array<cosmos_base_v1beta1_coin_pb.Coin>): void;
  addFeeLimit(value?: cosmos_base_v1beta1_coin_pb.Coin, index?: number): cosmos_base_v1beta1_coin_pb.Coin;

  getPrepareGas(): number;
  setPrepareGas(value: number): void;

  getExecuteGas(): number;
  setExecuteGas(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BandOracleRequest.AsObject;
  static toObject(includeInstance: boolean, msg: BandOracleRequest): BandOracleRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BandOracleRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BandOracleRequest;
  static deserializeBinaryFromReader(message: BandOracleRequest, reader: jspb.BinaryReader): BandOracleRequest;
}

export namespace BandOracleRequest {
  export type AsObject = {
    requestId: number,
    oracleScriptId: number,
    symbolsList: Array<string>,
    askCount: number,
    minCount: number,
    feeLimitList: Array<cosmos_base_v1beta1_coin_pb.Coin.AsObject>,
    prepareGas: number,
    executeGas: number,
  }
}

export class BandIBCParams extends jspb.Message {
  getBandIbcEnabled(): boolean;
  setBandIbcEnabled(value: boolean): void;

  getIbcRequestInterval(): number;
  setIbcRequestInterval(value: number): void;

  getIbcSourceChannel(): string;
  setIbcSourceChannel(value: string): void;

  getIbcVersion(): string;
  setIbcVersion(value: string): void;

  getIbcPortId(): string;
  setIbcPortId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BandIBCParams.AsObject;
  static toObject(includeInstance: boolean, msg: BandIBCParams): BandIBCParams.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BandIBCParams, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BandIBCParams;
  static deserializeBinaryFromReader(message: BandIBCParams, reader: jspb.BinaryReader): BandIBCParams;
}

export namespace BandIBCParams {
  export type AsObject = {
    bandIbcEnabled: boolean,
    ibcRequestInterval: number,
    ibcSourceChannel: string,
    ibcVersion: string,
    ibcPortId: string,
  }
}

export class SymbolPriceTimestamp extends jspb.Message {
  getOracle(): OracleTypeMap[keyof OracleTypeMap];
  setOracle(value: OracleTypeMap[keyof OracleTypeMap]): void;

  getSymbolId(): string;
  setSymbolId(value: string): void;

  getTimestamp(): number;
  setTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SymbolPriceTimestamp.AsObject;
  static toObject(includeInstance: boolean, msg: SymbolPriceTimestamp): SymbolPriceTimestamp.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SymbolPriceTimestamp, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SymbolPriceTimestamp;
  static deserializeBinaryFromReader(message: SymbolPriceTimestamp, reader: jspb.BinaryReader): SymbolPriceTimestamp;
}

export namespace SymbolPriceTimestamp {
  export type AsObject = {
    oracle: OracleTypeMap[keyof OracleTypeMap],
    symbolId: string,
    timestamp: number,
  }
}

export class LastPriceTimestamps extends jspb.Message {
  clearLastPriceTimestampsList(): void;
  getLastPriceTimestampsList(): Array<SymbolPriceTimestamp>;
  setLastPriceTimestampsList(value: Array<SymbolPriceTimestamp>): void;
  addLastPriceTimestamps(value?: SymbolPriceTimestamp, index?: number): SymbolPriceTimestamp;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): LastPriceTimestamps.AsObject;
  static toObject(includeInstance: boolean, msg: LastPriceTimestamps): LastPriceTimestamps.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: LastPriceTimestamps, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): LastPriceTimestamps;
  static deserializeBinaryFromReader(message: LastPriceTimestamps, reader: jspb.BinaryReader): LastPriceTimestamps;
}

export namespace LastPriceTimestamps {
  export type AsObject = {
    lastPriceTimestampsList: Array<SymbolPriceTimestamp.AsObject>,
  }
}

export class PriceRecords extends jspb.Message {
  getOracle(): OracleTypeMap[keyof OracleTypeMap];
  setOracle(value: OracleTypeMap[keyof OracleTypeMap]): void;

  getSymbolId(): string;
  setSymbolId(value: string): void;

  clearLatestPriceRecordsList(): void;
  getLatestPriceRecordsList(): Array<PriceRecord>;
  setLatestPriceRecordsList(value: Array<PriceRecord>): void;
  addLatestPriceRecords(value?: PriceRecord, index?: number): PriceRecord;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceRecords.AsObject;
  static toObject(includeInstance: boolean, msg: PriceRecords): PriceRecords.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceRecords, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceRecords;
  static deserializeBinaryFromReader(message: PriceRecords, reader: jspb.BinaryReader): PriceRecords;
}

export namespace PriceRecords {
  export type AsObject = {
    oracle: OracleTypeMap[keyof OracleTypeMap],
    symbolId: string,
    latestPriceRecordsList: Array<PriceRecord.AsObject>,
  }
}

export class PriceRecord extends jspb.Message {
  getTimestamp(): number;
  setTimestamp(value: number): void;

  getPrice(): string;
  setPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PriceRecord.AsObject;
  static toObject(includeInstance: boolean, msg: PriceRecord): PriceRecord.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PriceRecord, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PriceRecord;
  static deserializeBinaryFromReader(message: PriceRecord, reader: jspb.BinaryReader): PriceRecord;
}

export namespace PriceRecord {
  export type AsObject = {
    timestamp: number,
    price: string,
  }
}

export class MetadataStatistics extends jspb.Message {
  getGroupCount(): number;
  setGroupCount(value: number): void;

  getRecordsSampleSize(): number;
  setRecordsSampleSize(value: number): void;

  getMean(): string;
  setMean(value: string): void;

  getTwap(): string;
  setTwap(value: string): void;

  getFirstTimestamp(): number;
  setFirstTimestamp(value: number): void;

  getLastTimestamp(): number;
  setLastTimestamp(value: number): void;

  getMinPrice(): string;
  setMinPrice(value: string): void;

  getMaxPrice(): string;
  setMaxPrice(value: string): void;

  getMedianPrice(): string;
  setMedianPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MetadataStatistics.AsObject;
  static toObject(includeInstance: boolean, msg: MetadataStatistics): MetadataStatistics.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MetadataStatistics, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MetadataStatistics;
  static deserializeBinaryFromReader(message: MetadataStatistics, reader: jspb.BinaryReader): MetadataStatistics;
}

export namespace MetadataStatistics {
  export type AsObject = {
    groupCount: number,
    recordsSampleSize: number,
    mean: string,
    twap: string,
    firstTimestamp: number,
    lastTimestamp: number,
    minPrice: string,
    maxPrice: string,
    medianPrice: string,
  }
}

export interface OracleTypeMap {
  UNSPECIFIED: 0;
  BAND: 1;
  PRICEFEED: 2;
  COINBASE: 3;
  CHAINLINK: 4;
  RAZOR: 5;
  DIA: 6;
  API3: 7;
  UMA: 8;
  PYTH: 9;
  BANDIBC: 10;
  PROVIDER: 11;
}

export const OracleType: OracleTypeMap;

