export declare const LBRouterABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "contract ILBFactory";
        readonly name: "_factory";
        readonly type: "address";
    }, {
        readonly internalType: "contract IJoeFactory";
        readonly name: "_oldFactory";
        readonly type: "address";
    }, {
        readonly internalType: "contract IWAVAX";
        readonly name: "_wavax";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "bp";
        readonly type: "uint256";
    }];
    readonly name: "BinHelper__BinStepOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "int256";
        readonly name: "id";
        readonly type: "int256";
    }];
    readonly name: "BinHelper__IdOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "id";
        readonly type: "uint256";
    }];
    readonly name: "BinHelper__IntOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountXMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__AmountSlippageCaught";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "id";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__BinReserveOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__BrokenSwapSafetyCheck";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "currentTimestamp";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__DeadlineExceeded";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__FailedToSendAVAX";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "idDesired";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "idSlippage";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__IdDesiredOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "int256";
        readonly name: "id";
        readonly type: "int256";
    }];
    readonly name: "LBRouter__IdOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "activeIdDesired";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "idSlippage";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "activeId";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__IdSlippageCaught";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOutMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__InsufficientAmountOut";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "wrongToken";
        readonly type: "address";
    }];
    readonly name: "LBRouter__InvalidTokenPath";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__LengthsMismatch";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountInMax";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__MaxAmountInExceeded";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__NotFactoryOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "binStep";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__PairNotCreated";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__SenderIsNotWAVAX";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "id";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__SwapOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "excess";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__TooMuchTokensIn";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "reserve";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__WrongAmounts";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "msgValue";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__WrongAvaxLiquidityParameters";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__WrongTokenOrder";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Math128x128__LogUnderflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "x";
        readonly type: "uint256";
    }, {
        readonly internalType: "int256";
        readonly name: "y";
        readonly type: "int256";
    }];
    readonly name: "Math128x128__PowerUnderflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "prod1";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "denominator";
        readonly type: "uint256";
    }];
    readonly name: "Math512Bits__MulDivOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "prod1";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "offset";
        readonly type: "uint256";
    }];
    readonly name: "Math512Bits__MulShiftOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "offset";
        readonly type: "uint256";
    }];
    readonly name: "Math512Bits__OffsetOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "x";
        readonly type: "uint256";
    }];
    readonly name: "SafeCast__Exceeds128Bits";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "x";
        readonly type: "uint256";
    }];
    readonly name: "SafeCast__Exceeds40Bits";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "binStep";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountX";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountY";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountXMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountYMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "activeIdDesired";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "idSlippage";
            readonly type: "uint256";
        }, {
            readonly internalType: "int256[]";
            readonly name: "deltaIds";
            readonly type: "int256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionX";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionY";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILBRouter.LiquidityParameters";
        readonly name: "_liquidityParameters";
        readonly type: "tuple";
    }];
    readonly name: "addLiquidity";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "depositIds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "liquidityMinted";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "binStep";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountX";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountY";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountXMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountYMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "activeIdDesired";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "idSlippage";
            readonly type: "uint256";
        }, {
            readonly internalType: "int256[]";
            readonly name: "deltaIds";
            readonly type: "int256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionX";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionY";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILBRouter.LiquidityParameters";
        readonly name: "_liquidityParameters";
        readonly type: "tuple";
    }];
    readonly name: "addLiquidityAVAX";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "depositIds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "liquidityMinted";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "_tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "_tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint24";
        readonly name: "_activeId";
        readonly type: "uint24";
    }, {
        readonly internalType: "uint16";
        readonly name: "_binStep";
        readonly type: "uint16";
    }];
    readonly name: "createLBPair";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "pair";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "factory";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBFactory";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "_LBPair";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_price";
        readonly type: "uint256";
    }];
    readonly name: "getIdFromPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint24";
        readonly name: "";
        readonly type: "uint24";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "_LBPair";
        readonly type: "address";
    }, {
        readonly internalType: "uint24";
        readonly name: "_id";
        readonly type: "uint24";
    }];
    readonly name: "getPriceFromId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "_LBPair";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "_swapForY";
        readonly type: "bool";
    }];
    readonly name: "getSwapIn";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "feesIn";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "_LBPair";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "_swapForY";
        readonly type: "bool";
    }];
    readonly name: "getSwapOut";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "feesIn";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "oldFactory";
    readonly outputs: readonly [{
        readonly internalType: "contract IJoeFactory";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "_tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "_tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "_binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountXMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountYMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_amounts";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "removeLiquidity";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "_token";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "_binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountTokenMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountAVAXMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_amounts";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address payable";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "removeLiquidityAVAX";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountToken";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountAVAX";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapAVAXForExactTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsIn";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountOutMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactAVAXForTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountOutMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactAVAXForTokensSupportingFeeOnTransferTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountOutMinAVAX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address payable";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForAVAX";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountOutMinAVAX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address payable";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForAVAXSupportingFeeOnTransferTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountOutMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountOutMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForTokensSupportingFeeOnTransferTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountAVAXOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountInMax";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address payable";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapTokensForExactAVAX";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsIn";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amountInMax";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_pairBinSteps";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "contract IERC20[]";
        readonly name: "_tokenPath";
        readonly type: "address[]";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapTokensForExactTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsIn";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "_token";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }];
    readonly name: "sweep";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBToken";
        readonly name: "_lbToken";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "_amounts";
        readonly type: "uint256[]";
    }];
    readonly name: "sweepLBToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "wavax";
    readonly outputs: readonly [{
        readonly internalType: "contract IWAVAX";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
