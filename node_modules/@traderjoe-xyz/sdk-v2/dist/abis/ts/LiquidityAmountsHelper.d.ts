export declare const LiquidityAmountsHelperABI: readonly [{
    readonly inputs: readonly [];
    readonly name: "LiquidityAmounts__LengthMismatch";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "SafeCast__Exceeds24Bits";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "x";
        readonly type: "uint256";
    }, {
        readonly internalType: "int256";
        readonly name: "y";
        readonly type: "int256";
    }];
    readonly name: "Uint128x128Math__PowUnderflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Uint256x256Math__MulDivOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Uint256x256Math__MulShiftOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address";
        readonly name: "LBPair";
        readonly type: "address";
    }];
    readonly name: "getAmountsAndLiquiditiesOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsX";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "amountsY";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "liquidities";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "liquidities";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "totalSupplies";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint112[]";
        readonly name: "binReservesX";
        readonly type: "uint112[]";
    }, {
        readonly internalType: "uint112[]";
        readonly name: "binReservesY";
        readonly type: "uint112[]";
    }];
    readonly name: "getAmountsForLiquidities";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address";
        readonly name: "LBPair";
        readonly type: "address";
    }];
    readonly name: "getAmountsOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsX";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "amountsY";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address";
        readonly name: "LBPair";
        readonly type: "address";
    }];
    readonly name: "getBalanceOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "balances";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint112";
        readonly name: "amountX";
        readonly type: "uint112";
    }, {
        readonly internalType: "uint112";
        readonly name: "amountY";
        readonly type: "uint112";
    }];
    readonly name: "getLiquiditiesForAmounts";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "liquidities";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "user";
        readonly type: "address";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address";
        readonly name: "LBPair";
        readonly type: "address";
    }];
    readonly name: "getTotalAmountsOf";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "totalAmountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "totalAmountY";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];
