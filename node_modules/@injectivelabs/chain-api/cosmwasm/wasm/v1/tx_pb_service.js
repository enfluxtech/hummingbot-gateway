// package: cosmwasm.wasm.v1
// file: cosmwasm/wasm/v1/tx.proto

var cosmwasm_wasm_v1_tx_pb = require("../../../cosmwasm/wasm/v1/tx_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Msg = (function () {
  function Msg() {}
  Msg.serviceName = "cosmwasm.wasm.v1.Msg";
  return Msg;
}());

Msg.StoreCode = {
  methodName: "StoreCode",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_tx_pb.MsgStoreCode,
  responseType: cosmwasm_wasm_v1_tx_pb.MsgStoreCodeResponse
};

Msg.InstantiateContract = {
  methodName: "InstantiateContract",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_tx_pb.MsgInstantiateContract,
  responseType: cosmwasm_wasm_v1_tx_pb.MsgInstantiateContractResponse
};

Msg.ExecuteContract = {
  methodName: "ExecuteContract",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_tx_pb.MsgExecuteContract,
  responseType: cosmwasm_wasm_v1_tx_pb.MsgExecuteContractResponse
};

Msg.MigrateContract = {
  methodName: "MigrateContract",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_tx_pb.MsgMigrateContract,
  responseType: cosmwasm_wasm_v1_tx_pb.MsgMigrateContractResponse
};

Msg.UpdateAdmin = {
  methodName: "UpdateAdmin",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_tx_pb.MsgUpdateAdmin,
  responseType: cosmwasm_wasm_v1_tx_pb.MsgUpdateAdminResponse
};

Msg.ClearAdmin = {
  methodName: "ClearAdmin",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: cosmwasm_wasm_v1_tx_pb.MsgClearAdmin,
  responseType: cosmwasm_wasm_v1_tx_pb.MsgClearAdminResponse
};

exports.Msg = Msg;

function MsgClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

MsgClient.prototype.storeCode = function storeCode(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.StoreCode, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.instantiateContract = function instantiateContract(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.InstantiateContract, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.executeContract = function executeContract(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.ExecuteContract, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.migrateContract = function migrateContract(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.MigrateContract, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.updateAdmin = function updateAdmin(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.UpdateAdmin, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.clearAdmin = function clearAdmin(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.ClearAdmin, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.MsgClient = MsgClient;

