{"version":3,"file":"utils.js","sources":["../../../../src/core/clearingHouse/utils.ts"],"sourcesContent":["import { BIG_ZERO } from \"../../constants\"\nimport Big from \"big.js\"\nimport { FailedPreconditionError } from \"../../errors\"\nimport { PositionSide } from \"../position/types\"\nimport { invariant } from \"../../utils\"\n\ninterface GetTransactionFeeParams {\n    isBaseToQuote: boolean\n    exchangedPositionNotional: Big\n    deltaAvailableQuote: Big\n    feeRatio: Big\n}\n\nexport function getTransactionFee({\n    isBaseToQuote,\n    exchangedPositionNotional,\n    deltaAvailableQuote,\n    feeRatio,\n}: GetTransactionFeeParams) {\n    return isBaseToQuote ? exchangedPositionNotional.mul(feeRatio) : deltaAvailableQuote.mul(feeRatio)\n}\n\ninterface GetUnrealizedPnlParams {\n    isLong: boolean\n    openNotionalAbs: Big\n    deltaAvailableQuote: Big\n}\n\n// NOTE: deltaAvailableQuote is absolute (always >= 0)\nexport function getUnrealizedPnl({ isLong, openNotionalAbs, deltaAvailableQuote }: GetUnrealizedPnlParams) {\n    return isLong ? deltaAvailableQuote.sub(openNotionalAbs) : openNotionalAbs.sub(deltaAvailableQuote)\n}\n\ninterface GetSwapRateParams {\n    amountBase: Big\n    amountQuote: Big\n}\n\nexport function getSwapRate({ amountBase, amountQuote }: GetSwapRateParams) {\n    return amountQuote.div(amountBase).abs()\n}\n\ninterface GetPriceImpactParams {\n    price: Big\n    markPrice: Big\n}\n\nexport function getPriceImpact({ price, markPrice }: GetPriceImpactParams) {\n    return price.div(markPrice).sub(1)\n}\n\ninterface GetBuyingPowerParams {\n    imRatio: Big\n    freeCollateral: Big\n    side: PositionSide\n    existingPositionValue?: Big\n    nextFreeCollateral: Big\n}\n\nexport function getBuyingPower({\n    imRatio,\n    freeCollateral,\n    existingPositionValue = BIG_ZERO,\n    side,\n    nextFreeCollateral,\n}: GetBuyingPowerParams) {\n    invariant(\n        !imRatio.eq(0),\n        () => new FailedPreconditionError({ functionName: \"getBuyingPower\", stateName: \"imRatio\", stateValue: \"zero\" }),\n    )\n\n    const hasExistingPosition = !existingPositionValue.eq(0)\n    let isSameSideAsExistingPosition\n    if (hasExistingPosition) {\n        const existingPositionSide = existingPositionValue.gt(0) ? PositionSide.LONG : PositionSide.SHORT\n        isSameSideAsExistingPosition = existingPositionSide === side\n    }\n\n    let buyingPower\n    if (!hasExistingPosition || isSameSideAsExistingPosition) {\n        buyingPower = freeCollateral.div(imRatio)\n    } else {\n        buyingPower = existingPositionValue.abs().add(nextFreeCollateral.div(imRatio))\n    }\n    return buyingPower\n}\n\n/**\n * NOTE:\n * nextAccountValue = accountValue + deltaAccountValue\n * deltaAccountValue = signedDeltaAvailableBase * indexTwapPrice + signedDeltaAvailableQuote\n */\ninterface GetNextAccountValueParams {\n    indexTwapPrice: Big\n    accountValue: Big\n    signedDeltaAvailableBase: Big\n    signedDeltaAvailableQuote: Big\n}\nexport function getNextAccountValue({\n    indexTwapPrice,\n    accountValue,\n    signedDeltaAvailableBase,\n    signedDeltaAvailableQuote,\n}: GetNextAccountValueParams) {\n    const deltaAccountValue = signedDeltaAvailableBase.mul(indexTwapPrice).add(signedDeltaAvailableQuote)\n    return accountValue.add(deltaAccountValue)\n}\n\n/**\n * NOTE: the formula did not consider the realized PNL, we should include it in the future\n * nextOpenOrderMarginReq = ((otherBaseDebtValue + absMinNextThisBaseBalance * thisBaseIndexPrice) + absMinNextQuoteBalance) * ratio\n */\ninterface GetNextOpenOrderMarginReqParams {\n    sumOfOtherBaseDebtValue: Big\n    sumOfQuoteDebtValue: Big\n    thisBaseBalance: Big\n    signedDeltaAvailableBase: Big\n    signedDeltaAvailableQuote: Big\n    indexTwapPrice: Big\n    imRatio: Big\n}\nexport function getNextOpenOrderMarginReq({\n    sumOfOtherBaseDebtValue,\n    sumOfQuoteDebtValue,\n    thisBaseBalance,\n    signedDeltaAvailableBase,\n    signedDeltaAvailableQuote,\n    indexTwapPrice,\n    imRatio,\n}: GetNextOpenOrderMarginReqParams) {\n    const nextThisBaseBalance = thisBaseBalance.add(signedDeltaAvailableBase)\n    const absMinNextThisBaseBalance = nextThisBaseBalance.lt(0) ? nextThisBaseBalance.abs() : BIG_ZERO\n\n    const nextQuoteBalance = sumOfQuoteDebtValue.add(signedDeltaAvailableQuote)\n    const absMinNextQuoteBalance = nextQuoteBalance.lt(0) ? nextQuoteBalance.abs() : BIG_ZERO\n\n    return sumOfOtherBaseDebtValue\n        .add(absMinNextThisBaseBalance.mul(indexTwapPrice))\n        .add(absMinNextQuoteBalance)\n        .mul(imRatio)\n}\n\n/**\n * NOTE:\n * nextUnrealizedPNL = signedDeltaAvailableBase * indexPrice + signedDeltaAvailableQuote\n * nextTotalUnrealizedPNL = totalUnrealizedPNL + nextUnrealizedPNL\n * nextTotalCollateralValue\n * = nextAccountValue - nextTotalUnrealizedPNL\n * = nextAccountValue - (totalUnrealizedPNL + nextUnrealizedPNL)\n */\ninterface GetNextTotalCollateralValueParams {\n    nextAccountValue: Big\n    signedDeltaAvailableBase: Big\n    signedDeltaAvailableQuote: Big\n    indexTwapPrice: Big\n    totalUnrealizedPNLFromAllMarkets: Big\n}\nexport function getNextTotalCollateralValue({\n    nextAccountValue,\n    signedDeltaAvailableBase,\n    signedDeltaAvailableQuote,\n    indexTwapPrice,\n    totalUnrealizedPNLFromAllMarkets,\n}: GetNextTotalCollateralValueParams) {\n    const nextTotalUnrealizedPNL = totalUnrealizedPNLFromAllMarkets.add(\n        signedDeltaAvailableBase.mul(indexTwapPrice).add(signedDeltaAvailableQuote),\n    )\n\n    return nextAccountValue.sub(nextTotalUnrealizedPNL)\n}\n\n/**\n * NOTE: next free collateral\n * FIXME: this result might have negative value somehow\n * nextFreeCollateral = min(nextTotalCollateralValue, nextAccountValue) - nextOpenOrderMarginReq(Ratio)\n */\ninterface GetNextFreeCollateralParams {\n    nextTotalCollateralValue: Big\n    nextAccountValue: Big\n    nextOpenOrderMarginReq: Big\n}\nexport function getNextFreeCollateral({\n    nextTotalCollateralValue,\n    nextAccountValue,\n    nextOpenOrderMarginReq,\n}: GetNextFreeCollateralParams) {\n    const minValue = nextTotalCollateralValue.gt(nextAccountValue) ? nextAccountValue : nextTotalCollateralValue\n    return minValue.sub(nextOpenOrderMarginReq)\n}\n"],"names":["getTransactionFee","isBaseToQuote","exchangedPositionNotional","deltaAvailableQuote","feeRatio","mul","getUnrealizedPnl","isLong","openNotionalAbs","sub","getSwapRate","amountBase","amountQuote","div","abs","getPriceImpact","price","markPrice","getBuyingPower","imRatio","freeCollateral","existingPositionValue","BIG_ZERO","side","nextFreeCollateral","invariant","eq","FailedPreconditionError","functionName","stateName","stateValue","hasExistingPosition","isSameSideAsExistingPosition","buyingPower","gt","PositionSide","LONG","SHORT","add","getNextAccountValue","indexTwapPrice","accountValue","signedDeltaAvailableBase","signedDeltaAvailableQuote","deltaAccountValue","getNextOpenOrderMarginReq","sumOfOtherBaseDebtValue","sumOfQuoteDebtValue","thisBaseBalance","nextThisBaseBalance","absMinNextThisBaseBalance","lt","nextQuoteBalance","absMinNextQuoteBalance","getNextTotalCollateralValue","nextAccountValue","totalUnrealizedPNLFromAllMarkets","nextTotalUnrealizedPNL","getNextFreeCollateral","nextTotalCollateralValue","nextOpenOrderMarginReq"],"mappings":"qUAaM,SAAUA,GAAkBC,cAC9BA,EAAaC,0BACbA,EAAyBC,oBACzBA,EAAmBC,SACnBA,IAEA,OAAOH,EAAgBC,EAA0BG,IAAID,GAAYD,EAAoBE,IAAID,EAC7F,CASM,SAAUE,GAAiBC,OAAEA,EAAMC,gBAAEA,EAAeL,oBAAEA,IACxD,OAAOI,EAASJ,EAAoBM,IAAID,GAAmBA,EAAgBC,IAAIN,EACnF,UAOgBO,GAAYC,WAAEA,EAAUC,YAAEA,IACtC,OAAOA,EAAYC,IAAIF,GAAYG,KACvC,UAOgBC,GAAeC,MAAEA,EAAKC,UAAEA,IACpC,OAAOD,EAAMH,IAAII,GAAWR,IAAI,EACpC,CAUgB,SAAAS,GAAeC,QAC3BA,EAAOC,eACPA,EAAcC,sBACdA,EAAwBC,EAAQC,KAChCA,EAAIC,mBACJA,IAEAC,GACKN,EAAQO,GAAG,IACZ,IAAM,IAAIC,EAAwB,CAAEC,aAAc,iBAAkBC,UAAW,UAAWC,WAAY,WAG1G,MAAMC,GAAuBV,EAAsBK,GAAG,GACtD,IAAIM,EAMAC,EALJ,GAAIF,EAAqB,CAErBC,GAD6BX,EAAsBa,GAAG,GAAKC,EAAaC,KAAOD,EAAaE,SACpCd,CAC3D,CAQD,OAJIU,GADCF,GAAuBC,EACVZ,EAAeP,IAAIM,GAEnBE,EAAsBP,MAAMwB,IAAId,EAAmBX,IAAIM,IAElEc,CACX,CAaM,SAAUM,GAAoBC,eAChCA,EAAcC,aACdA,EAAYC,yBACZA,EAAwBC,0BACxBA,IAEA,MAAMC,EAAoBF,EAAyBrC,IAAImC,GAAgBF,IAAIK,GAC3E,OAAOF,EAAaH,IAAIM,EAC5B,UAegBC,GAA0BC,wBACtCA,EAAuBC,oBACvBA,EAAmBC,gBACnBA,EAAeN,yBACfA,EAAwBC,0BACxBA,EAAyBH,eACzBA,EAAcrB,QACdA,IAEA,MAAM8B,EAAsBD,EAAgBV,IAAII,GAC1CQ,EAA4BD,EAAoBE,GAAG,GAAKF,EAAoBnC,MAAQQ,EAEpF8B,EAAmBL,EAAoBT,IAAIK,GAC3CU,EAAyBD,EAAiBD,GAAG,GAAKC,EAAiBtC,MAAQQ,EAEjF,OAAOwB,EACFR,IAAIY,EAA0B7C,IAAImC,IAClCF,IAAIe,GACJhD,IAAIc,EACb,CAiBgB,SAAAmC,GAA4BC,iBACxCA,EAAgBb,yBAChBA,EAAwBC,0BACxBA,EAAyBH,eACzBA,EAAcgB,iCACdA,IAEA,MAAMC,EAAyBD,EAAiClB,IAC5DI,EAAyBrC,IAAImC,GAAgBF,IAAIK,IAGrD,OAAOY,EAAiB9C,IAAIgD,EAChC,CAYM,SAAUC,GAAsBC,yBAClCA,EAAwBJ,iBACxBA,EAAgBK,uBAChBA,IAGA,OADiBD,EAAyBzB,GAAGqB,GAAoBA,EAAmBI,GACpElD,IAAImD,EACxB"}