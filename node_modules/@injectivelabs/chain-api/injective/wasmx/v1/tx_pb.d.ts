// package: injective.wasmx.v1beta1
// file: injective/wasmx/v1/tx.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as google_protobuf_any_pb from "google-protobuf/google/protobuf/any_pb";
import * as cosmos_proto_cosmos_pb from "../../../cosmos_proto/cosmos_pb";
import * as ibc_core_client_v1_client_pb from "../../../ibc/core/client/v1/client_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";

export class MsgUpdateContract extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getContractAddress(): string;
  setContractAddress(value: string): void;

  getGasLimit(): number;
  setGasLimit(value: number): void;

  getGasPrice(): number;
  setGasPrice(value: number): void;

  getAdminAddress(): string;
  setAdminAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgUpdateContract.AsObject;
  static toObject(includeInstance: boolean, msg: MsgUpdateContract): MsgUpdateContract.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgUpdateContract, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgUpdateContract;
  static deserializeBinaryFromReader(message: MsgUpdateContract, reader: jspb.BinaryReader): MsgUpdateContract;
}

export namespace MsgUpdateContract {
  export type AsObject = {
    sender: string,
    contractAddress: string,
    gasLimit: number,
    gasPrice: number,
    adminAddress: string,
  }
}

export class MsgUpdateContractResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgUpdateContractResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgUpdateContractResponse): MsgUpdateContractResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgUpdateContractResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgUpdateContractResponse;
  static deserializeBinaryFromReader(message: MsgUpdateContractResponse, reader: jspb.BinaryReader): MsgUpdateContractResponse;
}

export namespace MsgUpdateContractResponse {
  export type AsObject = {
  }
}

export class MsgActivateContract extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getContractAddress(): string;
  setContractAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgActivateContract.AsObject;
  static toObject(includeInstance: boolean, msg: MsgActivateContract): MsgActivateContract.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgActivateContract, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgActivateContract;
  static deserializeBinaryFromReader(message: MsgActivateContract, reader: jspb.BinaryReader): MsgActivateContract;
}

export namespace MsgActivateContract {
  export type AsObject = {
    sender: string,
    contractAddress: string,
  }
}

export class MsgActivateContractResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgActivateContractResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgActivateContractResponse): MsgActivateContractResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgActivateContractResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgActivateContractResponse;
  static deserializeBinaryFromReader(message: MsgActivateContractResponse, reader: jspb.BinaryReader): MsgActivateContractResponse;
}

export namespace MsgActivateContractResponse {
  export type AsObject = {
  }
}

export class MsgDeactivateContract extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getContractAddress(): string;
  setContractAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgDeactivateContract.AsObject;
  static toObject(includeInstance: boolean, msg: MsgDeactivateContract): MsgDeactivateContract.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgDeactivateContract, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgDeactivateContract;
  static deserializeBinaryFromReader(message: MsgDeactivateContract, reader: jspb.BinaryReader): MsgDeactivateContract;
}

export namespace MsgDeactivateContract {
  export type AsObject = {
    sender: string,
    contractAddress: string,
  }
}

export class MsgDeactivateContractResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgDeactivateContractResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgDeactivateContractResponse): MsgDeactivateContractResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgDeactivateContractResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgDeactivateContractResponse;
  static deserializeBinaryFromReader(message: MsgDeactivateContractResponse, reader: jspb.BinaryReader): MsgDeactivateContractResponse;
}

export namespace MsgDeactivateContractResponse {
  export type AsObject = {
  }
}

export class MsgTransfer extends jspb.Message {
  getSourcePort(): string;
  setSourcePort(value: string): void;

  getSourceChannel(): string;
  setSourceChannel(value: string): void;

  hasToken(): boolean;
  clearToken(): void;
  getToken(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setToken(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  getSender(): string;
  setSender(value: string): void;

  getReceiver(): string;
  setReceiver(value: string): void;

  hasTimeoutHeight(): boolean;
  clearTimeoutHeight(): void;
  getTimeoutHeight(): ibc_core_client_v1_client_pb.Height | undefined;
  setTimeoutHeight(value?: ibc_core_client_v1_client_pb.Height): void;

  getTimeoutTimestamp(): number;
  setTimeoutTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTransfer.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTransfer): MsgTransfer.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTransfer, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTransfer;
  static deserializeBinaryFromReader(message: MsgTransfer, reader: jspb.BinaryReader): MsgTransfer;
}

export namespace MsgTransfer {
  export type AsObject = {
    sourcePort: string,
    sourceChannel: string,
    token?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
    sender: string,
    receiver: string,
    timeoutHeight?: ibc_core_client_v1_client_pb.Height.AsObject,
    timeoutTimestamp: number,
  }
}

export class MsgTransferResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTransferResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTransferResponse): MsgTransferResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTransferResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTransferResponse;
  static deserializeBinaryFromReader(message: MsgTransferResponse, reader: jspb.BinaryReader): MsgTransferResponse;
}

export namespace MsgTransferResponse {
  export type AsObject = {
  }
}

