"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("../../constants/envVariables.js");var t=require("../../constants/numbers.js"),e=require("../../contracts/Contracts.js"),a=require("../../errors/errors.js"),r=require("../../internal/Channel.js"),c=require("../../internal/ChannelEventSource.js"),n=require("../../internal/createMemoizedFetcher.js"),i=require("../../internal/config.js"),l=require("../../transactionSender/index.js");require("big.js");var o=require("../../utils/errorChecker.js"),s=require("../../utils/formatters.js");require("../../utils/tick.js");var u=require("../../utils/poll.js"),h=require("../../utils/logger.js");require("ethers");var d=require("../contractReader/MulticallReader.js"),m=require("../wallet/SettlementToken.js");class p extends r.Channel{constructor(t,e){super(t.channelRegistry),this._perp=t,this.account=e,this._cache=new Map,this._contractReader=t.contractReader,this._contract=this._contractReader.contracts.vault}async getAccountValue({cache:t=!0}={}){return await this._fetch("accountValue",{cache:t})}async getBalanceList({cache:t=!0}={}){return await this._fetch("balanceList",{cache:t})}async getFreeCollateral({cache:t=!0}={}){return await this._fetch("freeCollateral",{cache:t})}async getFreeCollateralList({cache:t=!0}={}){return await this._fetch("freeCollateralList",{cache:t})}async deposit(t,a){const r=t.address,c=await t.decimals();return l.getTransaction({account:this.account,contract:this._contract,contractName:e.ContractName.VAULT,contractFunctionName:"deposit",args:[r,s.big2BigNumberAndScaleUp(a,c)]})}async depositETH(a){return l.getTransaction({value:s.big2BigNumberAndScaleUp(a,t.ETH_DECIMAL_DIGITS),account:this.account,contract:this._contract,contractName:e.ContractName.VAULT,contractFunctionName:"depositEther",args:[]})}async withdraw(t,a){const r=t.address,c=await t.decimals();return l.getTransaction({account:this.account,contract:this._contract,contractName:e.ContractName.VAULT,contractFunctionName:"withdraw",args:[r,s.big2BigNumberAndScaleUp(a,c)]})}async withdrawETH(a){return l.getTransaction({account:this.account,contract:this._contract,contractName:e.ContractName.VAULT,contractFunctionName:"withdrawEther",args:[s.big2BigNumberAndScaleUp(a,t.ETH_DECIMAL_DIGITS)]})}async withdrawAll(t){const a=t.address;return l.getTransaction({account:this.account,contract:this._contract,contractName:e.ContractName.VAULT,contractFunctionName:"withdrawAll",args:[a]})}async withdrawAllEther(){return l.getTransaction({account:this.account,contract:this._contract,contractName:e.ContractName.VAULT,contractFunctionName:"withdrawAllEther",args:[]})}_getEventSourceMap(){const t=this._createFetchAndEmitAccountValueUpdated(),e=new c.ChannelEventSource({eventSourceStarter:()=>{var e,a;return u.poll(t,(null===(a=null===(e=this._perp.moduleConfigs)||void 0===e?void 0:e.vault)||void 0===a?void 0:a.period)||i.DEFAULT_PERIOD).cancel},initEventEmitter:()=>t(!0,!0)}),a=this._createFetchAndEmitBalanceListUpdated(),r=new c.ChannelEventSource({eventSourceStarter:()=>{var t,e;return u.poll(a,(null===(e=null===(t=this._perp.moduleConfigs)||void 0===t?void 0:t.vault)||void 0===e?void 0:e.period)||i.DEFAULT_PERIOD).cancel},initEventEmitter:()=>a(!0,!0)}),n=this._createFetchAndEmitFreeCollateralUpdated(),l=new c.ChannelEventSource({eventSourceStarter:()=>{var t,e;return u.poll(n,(null===(e=null===(t=this._perp.moduleConfigs)||void 0===t?void 0:t.vault)||void 0===e?void 0:e.period)||i.DEFAULT_PERIOD).cancel},initEventEmitter:()=>n(!0,!0)}),o=this._createFetchAndEmitFreeCollateralListUpdated(),s=new c.ChannelEventSource({eventSourceStarter:()=>{var t,e;return u.poll(o,(null===(e=null===(t=this._perp.moduleConfigs)||void 0===t?void 0:t.vault)||void 0===e?void 0:e.period)||i.DEFAULT_PERIOD).cancel},initEventEmitter:()=>o(!0,!0)}),h=this.getVaultDataAll.bind(this);return{accountValueUpdated:e,balanceListUpdated:r,freeCollateralUpdated:l,freeCollateralListUpdated:s,updatedVaultDataAll:new c.ChannelEventSource({eventSourceStarter:()=>{var t,e;return u.poll(h,(null===(e=null===(t=this._perp.moduleConfigs)||void 0===t?void 0:t.vault)||void 0===e?void 0:e.period)||i.DEFAULT_PERIOD).cancel},initEventEmitter:()=>h()})}}async _fetchUpdateData(t){try{return await t()}catch(t){this.emit("updateError",{error:t})}}async _fetch(t,{cache:e=!0}={}){if(this._cache.has(t)&&e)return this._cache.get(t);let r;switch(t){case"accountValue":r=await this._contractReader.getAccountValue(this.account);break;case"balanceList":o.invariant(this._perp.hasConnected(),(()=>new a.UnauthorizedError({functionName:"balanceList"}))),r=await Promise.all(this._perp.wallet.collateralTokenList.map((t=>t instanceof m.SettlementToken?this._contractReader.getVaultBalanceOfSettlementToken(this.account):this._contractReader.getVaultBalanceByToken(this.account,t))));break;case"freeCollateral":r=await this._contractReader.getFreeCollateral(this.account);break;case"freeCollateralList":o.invariant(this._perp.hasConnected(),(()=>new a.UnauthorizedError({functionName:"freeCollateralList"}))),r=await Promise.all(this._perp.wallet.collateralTokenList.map((t=>this._contractReader.getFreeCollateralByToken(this.account,t))))}return this._cache.set(t,r),r}_createFetchAndEmitAccountValueUpdated(){return n.createMemoizedFetcher((()=>this._fetchUpdateData((()=>this.getAccountValue({cache:!1})))),(()=>{this.emit("accountValueUpdated",this),this.emit("updated",this)}),((t,e)=>!t||!e||n.hasNumberChange(t,e)))}_createFetchAndEmitBalanceListUpdated(){return n.createMemoizedFetcher((()=>this._fetchUpdateData((()=>this.getBalanceList({cache:!1})))),(()=>{this.emit("balanceListUpdated",this)}),((t,e)=>!t||!e||n.hasNumberArrChange(t,e)))}_createFetchAndEmitFreeCollateralUpdated(){return n.createMemoizedFetcher((()=>this._fetchUpdateData((()=>this.getFreeCollateral({cache:!1})))),(()=>{this.emit("freeCollateralUpdated",this),this.emit("updated",this)}),((t,e)=>!t||!e||n.hasNumberChange(t,e)))}_createFetchAndEmitFreeCollateralListUpdated(){return n.createMemoizedFetcher((()=>this._fetchUpdateData((()=>this.getFreeCollateralList({cache:!1})))),(()=>{this.emit("freeCollateralListUpdated",this)}),((t,e)=>!t||!e||n.hasNumberArrChange(t,e)))}async getVaultDataAll(){try{o.invariant(this._perp.hasConnected(),(()=>new a.UnauthorizedError({functionName:"getVaultDataAll"}))),h.logger("getVaultDataAll");const r=this._perp.wallet.account,c=this._perp.contracts,n=this._perp.wallet.collateralTokenList,i=new d.MulticallReader({contract:c.multicall2}),l={};null==n||n.forEach((t=>{const a=t instanceof m.SettlementToken,n=t.contract,i=t.address,o=a?{contract:c.vault,contractName:e.ContractName.VAULT,funcName:"getSettlementTokenValue",funcParams:[r]}:{contract:c.vault,contractName:e.ContractName.VAULT,funcName:"getBalanceByToken",funcParams:[r,i]},s=a?{contract:n,contractName:e.ContractName.SETTLEMENT_TOKEN,funcName:"decimals",funcParams:[]}:{contract:n,contractName:e.ContractName.COLLATERAL_TOKENS,funcName:"decimals",funcParams:[]},u=[{contract:c.vault,contractName:e.ContractName.VAULT,funcName:"getFreeCollateralByToken",funcParams:[r,i]},s,o];l[`${t.address}`]=u}));const u=[{contract:c.vault,contractName:e.ContractName.VAULT,funcName:"getFreeCollateral",funcParams:[r]},{contract:c.vault,contractName:e.ContractName.VAULT,funcName:"getAccountValue",funcParams:[r]}],p=await i.execute(Object.values(l).flat().concat(u),{failFirstByContract:!1,failFirstByClient:!1}),g={};Object.entries(l).forEach((([t,e])=>{const a=p.splice(0,e.length),r=a[0],c=a[1],n=a[2];g[`${t}`]={freeCollateral:s.bigNumber2BigAndScaleDown(r,c),balance:s.bigNumber2BigAndScaleDown(n,c)}}));const C=s.bigNumber2BigAndScaleDown(p[0],t.COLLATERAL_TOKEN_DECIMAL),_={accountBalance:s.bigNumber2BigAndScaleDown(p[1],t.SETTLEMENT_TOKEN_DECIMAL),accountFreeCollateral:C};this.emit("updatedVaultDataAll",{vaultDataAllByCollateral:g,vaultDataAllCrossCollateral:_})}catch(t){this.emit("updateError",{error:t})}}}exports.Vault=p;
//# sourceMappingURL=Vault.js.map
