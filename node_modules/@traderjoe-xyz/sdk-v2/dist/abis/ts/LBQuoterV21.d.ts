export declare const LBQuoterV21ABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "factoryV1";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "legacyFactoryV2";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "factoryV2";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "legacyRouterV2";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "routerV2";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__AddressZero";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__IdenticalAddresses";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__InsufficientAmount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__InsufficientLiquidity";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBQuoter_InvalidLength";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "x";
        readonly type: "uint256";
    }, {
        readonly internalType: "int256";
        readonly name: "y";
        readonly type: "int256";
    }];
    readonly name: "Uint128x128Math__PowUnderflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Uint256x256Math__MulDivOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "Uint256x256Math__MulShiftOverflow";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "route";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint128";
        readonly name: "amountIn";
        readonly type: "uint128";
    }];
    readonly name: "findBestPathFromAmountIn";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address[]";
            readonly name: "route";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "pairs";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "binSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "amounts";
            readonly type: "uint128[]";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "virtualAmountsWithoutSlippage";
            readonly type: "uint128[]";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "fees";
            readonly type: "uint128[]";
        }];
        readonly internalType: "struct LBQuoter.Quote";
        readonly name: "quote";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "route";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint128";
        readonly name: "amountOut";
        readonly type: "uint128";
    }];
    readonly name: "findBestPathFromAmountOut";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address[]";
            readonly name: "route";
            readonly type: "address[]";
        }, {
            readonly internalType: "address[]";
            readonly name: "pairs";
            readonly type: "address[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "binSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "amounts";
            readonly type: "uint128[]";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "virtualAmountsWithoutSlippage";
            readonly type: "uint128[]";
        }, {
            readonly internalType: "uint128[]";
            readonly name: "fees";
            readonly type: "uint128[]";
        }];
        readonly internalType: "struct LBQuoter.Quote";
        readonly name: "quote";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getFactoryV1";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "factoryV1";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getFactoryV2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "factoryV2";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getLegacyFactoryV2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "legacyFactoryV2";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getLegacyRouterV2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "legacyRouterV2";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getRouterV2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "routerV2";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}];
