{"version":3,"file":"utils.js","sources":["../../../../src/core/clearingHouse/utils.ts"],"sourcesContent":["import { BIG_ZERO } from \"../../constants\"\nimport Big from \"big.js\"\nimport { FailedPreconditionError } from \"../../errors\"\nimport { PositionSide } from \"../position/types\"\nimport { invariant } from \"../../utils\"\n\ninterface GetTransactionFeeParams {\n    isBaseToQuote: boolean\n    exchangedPositionNotional: Big\n    deltaAvailableQuote: Big\n    feeRatio: Big\n}\n\nexport function getTransactionFee({\n    isBaseToQuote,\n    exchangedPositionNotional,\n    deltaAvailableQuote,\n    feeRatio,\n}: GetTransactionFeeParams) {\n    return isBaseToQuote ? exchangedPositionNotional.mul(feeRatio) : deltaAvailableQuote.mul(feeRatio)\n}\n\ninterface GetUnrealizedPnlParams {\n    isLong: boolean\n    openNotionalAbs: Big\n    deltaAvailableQuote: Big\n}\n\n// NOTE: deltaAvailableQuote is absolute (always >= 0)\nexport function getUnrealizedPnl({ isLong, openNotionalAbs, deltaAvailableQuote }: GetUnrealizedPnlParams) {\n    return isLong ? deltaAvailableQuote.sub(openNotionalAbs) : openNotionalAbs.sub(deltaAvailableQuote)\n}\n\ninterface GetSwapRateParams {\n    amountBase: Big\n    amountQuote: Big\n}\n\nexport function getSwapRate({ amountBase, amountQuote }: GetSwapRateParams) {\n    return amountQuote.div(amountBase).abs()\n}\n\ninterface GetPriceImpactParams {\n    price: Big\n    markPrice: Big\n}\n\nexport function getPriceImpact({ price, markPrice }: GetPriceImpactParams) {\n    return price.div(markPrice).sub(1)\n}\n\ninterface GetBuyingPowerParams {\n    imRatio: Big\n    freeCollateral: Big\n    side: PositionSide\n    existingPositionValue?: Big\n    nextFreeCollateral: Big\n}\n\nexport function getBuyingPower({\n    imRatio,\n    freeCollateral,\n    existingPositionValue = BIG_ZERO,\n    side,\n    nextFreeCollateral,\n}: GetBuyingPowerParams) {\n    invariant(\n        !imRatio.eq(0),\n        () => new FailedPreconditionError({ functionName: \"getBuyingPower\", stateName: \"imRatio\", stateValue: \"zero\" }),\n    )\n\n    const hasExistingPosition = !existingPositionValue.eq(0)\n    let isSameSideAsExistingPosition\n    if (hasExistingPosition) {\n        const existingPositionSide = existingPositionValue.gt(0) ? PositionSide.LONG : PositionSide.SHORT\n        isSameSideAsExistingPosition = existingPositionSide === side\n    }\n\n    let buyingPower\n    if (!hasExistingPosition || isSameSideAsExistingPosition) {\n        buyingPower = freeCollateral.div(imRatio)\n    } else {\n        buyingPower = existingPositionValue.abs().add(nextFreeCollateral.div(imRatio))\n    }\n    return buyingPower\n}\n\n/**\n * NOTE:\n * nextAccountValue = accountValue + deltaAccountValue\n * deltaAccountValue = signedDeltaAvailableBase * indexTwapPrice + signedDeltaAvailableQuote\n */\ninterface GetNextAccountValueParams {\n    indexTwapPrice: Big\n    accountValue: Big\n    signedDeltaAvailableBase: Big\n    signedDeltaAvailableQuote: Big\n}\nexport function getNextAccountValue({\n    indexTwapPrice,\n    accountValue,\n    signedDeltaAvailableBase,\n    signedDeltaAvailableQuote,\n}: GetNextAccountValueParams) {\n    const deltaAccountValue = signedDeltaAvailableBase.mul(indexTwapPrice).add(signedDeltaAvailableQuote)\n    return accountValue.add(deltaAccountValue)\n}\n\n/**\n * NOTE: the formula did not consider the realized PNL, we should include it in the future\n * nextOpenOrderMarginReq = ((otherBaseDebtValue + absMinNextThisBaseBalance * thisBaseIndexPrice) + absMinNextQuoteBalance) * ratio\n */\ninterface GetNextOpenOrderMarginReqParams {\n    sumOfOtherBaseDebtValue: Big\n    sumOfQuoteDebtValue: Big\n    thisBaseBalance: Big\n    signedDeltaAvailableBase: Big\n    signedDeltaAvailableQuote: Big\n    indexTwapPrice: Big\n    imRatio: Big\n}\nexport function getNextOpenOrderMarginReq({\n    sumOfOtherBaseDebtValue,\n    sumOfQuoteDebtValue,\n    thisBaseBalance,\n    signedDeltaAvailableBase,\n    signedDeltaAvailableQuote,\n    indexTwapPrice,\n    imRatio,\n}: GetNextOpenOrderMarginReqParams) {\n    const nextThisBaseBalance = thisBaseBalance.add(signedDeltaAvailableBase)\n    const absMinNextThisBaseBalance = nextThisBaseBalance.lt(0) ? nextThisBaseBalance.abs() : BIG_ZERO\n\n    const nextQuoteBalance = sumOfQuoteDebtValue.add(signedDeltaAvailableQuote)\n    const absMinNextQuoteBalance = nextQuoteBalance.lt(0) ? nextQuoteBalance.abs() : BIG_ZERO\n\n    return sumOfOtherBaseDebtValue\n        .add(absMinNextThisBaseBalance.mul(indexTwapPrice))\n        .add(absMinNextQuoteBalance)\n        .mul(imRatio)\n}\n\n/**\n * NOTE:\n * nextUnrealizedPNL = signedDeltaAvailableBase * indexPrice + signedDeltaAvailableQuote\n * nextTotalUnrealizedPNL = totalUnrealizedPNL + nextUnrealizedPNL\n * nextTotalCollateralValue\n * = nextAccountValue - nextTotalUnrealizedPNL\n * = nextAccountValue - (totalUnrealizedPNL + nextUnrealizedPNL)\n */\ninterface GetNextTotalCollateralValueParams {\n    nextAccountValue: Big\n    signedDeltaAvailableBase: Big\n    signedDeltaAvailableQuote: Big\n    indexTwapPrice: Big\n    totalUnrealizedPNLFromAllMarkets: Big\n}\nexport function getNextTotalCollateralValue({\n    nextAccountValue,\n    signedDeltaAvailableBase,\n    signedDeltaAvailableQuote,\n    indexTwapPrice,\n    totalUnrealizedPNLFromAllMarkets,\n}: GetNextTotalCollateralValueParams) {\n    const nextTotalUnrealizedPNL = totalUnrealizedPNLFromAllMarkets.add(\n        signedDeltaAvailableBase.mul(indexTwapPrice).add(signedDeltaAvailableQuote),\n    )\n\n    return nextAccountValue.sub(nextTotalUnrealizedPNL)\n}\n\n/**\n * NOTE: next free collateral\n * FIXME: this result might have negative value somehow\n * nextFreeCollateral = min(nextTotalCollateralValue, nextAccountValue) - nextOpenOrderMarginReq(Ratio)\n */\ninterface GetNextFreeCollateralParams {\n    nextTotalCollateralValue: Big\n    nextAccountValue: Big\n    nextOpenOrderMarginReq: Big\n}\nexport function getNextFreeCollateral({\n    nextTotalCollateralValue,\n    nextAccountValue,\n    nextOpenOrderMarginReq,\n}: GetNextFreeCollateralParams) {\n    const minValue = nextTotalCollateralValue.gt(nextAccountValue) ? nextAccountValue : nextTotalCollateralValue\n    return minValue.sub(nextOpenOrderMarginReq)\n}\n"],"names":["imRatio","freeCollateral","existingPositionValue","BIG_ZERO","side","nextFreeCollateral","invariant","eq","FailedPreconditionError","functionName","stateName","stateValue","hasExistingPosition","isSameSideAsExistingPosition","buyingPower","gt","PositionSide","LONG","SHORT","div","abs","add","indexTwapPrice","accountValue","signedDeltaAvailableBase","signedDeltaAvailableQuote","deltaAccountValue","mul","nextTotalCollateralValue","nextAccountValue","nextOpenOrderMarginReq","sub","sumOfOtherBaseDebtValue","sumOfQuoteDebtValue","thisBaseBalance","nextThisBaseBalance","absMinNextThisBaseBalance","lt","nextQuoteBalance","absMinNextQuoteBalance","totalUnrealizedPNLFromAllMarkets","nextTotalUnrealizedPNL","price","markPrice","amountBase","amountQuote","isBaseToQuote","exchangedPositionNotional","deltaAvailableQuote","feeRatio","isLong","openNotionalAbs"],"mappings":"wWA2DgB,UAAeA,QAC3BA,EAAOC,eACPA,EAAcC,sBACdA,EAAwBC,WAAQC,KAChCA,EAAIC,mBACJA,IAEAC,EAASA,WACJN,EAAQO,GAAG,IACZ,IAAM,IAAIC,EAAuBA,wBAAC,CAAEC,aAAc,iBAAkBC,UAAW,UAAWC,WAAY,WAG1G,MAAMC,GAAuBV,EAAsBK,GAAG,GACtD,IAAIM,EAMAC,EALJ,GAAIF,EAAqB,CAErBC,GAD6BX,EAAsBa,GAAG,GAAKC,eAAaC,KAAOD,EAAYA,aAACE,SACpCd,CAC3D,CAQD,OAJIU,GADCF,GAAuBC,EACVZ,EAAekB,IAAInB,GAEnBE,EAAsBkB,MAAMC,IAAIhB,EAAmBc,IAAInB,IAElEc,CACX,8BAaM,UAA8BQ,eAChCA,EAAcC,aACdA,EAAYC,yBACZA,EAAwBC,0BACxBA,IAEA,MAAMC,EAAoBF,EAAyBG,IAAIL,GAAgBD,IAAII,GAC3E,OAAOF,EAAaF,IAAIK,EAC5B,gCA2EM,UAAgCE,yBAClCA,EAAwBC,iBACxBA,EAAgBC,uBAChBA,IAGA,OADiBF,EAAyBb,GAAGc,GAAoBA,EAAmBD,GACpEG,IAAID,EACxB,8CAnE0CE,wBACtCA,EAAuBC,oBACvBA,EAAmBC,gBACnBA,EAAeV,yBACfA,EAAwBC,0BACxBA,EAAyBH,eACzBA,EAActB,QACdA,IAEA,MAAMmC,EAAsBD,EAAgBb,IAAIG,GAC1CY,EAA4BD,EAAoBE,GAAG,GAAKF,EAAoBf,MAAQjB,WAEpFmC,EAAmBL,EAAoBZ,IAAII,GAC3Cc,EAAyBD,EAAiBD,GAAG,GAAKC,EAAiBlB,MAAQjB,WAEjF,OAAO6B,EACFX,IAAIe,EAA0BT,IAAIL,IAClCD,IAAIkB,GACJZ,IAAI3B,EACb,sCAiBgB,UAA4B6B,iBACxCA,EAAgBL,yBAChBA,EAAwBC,0BACxBA,EAAyBH,eACzBA,EAAckB,iCACdA,IAEA,MAAMC,EAAyBD,EAAiCnB,IAC5DG,EAAyBG,IAAIL,GAAgBD,IAAII,IAGrD,OAAOI,EAAiBE,IAAIU,EAChC,mCA1H+BC,MAAEA,EAAKC,UAAEA,IACpC,OAAOD,EAAMvB,IAAIwB,GAAWZ,IAAI,EACpC,gCAX4Ba,WAAEA,EAAUC,YAAEA,IACtC,OAAOA,EAAY1B,IAAIyB,GAAYxB,KACvC,4BA3BM,UAA4B0B,cAC9BA,EAAaC,0BACbA,EAAyBC,oBACzBA,EAAmBC,SACnBA,IAEA,OAAOH,EAAgBC,EAA0BpB,IAAIsB,GAAYD,EAAoBrB,IAAIsB,EAC7F,2BASM,UAA2BC,OAAEA,EAAMC,gBAAEA,EAAeH,oBAAEA,IACxD,OAAOE,EAASF,EAAoBjB,IAAIoB,GAAmBA,EAAgBpB,IAAIiB,EACnF"}