import Big from "big.js";
import { PerpetualProtocol } from "../PerpetualProtocol";
import { LiquidityBase, LiquidityBaseConstructorData } from "./LiquidityBase";
export interface EventPayloadLiquidityAmountUpdated {
    quoteAmount?: Big;
    baseAmount?: Big;
    isLastEditBase: boolean;
    isUpdatedFromTickPrice: boolean;
}
export interface LiquidityDraftLiquidityAmountUpdatable {
    amount: Big;
    isBaseToken: boolean;
    isUpdatedFromTickPrice?: boolean;
}
export interface LiquidityDraftTickUpdatable {
    lowerRawPrice?: Big;
    upperRawPrice?: Big;
    isLastEditBase: boolean;
    isFullRange?: boolean;
}
export interface LiquidityDraftConstructorData extends LiquidityBaseConstructorData {
    perp: PerpetualProtocol;
    lowerTick: number;
    upperTick: number;
    rawBaseAmount?: Big;
    rawQuoteAmount?: Big;
}
export declare class LiquidityDraft extends LiquidityBase {
    private readonly _perp;
    readonly rawBaseAmount?: Big;
    readonly rawQuoteAmount?: Big;
    constructor({ perp, market, lowerTick, upperTick, rawBaseAmount, rawQuoteAmount }: LiquidityDraftConstructorData);
    getLiquidity({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getBaseAmount({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getQuoteAmount({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTickPrices(): {
        lowerTickPrice: Big;
        upperTickPrice: Big;
    };
}
