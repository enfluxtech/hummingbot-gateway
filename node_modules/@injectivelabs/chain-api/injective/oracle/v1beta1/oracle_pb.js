// source: injective/oracle/v1beta1/oracle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
goog.exportSymbol('proto.injective.oracle.v1beta1.BandIBCParams', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.BandOracleRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.BandPriceState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.ChainlinkPriceState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.CoinbasePriceState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.LastPriceTimestamps', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.MetadataStatistics', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.OracleInfo', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.OracleType', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.Params', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PriceFeedInfo', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PriceFeedPrice', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PriceFeedState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PriceRecord', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PriceRecords', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PriceState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.ProviderInfo', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.ProviderPriceState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.ProviderState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.SymbolPriceTimestamp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.Params.displayName = 'proto.injective.oracle.v1beta1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.OracleInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.OracleInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.OracleInfo.displayName = 'proto.injective.oracle.v1beta1.OracleInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.ChainlinkPriceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.ChainlinkPriceState.displayName = 'proto.injective.oracle.v1beta1.ChainlinkPriceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.BandPriceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.BandPriceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.BandPriceState.displayName = 'proto.injective.oracle.v1beta1.BandPriceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PriceFeedState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.PriceFeedState.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PriceFeedState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PriceFeedState.displayName = 'proto.injective.oracle.v1beta1.PriceFeedState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.ProviderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.ProviderInfo.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.ProviderInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.ProviderInfo.displayName = 'proto.injective.oracle.v1beta1.ProviderInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.ProviderState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.ProviderState.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.ProviderState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.ProviderState.displayName = 'proto.injective.oracle.v1beta1.ProviderState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.ProviderPriceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.ProviderPriceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.ProviderPriceState.displayName = 'proto.injective.oracle.v1beta1.ProviderPriceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PriceFeedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PriceFeedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PriceFeedInfo.displayName = 'proto.injective.oracle.v1beta1.PriceFeedInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PriceFeedPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PriceFeedPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PriceFeedPrice.displayName = 'proto.injective.oracle.v1beta1.PriceFeedPrice';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.CoinbasePriceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.CoinbasePriceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.CoinbasePriceState.displayName = 'proto.injective.oracle.v1beta1.CoinbasePriceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PriceState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PriceState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PriceState.displayName = 'proto.injective.oracle.v1beta1.PriceState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.BandOracleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.BandOracleRequest.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.BandOracleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.BandOracleRequest.displayName = 'proto.injective.oracle.v1beta1.BandOracleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.BandIBCParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.BandIBCParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.BandIBCParams.displayName = 'proto.injective.oracle.v1beta1.BandIBCParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.SymbolPriceTimestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.SymbolPriceTimestamp.displayName = 'proto.injective.oracle.v1beta1.SymbolPriceTimestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.LastPriceTimestamps.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.LastPriceTimestamps, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.LastPriceTimestamps.displayName = 'proto.injective.oracle.v1beta1.LastPriceTimestamps';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PriceRecords = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.PriceRecords.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PriceRecords, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PriceRecords.displayName = 'proto.injective.oracle.v1beta1.PriceRecords';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PriceRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PriceRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PriceRecord.displayName = 'proto.injective.oracle.v1beta1.PriceRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.MetadataStatistics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.MetadataStatistics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.MetadataStatistics.displayName = 'proto.injective.oracle.v1beta1.MetadataStatistics';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.Params}
 */
proto.injective.oracle.v1beta1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.Params;
  return proto.injective.oracle.v1beta1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.Params}
 */
proto.injective.oracle.v1beta1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.OracleInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.OracleInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.OracleInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oracleType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scaleFactor: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.OracleInfo}
 */
proto.injective.oracle.v1beta1.OracleInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.OracleInfo;
  return proto.injective.oracle.v1beta1.OracleInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.OracleInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.OracleInfo}
 */
proto.injective.oracle.v1beta1.OracleInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracleType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setScaleFactor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.OracleInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.OracleInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.OracleInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOracleType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScaleFactor();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.OracleInfo} returns this
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OracleType oracle_type = 2;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.getOracleType = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.oracle.v1beta1.OracleInfo} returns this
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.setOracleType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 scale_factor = 3;
 * @return {number}
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.getScaleFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.OracleInfo} returns this
 */
proto.injective.oracle.v1beta1.OracleInfo.prototype.setScaleFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.ChainlinkPriceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.ChainlinkPriceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    feedId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    answer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    priceState: (f = msg.getPriceState()) && proto.injective.oracle.v1beta1.PriceState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.ChainlinkPriceState;
  return proto.injective.oracle.v1beta1.ChainlinkPriceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.ChainlinkPriceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeedId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnswer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new proto.injective.oracle.v1beta1.PriceState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader);
      msg.setPriceState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.ChainlinkPriceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.ChainlinkPriceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeedId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnswer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPriceState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string feed_id = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.getFeedId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState} returns this
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.setFeedId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string answer = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.getAnswer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState} returns this
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.setAnswer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 timestamp = 3;
 * @return {number}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState} returns this
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional PriceState price_state = 4;
 * @return {?proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.getPriceState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PriceState} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.PriceState, 4));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PriceState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState} returns this
*/
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.setPriceState = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.ChainlinkPriceState} returns this
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.clearPriceState = function() {
  return this.setPriceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.ChainlinkPriceState.prototype.hasPriceState = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.BandPriceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.BandPriceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.BandPriceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resolveTime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestId: jspb.Message.getFieldWithDefault(msg, 4, 0),
    priceState: (f = msg.getPriceState()) && proto.injective.oracle.v1beta1.PriceState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.BandPriceState}
 */
proto.injective.oracle.v1beta1.BandPriceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.BandPriceState;
  return proto.injective.oracle.v1beta1.BandPriceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.BandPriceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.BandPriceState}
 */
proto.injective.oracle.v1beta1.BandPriceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResolveTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 5:
      var value = new proto.injective.oracle.v1beta1.PriceState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader);
      msg.setPriceState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.BandPriceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.BandPriceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.BandPriceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResolveTime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPriceState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.BandPriceState} returns this
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string rate = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.getRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.BandPriceState} returns this
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.setRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 resolve_time = 3;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.getResolveTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandPriceState} returns this
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.setResolveTime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 request_ID = 4;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandPriceState} returns this
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PriceState price_state = 5;
 * @return {?proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.getPriceState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PriceState} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.PriceState, 5));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PriceState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.BandPriceState} returns this
*/
proto.injective.oracle.v1beta1.BandPriceState.prototype.setPriceState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.BandPriceState} returns this
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.clearPriceState = function() {
  return this.setPriceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.BandPriceState.prototype.hasPriceState = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.PriceFeedState.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PriceFeedState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PriceFeedState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceFeedState.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 2, ""),
    priceState: (f = msg.getPriceState()) && proto.injective.oracle.v1beta1.PriceState.toObject(includeInstance, f),
    relayersList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState}
 */
proto.injective.oracle.v1beta1.PriceFeedState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PriceFeedState;
  return proto.injective.oracle.v1beta1.PriceFeedState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PriceFeedState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState}
 */
proto.injective.oracle.v1beta1.PriceFeedState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    case 3:
      var value = new proto.injective.oracle.v1beta1.PriceState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader);
      msg.setPriceState(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addRelayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PriceFeedState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PriceFeedState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceFeedState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPriceState();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter
    );
  }
  f = message.getRelayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string base = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.setBase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.setQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional PriceState price_state = 3;
 * @return {?proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.getPriceState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PriceState} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.PriceState, 3));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PriceState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
*/
proto.injective.oracle.v1beta1.PriceFeedState.prototype.setPriceState = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.clearPriceState = function() {
  return this.setPriceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.hasPriceState = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string relayers = 4;
 * @return {!Array<string>}
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.getRelayersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.setRelayersList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.addRelayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedState.prototype.clearRelayersList = function() {
  return this.setRelayersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.ProviderInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.ProviderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.ProviderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ProviderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, ""),
    relayersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo}
 */
proto.injective.oracle.v1beta1.ProviderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.ProviderInfo;
  return proto.injective.oracle.v1beta1.ProviderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.ProviderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo}
 */
proto.injective.oracle.v1beta1.ProviderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addRelayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.ProviderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.ProviderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ProviderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRelayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo} returns this
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string relayers = 2;
 * @return {!Array<string>}
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.getRelayersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo} returns this
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.setRelayersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo} returns this
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.addRelayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo} returns this
 */
proto.injective.oracle.v1beta1.ProviderInfo.prototype.clearRelayersList = function() {
  return this.setRelayersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.ProviderState.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.ProviderState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.ProviderState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ProviderState.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerInfo: (f = msg.getProviderInfo()) && proto.injective.oracle.v1beta1.ProviderInfo.toObject(includeInstance, f),
    providerPriceStatesList: jspb.Message.toObjectList(msg.getProviderPriceStatesList(),
    proto.injective.oracle.v1beta1.ProviderPriceState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.ProviderState}
 */
proto.injective.oracle.v1beta1.ProviderState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.ProviderState;
  return proto.injective.oracle.v1beta1.ProviderState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.ProviderState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.ProviderState}
 */
proto.injective.oracle.v1beta1.ProviderState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.oracle.v1beta1.ProviderInfo;
      reader.readMessage(value,proto.injective.oracle.v1beta1.ProviderInfo.deserializeBinaryFromReader);
      msg.setProviderInfo(value);
      break;
    case 2:
      var value = new proto.injective.oracle.v1beta1.ProviderPriceState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.ProviderPriceState.deserializeBinaryFromReader);
      msg.addProviderPriceStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.ProviderState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.ProviderState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ProviderState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProviderInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.oracle.v1beta1.ProviderInfo.serializeBinaryToWriter
    );
  }
  f = message.getProviderPriceStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective.oracle.v1beta1.ProviderPriceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProviderInfo provider_info = 1;
 * @return {?proto.injective.oracle.v1beta1.ProviderInfo}
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.getProviderInfo = function() {
  return /** @type{?proto.injective.oracle.v1beta1.ProviderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.ProviderInfo, 1));
};


/**
 * @param {?proto.injective.oracle.v1beta1.ProviderInfo|undefined} value
 * @return {!proto.injective.oracle.v1beta1.ProviderState} returns this
*/
proto.injective.oracle.v1beta1.ProviderState.prototype.setProviderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.ProviderState} returns this
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.clearProviderInfo = function() {
  return this.setProviderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.hasProviderInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProviderPriceState provider_price_states = 2;
 * @return {!Array<!proto.injective.oracle.v1beta1.ProviderPriceState>}
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.getProviderPriceStatesList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.ProviderPriceState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.oracle.v1beta1.ProviderPriceState, 2));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.ProviderPriceState>} value
 * @return {!proto.injective.oracle.v1beta1.ProviderState} returns this
*/
proto.injective.oracle.v1beta1.ProviderState.prototype.setProviderPriceStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.ProviderPriceState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.ProviderPriceState}
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.addProviderPriceStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective.oracle.v1beta1.ProviderPriceState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.ProviderState} returns this
 */
proto.injective.oracle.v1beta1.ProviderState.prototype.clearProviderPriceStatesList = function() {
  return this.setProviderPriceStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.ProviderPriceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.ProviderPriceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ProviderPriceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    state: (f = msg.getState()) && proto.injective.oracle.v1beta1.PriceState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.ProviderPriceState}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.ProviderPriceState;
  return proto.injective.oracle.v1beta1.ProviderPriceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.ProviderPriceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.ProviderPriceState}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = new proto.injective.oracle.v1beta1.PriceState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.ProviderPriceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.ProviderPriceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.ProviderPriceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.ProviderPriceState} returns this
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PriceState state = 2;
 * @return {?proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.getState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PriceState} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.PriceState, 2));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PriceState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.ProviderPriceState} returns this
*/
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.ProviderPriceState} returns this
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.ProviderPriceState.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PriceFeedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PriceFeedInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    base: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedInfo}
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PriceFeedInfo;
  return proto.injective.oracle.v1beta1.PriceFeedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PriceFeedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedInfo}
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PriceFeedInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PriceFeedInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string base = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedInfo} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.prototype.setBase = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quote = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedInfo} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedInfo.prototype.setQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PriceFeedPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PriceFeedPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedPrice}
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PriceFeedPrice;
  return proto.injective.oracle.v1beta1.PriceFeedPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PriceFeedPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PriceFeedPrice}
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PriceFeedPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PriceFeedPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceFeedPrice} returns this
 */
proto.injective.oracle.v1beta1.PriceFeedPrice.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.CoinbasePriceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.CoinbasePriceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    key: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, 0),
    priceState: (f = msg.getPriceState()) && proto.injective.oracle.v1beta1.PriceState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.CoinbasePriceState;
  return proto.injective.oracle.v1beta1.CoinbasePriceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.CoinbasePriceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 5:
      var value = new proto.injective.oracle.v1beta1.PriceState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader);
      msg.setPriceState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.CoinbasePriceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.CoinbasePriceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPriceState();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState} returns this
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 timestamp = 2;
 * @return {number}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState} returns this
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string key = 3;
 * @return {string}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState} returns this
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 value = 4;
 * @return {number}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState} returns this
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional PriceState price_state = 5;
 * @return {?proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.getPriceState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PriceState} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.PriceState, 5));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PriceState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState} returns this
*/
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.setPriceState = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState} returns this
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.clearPriceState = function() {
  return this.setPriceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.CoinbasePriceState.prototype.hasPriceState = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PriceState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PriceState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PriceState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceState.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cumulativePrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.PriceState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PriceState;
  return proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PriceState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.PriceState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativePrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PriceState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PriceState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCumulativePrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceState.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceState} returns this
 */
proto.injective.oracle.v1beta1.PriceState.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cumulative_price = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceState.prototype.getCumulativePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceState} returns this
 */
proto.injective.oracle.v1beta1.PriceState.prototype.setCumulativePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.injective.oracle.v1beta1.PriceState.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.PriceState} returns this
 */
proto.injective.oracle.v1beta1.PriceState.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.BandOracleRequest.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.BandOracleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.BandOracleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.BandOracleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    oracleScriptId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    symbolsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    askCount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    feeLimitList: jspb.Message.toObjectList(msg.getFeeLimitList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance),
    prepareGas: jspb.Message.getFieldWithDefault(msg, 7, 0),
    executeGas: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.BandOracleRequest;
  return proto.injective.oracle.v1beta1.BandOracleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.BandOracleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOracleScriptId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSymbols(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAskCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinCount(value);
      break;
    case 6:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addFeeLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrepareGas(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExecuteGas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.BandOracleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.BandOracleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.BandOracleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOracleScriptId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getAskCount();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMinCount();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFeeLimitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getPrepareGas();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getExecuteGas();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional uint64 request_id = 1;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getRequestId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setRequestId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 oracle_script_id = 2;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getOracleScriptId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setOracleScriptId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string symbols = 3;
 * @return {!Array<string>}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getSymbolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setSymbolsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.addSymbols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.clearSymbolsList = function() {
  return this.setSymbolsList([]);
};


/**
 * optional uint64 ask_count = 4;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getAskCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setAskCount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 min_count = 5;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getMinCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setMinCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin fee_limit = 6;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getFeeLimitList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 6));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
*/
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setFeeLimitList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.addFeeLimit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.clearFeeLimitList = function() {
  return this.setFeeLimitList([]);
};


/**
 * optional uint64 prepare_gas = 7;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getPrepareGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setPrepareGas = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 execute_gas = 8;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.getExecuteGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandOracleRequest} returns this
 */
proto.injective.oracle.v1beta1.BandOracleRequest.prototype.setExecuteGas = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.BandIBCParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.BandIBCParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.BandIBCParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bandIbcEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    ibcRequestInterval: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ibcSourceChannel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ibcVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ibcPortId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams}
 */
proto.injective.oracle.v1beta1.BandIBCParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.BandIBCParams;
  return proto.injective.oracle.v1beta1.BandIBCParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.BandIBCParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams}
 */
proto.injective.oracle.v1beta1.BandIBCParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBandIbcEnabled(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIbcRequestInterval(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setIbcSourceChannel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIbcVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIbcPortId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.BandIBCParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.BandIBCParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.BandIBCParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBandIbcEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIbcRequestInterval();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIbcSourceChannel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIbcVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIbcPortId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool band_ibc_enabled = 1;
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.getBandIbcEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams} returns this
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.setBandIbcEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 ibc_request_interval = 2;
 * @return {number}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.getIbcRequestInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams} returns this
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.setIbcRequestInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string ibc_source_channel = 3;
 * @return {string}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.getIbcSourceChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams} returns this
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.setIbcSourceChannel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ibc_version = 4;
 * @return {string}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.getIbcVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams} returns this
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.setIbcVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ibc_port_id = 5;
 * @return {string}
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.getIbcPortId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.BandIBCParams} returns this
 */
proto.injective.oracle.v1beta1.BandIBCParams.prototype.setIbcPortId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.SymbolPriceTimestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracle: jspb.Message.getFieldWithDefault(msg, 1, 0),
    symbolId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.SymbolPriceTimestamp;
  return proto.injective.oracle.v1beta1.SymbolPriceTimestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.SymbolPriceTimestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracle();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSymbolId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional OracleType oracle = 1;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.getOracle = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp} returns this
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.setOracle = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string symbol_id = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.getSymbolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp} returns this
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.setSymbolId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp} returns this
 */
proto.injective.oracle.v1beta1.SymbolPriceTimestamp.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.LastPriceTimestamps.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.LastPriceTimestamps} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastPriceTimestampsList: jspb.Message.toObjectList(msg.getLastPriceTimestampsList(),
    proto.injective.oracle.v1beta1.SymbolPriceTimestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.LastPriceTimestamps}
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.LastPriceTimestamps;
  return proto.injective.oracle.v1beta1.LastPriceTimestamps.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.LastPriceTimestamps} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.LastPriceTimestamps}
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.oracle.v1beta1.SymbolPriceTimestamp;
      reader.readMessage(value,proto.injective.oracle.v1beta1.SymbolPriceTimestamp.deserializeBinaryFromReader);
      msg.addLastPriceTimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.LastPriceTimestamps.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.LastPriceTimestamps} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastPriceTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.injective.oracle.v1beta1.SymbolPriceTimestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SymbolPriceTimestamp last_price_timestamps = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.SymbolPriceTimestamp>}
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.prototype.getLastPriceTimestampsList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.SymbolPriceTimestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.oracle.v1beta1.SymbolPriceTimestamp, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.SymbolPriceTimestamp>} value
 * @return {!proto.injective.oracle.v1beta1.LastPriceTimestamps} returns this
*/
proto.injective.oracle.v1beta1.LastPriceTimestamps.prototype.setLastPriceTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.SymbolPriceTimestamp}
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.prototype.addLastPriceTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.SymbolPriceTimestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.LastPriceTimestamps} returns this
 */
proto.injective.oracle.v1beta1.LastPriceTimestamps.prototype.clearLastPriceTimestampsList = function() {
  return this.setLastPriceTimestampsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.PriceRecords.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PriceRecords.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PriceRecords} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceRecords.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracle: jspb.Message.getFieldWithDefault(msg, 1, 0),
    symbolId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    latestPriceRecordsList: jspb.Message.toObjectList(msg.getLatestPriceRecordsList(),
    proto.injective.oracle.v1beta1.PriceRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PriceRecords}
 */
proto.injective.oracle.v1beta1.PriceRecords.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PriceRecords;
  return proto.injective.oracle.v1beta1.PriceRecords.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PriceRecords} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PriceRecords}
 */
proto.injective.oracle.v1beta1.PriceRecords.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolId(value);
      break;
    case 3:
      var value = new proto.injective.oracle.v1beta1.PriceRecord;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PriceRecord.deserializeBinaryFromReader);
      msg.addLatestPriceRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PriceRecords.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PriceRecords} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceRecords.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracle();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSymbolId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLatestPriceRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.injective.oracle.v1beta1.PriceRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional OracleType oracle = 1;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.getOracle = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.oracle.v1beta1.PriceRecords} returns this
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.setOracle = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string symbol_id = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.getSymbolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceRecords} returns this
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.setSymbolId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PriceRecord latest_price_records = 3;
 * @return {!Array<!proto.injective.oracle.v1beta1.PriceRecord>}
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.getLatestPriceRecordsList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.PriceRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.oracle.v1beta1.PriceRecord, 3));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.PriceRecord>} value
 * @return {!proto.injective.oracle.v1beta1.PriceRecords} returns this
*/
proto.injective.oracle.v1beta1.PriceRecords.prototype.setLatestPriceRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.PriceRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.PriceRecord}
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.addLatestPriceRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.injective.oracle.v1beta1.PriceRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.PriceRecords} returns this
 */
proto.injective.oracle.v1beta1.PriceRecords.prototype.clearLatestPriceRecordsList = function() {
  return this.setLatestPriceRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PriceRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PriceRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PriceRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PriceRecord}
 */
proto.injective.oracle.v1beta1.PriceRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PriceRecord;
  return proto.injective.oracle.v1beta1.PriceRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PriceRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PriceRecord}
 */
proto.injective.oracle.v1beta1.PriceRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PriceRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PriceRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PriceRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PriceRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.injective.oracle.v1beta1.PriceRecord.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.PriceRecord} returns this
 */
proto.injective.oracle.v1beta1.PriceRecord.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PriceRecord.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PriceRecord} returns this
 */
proto.injective.oracle.v1beta1.PriceRecord.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.MetadataStatistics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.MetadataStatistics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.MetadataStatistics.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    recordsSampleSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mean: jspb.Message.getFieldWithDefault(msg, 3, ""),
    twap: jspb.Message.getFieldWithDefault(msg, 4, ""),
    firstTimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    lastTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    minPrice: jspb.Message.getFieldWithDefault(msg, 7, ""),
    maxPrice: jspb.Message.getFieldWithDefault(msg, 8, ""),
    medianPrice: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.MetadataStatistics;
  return proto.injective.oracle.v1beta1.MetadataStatistics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.MetadataStatistics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroupCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRecordsSampleSize(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMean(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTwap(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFirstTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPrice(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxPrice(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMedianPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.MetadataStatistics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.MetadataStatistics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.MetadataStatistics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRecordsSampleSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMean();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTwap();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFirstTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLastTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMinPrice();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMaxPrice();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMedianPrice();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional uint32 group_count = 1;
 * @return {number}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getGroupCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setGroupCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 records_sample_size = 2;
 * @return {number}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getRecordsSampleSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setRecordsSampleSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string mean = 3;
 * @return {string}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getMean = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setMean = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string twap = 4;
 * @return {string}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getTwap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setTwap = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 first_timestamp = 5;
 * @return {number}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getFirstTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setFirstTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 last_timestamp = 6;
 * @return {number}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getLastTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setLastTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string min_price = 7;
 * @return {string}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getMinPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setMinPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string max_price = 8;
 * @return {string}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getMaxPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setMaxPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string median_price = 9;
 * @return {string}
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.getMedianPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.MetadataStatistics} returns this
 */
proto.injective.oracle.v1beta1.MetadataStatistics.prototype.setMedianPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * @enum {number}
 */
proto.injective.oracle.v1beta1.OracleType = {
  UNSPECIFIED: 0,
  BAND: 1,
  PRICEFEED: 2,
  COINBASE: 3,
  CHAINLINK: 4,
  RAZOR: 5,
  DIA: 6,
  API3: 7,
  UMA: 8,
  PYTH: 9,
  BANDIBC: 10,
  PROVIDER: 11
};

goog.object.extend(exports, proto.injective.oracle.v1beta1);
