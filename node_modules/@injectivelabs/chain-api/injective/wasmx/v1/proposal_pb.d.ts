// package: injective.wasmx.v1
// file: injective/wasmx/v1/proposal.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as cosmwasm_wasm_v1_proposal_pb from "../../../cosmwasm/wasm/v1/proposal_pb";

export class ContractRegistrationRequestProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  hasContractRegistrationRequest(): boolean;
  clearContractRegistrationRequest(): void;
  getContractRegistrationRequest(): ContractRegistrationRequest | undefined;
  setContractRegistrationRequest(value?: ContractRegistrationRequest): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ContractRegistrationRequestProposal.AsObject;
  static toObject(includeInstance: boolean, msg: ContractRegistrationRequestProposal): ContractRegistrationRequestProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ContractRegistrationRequestProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ContractRegistrationRequestProposal;
  static deserializeBinaryFromReader(message: ContractRegistrationRequestProposal, reader: jspb.BinaryReader): ContractRegistrationRequestProposal;
}

export namespace ContractRegistrationRequestProposal {
  export type AsObject = {
    title: string,
    description: string,
    contractRegistrationRequest?: ContractRegistrationRequest.AsObject,
  }
}

export class BatchContractRegistrationRequestProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  clearContractRegistrationRequestsList(): void;
  getContractRegistrationRequestsList(): Array<ContractRegistrationRequest>;
  setContractRegistrationRequestsList(value: Array<ContractRegistrationRequest>): void;
  addContractRegistrationRequests(value?: ContractRegistrationRequest, index?: number): ContractRegistrationRequest;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchContractRegistrationRequestProposal.AsObject;
  static toObject(includeInstance: boolean, msg: BatchContractRegistrationRequestProposal): BatchContractRegistrationRequestProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchContractRegistrationRequestProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchContractRegistrationRequestProposal;
  static deserializeBinaryFromReader(message: BatchContractRegistrationRequestProposal, reader: jspb.BinaryReader): BatchContractRegistrationRequestProposal;
}

export namespace BatchContractRegistrationRequestProposal {
  export type AsObject = {
    title: string,
    description: string,
    contractRegistrationRequestsList: Array<ContractRegistrationRequest.AsObject>,
  }
}

export class BatchContractDeregistrationProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  clearContractsList(): void;
  getContractsList(): Array<string>;
  setContractsList(value: Array<string>): void;
  addContracts(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchContractDeregistrationProposal.AsObject;
  static toObject(includeInstance: boolean, msg: BatchContractDeregistrationProposal): BatchContractDeregistrationProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchContractDeregistrationProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchContractDeregistrationProposal;
  static deserializeBinaryFromReader(message: BatchContractDeregistrationProposal, reader: jspb.BinaryReader): BatchContractDeregistrationProposal;
}

export namespace BatchContractDeregistrationProposal {
  export type AsObject = {
    title: string,
    description: string,
    contractsList: Array<string>,
  }
}

export class ContractRegistrationRequest extends jspb.Message {
  getContractAddress(): string;
  setContractAddress(value: string): void;

  getGasLimit(): number;
  setGasLimit(value: number): void;

  getGasPrice(): number;
  setGasPrice(value: number): void;

  getShouldPinContract(): boolean;
  setShouldPinContract(value: boolean): void;

  getIsMigrationAllowed(): boolean;
  setIsMigrationAllowed(value: boolean): void;

  getCodeId(): number;
  setCodeId(value: number): void;

  getAdminAddress(): string;
  setAdminAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ContractRegistrationRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ContractRegistrationRequest): ContractRegistrationRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ContractRegistrationRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ContractRegistrationRequest;
  static deserializeBinaryFromReader(message: ContractRegistrationRequest, reader: jspb.BinaryReader): ContractRegistrationRequest;
}

export namespace ContractRegistrationRequest {
  export type AsObject = {
    contractAddress: string,
    gasLimit: number,
    gasPrice: number,
    shouldPinContract: boolean,
    isMigrationAllowed: boolean,
    codeId: number,
    adminAddress: string,
  }
}

export class BatchStoreCodeProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  clearProposalsList(): void;
  getProposalsList(): Array<cosmwasm_wasm_v1_proposal_pb.StoreCodeProposal>;
  setProposalsList(value: Array<cosmwasm_wasm_v1_proposal_pb.StoreCodeProposal>): void;
  addProposals(value?: cosmwasm_wasm_v1_proposal_pb.StoreCodeProposal, index?: number): cosmwasm_wasm_v1_proposal_pb.StoreCodeProposal;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): BatchStoreCodeProposal.AsObject;
  static toObject(includeInstance: boolean, msg: BatchStoreCodeProposal): BatchStoreCodeProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: BatchStoreCodeProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): BatchStoreCodeProposal;
  static deserializeBinaryFromReader(message: BatchStoreCodeProposal, reader: jspb.BinaryReader): BatchStoreCodeProposal;
}

export namespace BatchStoreCodeProposal {
  export type AsObject = {
    title: string,
    description: string,
    proposalsList: Array<cosmwasm_wasm_v1_proposal_pb.StoreCodeProposal.AsObject>,
  }
}

