// package: tendermint.rpc.grpc
// file: tendermint/rpc/grpc/types.proto

import * as tendermint_rpc_grpc_types_pb from "../../../tendermint/rpc/grpc/types_pb";
import {grpc} from "@improbable-eng/grpc-web";

type BroadcastAPIPing = {
  readonly methodName: string;
  readonly service: typeof BroadcastAPI;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof tendermint_rpc_grpc_types_pb.RequestPing;
  readonly responseType: typeof tendermint_rpc_grpc_types_pb.ResponsePing;
};

type BroadcastAPIBroadcastTx = {
  readonly methodName: string;
  readonly service: typeof BroadcastAPI;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof tendermint_rpc_grpc_types_pb.RequestBroadcastTx;
  readonly responseType: typeof tendermint_rpc_grpc_types_pb.ResponseBroadcastTx;
};

export class BroadcastAPI {
  static readonly serviceName: string;
  static readonly Ping: BroadcastAPIPing;
  static readonly BroadcastTx: BroadcastAPIBroadcastTx;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class BroadcastAPIClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  ping(
    requestMessage: tendermint_rpc_grpc_types_pb.RequestPing,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: tendermint_rpc_grpc_types_pb.ResponsePing|null) => void
  ): UnaryResponse;
  ping(
    requestMessage: tendermint_rpc_grpc_types_pb.RequestPing,
    callback: (error: ServiceError|null, responseMessage: tendermint_rpc_grpc_types_pb.ResponsePing|null) => void
  ): UnaryResponse;
  broadcastTx(
    requestMessage: tendermint_rpc_grpc_types_pb.RequestBroadcastTx,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: tendermint_rpc_grpc_types_pb.ResponseBroadcastTx|null) => void
  ): UnaryResponse;
  broadcastTx(
    requestMessage: tendermint_rpc_grpc_types_pb.RequestBroadcastTx,
    callback: (error: ServiceError|null, responseMessage: tendermint_rpc_grpc_types_pb.ResponseBroadcastTx|null) => void
  ): UnaryResponse;
}

