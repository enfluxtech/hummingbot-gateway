import { CurrencyAmount } from '@traderjoe-xyz/sdk';
import { LiquidityDistribution, LiquidityDistributionParams } from '../types/pair';
/**
 * Returns distribution params for on-chain addLiquidity() call
 *
 * @param {LiquidityDistribution} distribution
 * @returns {LiquidityDistributionParams}
}
 */
export declare const getLiquidityConfig: (distribution: LiquidityDistribution) => LiquidityDistributionParams;
/**
 * Returns distribution params for on-chain addLiquidity() call when liquidity is focused at a target bin
 * @param {number} activeId
 * @param {number} targetBin
 * @returns {LiquidityDistributionParams}
 */
export declare const getDistributionFromTargetBin: (activeId: number, targetBin: number) => LiquidityDistributionParams;
/**
 * Returns normalized array, e.g. normalize so array sums to 1e18 within 1e5 precision
 * @param dist
 * @param sumTo
 * @param precision
 * @returns
 */
export declare const normalizeDist: (dist: bigint[], sumTo: bigint, precision: bigint) => bigint[];
/**
 * Returns distribution params for on-chain addLiquidity() call when liquidity is focused at a custom range of bins
 *
 * @param {number} activeId
 * @param {number[]} binRange
 * @param {CurrencyAmount[]} parsedAmounts
 * @returns
 */
export declare const getUniformDistributionFromBinRange: (activeId: number, binRange: number[], parsedAmounts: CurrencyAmount[]) => LiquidityDistributionParams;
/**
 * Returns Bid-Ask distribution params for custom bin range
 *
 * @param {number} activeId
 * @param {number[]} binRange
 * @param {CurrencyAmount[]} parsedAmounts
 * @returns
 */
export declare const getBidAskDistributionFromBinRange: (activeId: number, binRange: number[], parsedAmounts: CurrencyAmount[]) => LiquidityDistributionParams;
/**
 * Returns Curve distribution params for custom bin range
 *
 * @param {number} activeId
 * @param {number[]} binRange
 * @param {CurrencyAmount[]} parsedAmounts
 * @returns
 */
export declare const getCurveDistributionFromBinRange: (activeId: number, binRange: number[], parsedAmounts: CurrencyAmount[]) => LiquidityDistributionParams;
