// package: injective.ocr.v1beta1
// file: injective/ocr/v1beta1/query.proto

import * as injective_ocr_v1beta1_query_pb from "../../../injective/ocr/v1beta1/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryParamsRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryParamsResponse;
};

type QueryFeedConfig = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryFeedConfigRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryFeedConfigResponse;
};

type QueryFeedConfigInfo = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryFeedConfigInfoRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryFeedConfigInfoResponse;
};

type QueryLatestRound = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryLatestRoundRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryLatestRoundResponse;
};

type QueryLatestTransmissionDetails = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryLatestTransmissionDetailsRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryLatestTransmissionDetailsResponse;
};

type QueryOwedAmount = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryOwedAmountRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryOwedAmountResponse;
};

type QueryOcrModuleState = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof injective_ocr_v1beta1_query_pb.QueryModuleStateRequest;
  readonly responseType: typeof injective_ocr_v1beta1_query_pb.QueryModuleStateResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly Params: QueryParams;
  static readonly FeedConfig: QueryFeedConfig;
  static readonly FeedConfigInfo: QueryFeedConfigInfo;
  static readonly LatestRound: QueryLatestRound;
  static readonly LatestTransmissionDetails: QueryLatestTransmissionDetails;
  static readonly OwedAmount: QueryOwedAmount;
  static readonly OcrModuleState: QueryOcrModuleState;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  params(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  params(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryParamsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  feedConfig(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigResponse|null) => void
  ): UnaryResponse;
  feedConfig(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigResponse|null) => void
  ): UnaryResponse;
  feedConfigInfo(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigInfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigInfoResponse|null) => void
  ): UnaryResponse;
  feedConfigInfo(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigInfoRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryFeedConfigInfoResponse|null) => void
  ): UnaryResponse;
  latestRound(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryLatestRoundRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryLatestRoundResponse|null) => void
  ): UnaryResponse;
  latestRound(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryLatestRoundRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryLatestRoundResponse|null) => void
  ): UnaryResponse;
  latestTransmissionDetails(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryLatestTransmissionDetailsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryLatestTransmissionDetailsResponse|null) => void
  ): UnaryResponse;
  latestTransmissionDetails(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryLatestTransmissionDetailsRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryLatestTransmissionDetailsResponse|null) => void
  ): UnaryResponse;
  owedAmount(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryOwedAmountRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryOwedAmountResponse|null) => void
  ): UnaryResponse;
  owedAmount(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryOwedAmountRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryOwedAmountResponse|null) => void
  ): UnaryResponse;
  ocrModuleState(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryModuleStateRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryModuleStateResponse|null) => void
  ): UnaryResponse;
  ocrModuleState(
    requestMessage: injective_ocr_v1beta1_query_pb.QueryModuleStateRequest,
    callback: (error: ServiceError|null, responseMessage: injective_ocr_v1beta1_query_pb.QueryModuleStateResponse|null) => void
  ): UnaryResponse;
}

