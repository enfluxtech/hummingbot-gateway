export declare type ChannelEventSourceStarter<T> = (eventName: T) => ChannelEventSourceStopper;
export declare type ChannelEventSourceStopper = () => void;
export declare type ChannelEventSourceInitEmitter<T> = (eventName: T) => void;
interface ChannelEventSourceParams<T> {
    eventSourceStarter: ChannelEventSourceStarter<T>;
    initEventEmitter?: ChannelEventSourceInitEmitter<T>;
}
export declare class ChannelEventSource<EventName extends string = string> {
    private _eventSourceStarter;
    private _eventSourceStopper?;
    private _initEventEmitter?;
    private _isServedMap;
    get isFirstRequired(): boolean;
    get isLastRequired(): boolean;
    constructor({ eventSourceStarter, initEventEmitter }: ChannelEventSourceParams<EventName>);
    callInitEventEmitter(eventName: EventName): void;
    tryStart(eventName: EventName): void;
    tryStop(eventName: EventName): void;
}
export {};
