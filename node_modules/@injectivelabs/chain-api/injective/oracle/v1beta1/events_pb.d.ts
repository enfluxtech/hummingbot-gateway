// package: injective.oracle.v1beta1
// file: injective/oracle/v1beta1/events.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";

export class SetChainlinkPriceEvent extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  getAnswer(): string;
  setAnswer(value: string): void;

  getTimestamp(): number;
  setTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetChainlinkPriceEvent.AsObject;
  static toObject(includeInstance: boolean, msg: SetChainlinkPriceEvent): SetChainlinkPriceEvent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetChainlinkPriceEvent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetChainlinkPriceEvent;
  static deserializeBinaryFromReader(message: SetChainlinkPriceEvent, reader: jspb.BinaryReader): SetChainlinkPriceEvent;
}

export namespace SetChainlinkPriceEvent {
  export type AsObject = {
    feedId: string,
    answer: string,
    timestamp: number,
  }
}

export class SetBandPriceEvent extends jspb.Message {
  getRelayer(): string;
  setRelayer(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getPrice(): string;
  setPrice(value: string): void;

  getResolveTime(): number;
  setResolveTime(value: number): void;

  getRequestId(): number;
  setRequestId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetBandPriceEvent.AsObject;
  static toObject(includeInstance: boolean, msg: SetBandPriceEvent): SetBandPriceEvent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetBandPriceEvent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetBandPriceEvent;
  static deserializeBinaryFromReader(message: SetBandPriceEvent, reader: jspb.BinaryReader): SetBandPriceEvent;
}

export namespace SetBandPriceEvent {
  export type AsObject = {
    relayer: string,
    symbol: string,
    price: string,
    resolveTime: number,
    requestId: number,
  }
}

export class SetBandIBCPriceEvent extends jspb.Message {
  getRelayer(): string;
  setRelayer(value: string): void;

  clearSymbolsList(): void;
  getSymbolsList(): Array<string>;
  setSymbolsList(value: Array<string>): void;
  addSymbols(value: string, index?: number): string;

  clearPricesList(): void;
  getPricesList(): Array<string>;
  setPricesList(value: Array<string>): void;
  addPrices(value: string, index?: number): string;

  getResolveTime(): number;
  setResolveTime(value: number): void;

  getRequestId(): number;
  setRequestId(value: number): void;

  getClientId(): number;
  setClientId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetBandIBCPriceEvent.AsObject;
  static toObject(includeInstance: boolean, msg: SetBandIBCPriceEvent): SetBandIBCPriceEvent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetBandIBCPriceEvent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetBandIBCPriceEvent;
  static deserializeBinaryFromReader(message: SetBandIBCPriceEvent, reader: jspb.BinaryReader): SetBandIBCPriceEvent;
}

export namespace SetBandIBCPriceEvent {
  export type AsObject = {
    relayer: string,
    symbolsList: Array<string>,
    pricesList: Array<string>,
    resolveTime: number,
    requestId: number,
    clientId: number,
  }
}

export class EventBandIBCAckSuccess extends jspb.Message {
  getAckResult(): string;
  setAckResult(value: string): void;

  getClientId(): number;
  setClientId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventBandIBCAckSuccess.AsObject;
  static toObject(includeInstance: boolean, msg: EventBandIBCAckSuccess): EventBandIBCAckSuccess.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventBandIBCAckSuccess, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventBandIBCAckSuccess;
  static deserializeBinaryFromReader(message: EventBandIBCAckSuccess, reader: jspb.BinaryReader): EventBandIBCAckSuccess;
}

export namespace EventBandIBCAckSuccess {
  export type AsObject = {
    ackResult: string,
    clientId: number,
  }
}

export class EventBandIBCAckError extends jspb.Message {
  getAckError(): string;
  setAckError(value: string): void;

  getClientId(): number;
  setClientId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventBandIBCAckError.AsObject;
  static toObject(includeInstance: boolean, msg: EventBandIBCAckError): EventBandIBCAckError.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventBandIBCAckError, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventBandIBCAckError;
  static deserializeBinaryFromReader(message: EventBandIBCAckError, reader: jspb.BinaryReader): EventBandIBCAckError;
}

export namespace EventBandIBCAckError {
  export type AsObject = {
    ackError: string,
    clientId: number,
  }
}

export class EventBandIBCResponseTimeout extends jspb.Message {
  getClientId(): number;
  setClientId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventBandIBCResponseTimeout.AsObject;
  static toObject(includeInstance: boolean, msg: EventBandIBCResponseTimeout): EventBandIBCResponseTimeout.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventBandIBCResponseTimeout, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventBandIBCResponseTimeout;
  static deserializeBinaryFromReader(message: EventBandIBCResponseTimeout, reader: jspb.BinaryReader): EventBandIBCResponseTimeout;
}

export namespace EventBandIBCResponseTimeout {
  export type AsObject = {
    clientId: number,
  }
}

export class SetPriceFeedPriceEvent extends jspb.Message {
  getRelayer(): string;
  setRelayer(value: string): void;

  getBase(): string;
  setBase(value: string): void;

  getQuote(): string;
  setQuote(value: string): void;

  getPrice(): string;
  setPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetPriceFeedPriceEvent.AsObject;
  static toObject(includeInstance: boolean, msg: SetPriceFeedPriceEvent): SetPriceFeedPriceEvent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetPriceFeedPriceEvent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetPriceFeedPriceEvent;
  static deserializeBinaryFromReader(message: SetPriceFeedPriceEvent, reader: jspb.BinaryReader): SetPriceFeedPriceEvent;
}

export namespace SetPriceFeedPriceEvent {
  export type AsObject = {
    relayer: string,
    base: string,
    quote: string,
    price: string,
  }
}

export class SetProviderPriceEvent extends jspb.Message {
  getProvider(): string;
  setProvider(value: string): void;

  getRelayer(): string;
  setRelayer(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getPrice(): string;
  setPrice(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetProviderPriceEvent.AsObject;
  static toObject(includeInstance: boolean, msg: SetProviderPriceEvent): SetProviderPriceEvent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetProviderPriceEvent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetProviderPriceEvent;
  static deserializeBinaryFromReader(message: SetProviderPriceEvent, reader: jspb.BinaryReader): SetProviderPriceEvent;
}

export namespace SetProviderPriceEvent {
  export type AsObject = {
    provider: string,
    relayer: string,
    symbol: string,
    price: string,
  }
}

export class SetCoinbasePriceEvent extends jspb.Message {
  getSymbol(): string;
  setSymbol(value: string): void;

  getPrice(): string;
  setPrice(value: string): void;

  getTimestamp(): number;
  setTimestamp(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SetCoinbasePriceEvent.AsObject;
  static toObject(includeInstance: boolean, msg: SetCoinbasePriceEvent): SetCoinbasePriceEvent.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SetCoinbasePriceEvent, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SetCoinbasePriceEvent;
  static deserializeBinaryFromReader(message: SetCoinbasePriceEvent, reader: jspb.BinaryReader): SetCoinbasePriceEvent;
}

export namespace SetCoinbasePriceEvent {
  export type AsObject = {
    symbol: string,
    price: string,
    timestamp: number,
  }
}

