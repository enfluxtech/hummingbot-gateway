"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatLog = void 0;
const utils_1 = require("ethers/lib/utils");
const colors_1 = require("../colors");
const utils_2 = require("../utils");
const param_1 = require("./param");
const result_1 = require("./result");
async function formatLog(log, currentAddress, dependencies) {
    const nameTag = currentAddress
        ? (0, utils_2.getFromNameTags)(currentAddress, dependencies)
        : undefined;
    const names = await dependencies.artifacts.getAllFullyQualifiedNames();
    const code = !nameTag && currentAddress
        ? (await dependencies.provider.send("eth_getCode", [
            currentAddress,
            "latest",
        ]))
        : undefined;
    let str;
    let contractName = nameTag;
    for (const name of names) {
        const artifact = await dependencies.artifacts.readArtifact(name);
        const iface = new utils_1.Interface(artifact.abi);
        // try to find the contract name
        if ((0, utils_2.compareBytecode)(artifact.deployedBytecode, code !== null && code !== void 0 ? code : "0x") > 0.5) {
            contractName = artifact.contractName;
        }
        // try to parse the arguments
        try {
            const parsed = iface.parseLog(log);
            const decimals = -1;
            str = `${(0, colors_1.colorEvent)(parsed.name)}(${(0, result_1.formatResult)(parsed.args, parsed.eventFragment, { decimals, isInput: true, shorten: false }, dependencies)})`;
        }
        catch (_a) { }
        // if we got both the contract name and arguments parsed so far, we can stop
        if (contractName && str) {
            return (0, colors_1.colorContract)(contractName) + "." + str;
        }
    }
    return (`<${(0, colors_1.colorContract)("UnknownContract")} ${(0, param_1.formatParam)(currentAddress, dependencies)}>.` +
        (str !== null && str !== void 0 ? str : `${(0, colors_1.colorEvent)("UnknownEvent")}(${(0, param_1.formatParam)(log.data, dependencies)}, ${(0, param_1.formatParam)(log.topics, dependencies)})`));
}
exports.formatLog = formatLog;
//# sourceMappingURL=log.js.map