{"version":3,"file":"Wallet.js","sources":["../../../../src/core/wallet/Wallet.ts"],"sourcesContent":["import Big from \"big.js\"\nimport { RATIO_DECIMAL } from \"../../constants\"\nimport { ContractName } from \"../../contracts\"\n\nimport { Vault as ContractVault } from \"../../contracts/type\"\nimport {\n    Channel,\n    ChannelEventSource,\n    DEFAULT_PERIOD,\n    MemoizedFetcher,\n    createMemoizedFetcher,\n    hasNumberArrChange,\n    hasNumberChange,\n} from \"../../internal\"\nimport { bigNumber2BigAndScaleDown, logger, poll, scaleDownDecimals } from \"../../utils\"\nimport { ContractCall, ContractReader, MulticallReader } from \"../contractReader\"\nimport type { PerpetualProtocol } from \"../PerpetualProtocol\"\nimport { NonSettlementCollateralToken } from \"./NonSettlementCollateralToken\"\nimport { SettlementToken } from \"./SettlementToken\"\n\ntype WalletEventName =\n    | \"allowanceListUpdated\"\n    | \"balanceListUpdated\"\n    | \"balanceEthUpdated\"\n    | \"collateralTokenPriceListUpdated\"\n    | \"updatedWalletDataAll\"\n    | \"updateError\"\n\ntype CacheKey = \"allowanceList\" | \"balanceList\" | \"balanceEth\" | \"collateralTokenPriceList\"\ntype CacheValue = Big | Big[] | number[]\n\nclass Wallet extends Channel<WalletEventName> {\n    private readonly _contractVault: ContractVault // TODO: move to vault\n    private readonly _contractReader: ContractReader\n    private readonly _settlementToken: SettlementToken\n    private readonly _collateralTokenList: (NonSettlementCollateralToken | SettlementToken)[] = []\n    private _cache: Map<CacheKey, CacheValue> = new Map()\n\n    constructor(private readonly _perp: PerpetualProtocol, readonly account: string) {\n        super(_perp.channelRegistry)\n        this._contractVault = _perp.contracts.vault\n        this._contractReader = _perp.contractReader\n        this._settlementToken = new SettlementToken(_perp, _perp.contracts.settlementToken)\n        this._collateralTokenList.push(this._settlementToken)\n        _perp.contracts.collateralTokenMap.forEach(token => {\n            this._collateralTokenList.push(\n                new NonSettlementCollateralToken(_perp, token.contract, token.priceFeedContract),\n            )\n        })\n    }\n\n    // NOTE: getters\n    get settlementToken() {\n        return this._settlementToken\n    }\n\n    get collateralTokenList() {\n        return this._collateralTokenList\n    }\n\n    // NOTE: public methods\n    async getAllowanceList({ cache = true } = {}) {\n        return this._fetch(\"allowanceList\", { cache })\n    }\n\n    async getBalanceList({ cache = true } = {}) {\n        return this._fetch(\"balanceList\", { cache })\n    }\n\n    async getBalanceEth({ cache = true } = {}) {\n        return this._fetch(\"balanceEth\", { cache })\n    }\n\n    async getCollateralTokenPriceList({ cache = true } = {}) {\n        return this._fetch(\"collateralTokenPriceList\", { cache })\n    }\n\n    async approve(token: NonSettlementCollateralToken | SettlementToken, amount?: Big) {\n        return token.approve(this.account, this._contractVault.address, amount)\n    }\n\n    // NOTE: protected methods\n    protected _getEventSourceMap() {\n        const fetchAndEmitAllowanceListUpdated = this._createFetchAndEmitAllowanceListUpdated()\n        const allowanceListUpdated = new ChannelEventSource<WalletEventName>({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitAllowanceListUpdated, this._perp.moduleConfigs?.wallet?.period || DEFAULT_PERIOD)\n                    .cancel,\n            initEventEmitter: () => fetchAndEmitAllowanceListUpdated(true, true),\n        })\n\n        const fetchAndEmitBalanceListUpdated = this._createFetchAndEmitBalanceListUpdated()\n        const balanceListUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitBalanceListUpdated, this._perp.moduleConfigs?.wallet?.period || DEFAULT_PERIOD).cancel,\n            initEventEmitter: () => fetchAndEmitBalanceListUpdated(true, true),\n        })\n\n        const fetchAndEmitBalanceEthUpdated = this._createFetchAndEmitBalanceEthUpdated()\n        const balanceEthUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitBalanceEthUpdated, this._perp.moduleConfigs?.wallet?.period || DEFAULT_PERIOD).cancel,\n            initEventEmitter: () => fetchAndEmitBalanceEthUpdated(true, true),\n        })\n\n        const fetchAndEmitCollateralTokenPriceListUpdated = this._createFetchAndEmitCollateralTokenPriceListUpdated()\n        const collateralTokenPriceListUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(\n                    fetchAndEmitCollateralTokenPriceListUpdated,\n                    this._perp.moduleConfigs?.wallet?.period || DEFAULT_PERIOD,\n                ).cancel,\n            initEventEmitter: () => fetchAndEmitCollateralTokenPriceListUpdated(true, true),\n        })\n\n        // NOTE: getWalletDataAll\n        const fetchAndEmitUpdatedWalletDataAll = this.getWalletDataAll.bind(this)\n        const updateDataEventSourceWalletDataAll = new ChannelEventSource({\n            eventSourceStarter: () => {\n                return poll(\n                    fetchAndEmitUpdatedWalletDataAll,\n                    this._perp.moduleConfigs?.wallet?.period || DEFAULT_PERIOD,\n                ).cancel\n            },\n            initEventEmitter: () => fetchAndEmitUpdatedWalletDataAll(),\n        })\n\n        return {\n            allowanceListUpdated,\n            balanceListUpdated,\n            balanceEthUpdated,\n            collateralTokenPriceListUpdated,\n            // NOTE: getWalletDataAll\n            updatedWalletDataAll: updateDataEventSourceWalletDataAll,\n        }\n    }\n\n    // NOTE: private methods\n    private async _fetchUpdateData<T>(fetcher: () => Promise<T>) {\n        try {\n            return await fetcher()\n        } catch (error) {\n            this.emit(\"updateError\", { error })\n        }\n    }\n\n    private async _fetch(key: \"allowanceList\", obj?: { cache: boolean }): Promise<Big[]>\n    private async _fetch(key: \"balanceList\", obj?: { cache: boolean }): Promise<Big[]>\n    private async _fetch(key: \"balanceEth\", obj?: { cache: boolean }): Promise<Big>\n    private async _fetch(key: \"collateralTokenPriceList\", obj?: { cache: boolean }): Promise<number[]>\n    private async _fetch(key: CacheKey, { cache = true } = {}) {\n        if (this._cache.has(key) && cache) {\n            return this._cache.get(key) as CacheValue\n        }\n\n        let result\n        switch (key) {\n            case \"allowanceList\": {\n                const tokens = this._collateralTokenList\n                const spender = this._contractVault.address\n                result = await Promise.all(tokens.map(token => token.allowance(this.account, spender)))\n                break\n            }\n            case \"balanceList\": {\n                const tokens = this._collateralTokenList\n                result = await Promise.all(tokens.map(token => token.balanceOf(this.account)))\n                break\n            }\n            case \"balanceEth\": {\n                result = await this._contractReader.getNativeBalance(this.account)\n                break\n            }\n            case \"collateralTokenPriceList\": {\n                const tokens = this._collateralTokenList\n                result = await Promise.all(tokens.map(token => token.price()))\n                break\n            }\n        }\n        this._cache.set(key, result)\n\n        return result\n    }\n\n    private _createFetchAndEmitAllowanceListUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this._fetch(\"allowanceList\", { cache: false })),\n            () => this.emit(\"allowanceListUpdated\", this),\n            (a, b) => (a && b ? hasNumberArrChange(a, b) : true),\n        )\n    }\n\n    private _createFetchAndEmitBalanceListUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this._fetch(\"balanceList\", { cache: false })),\n            () => this.emit(\"balanceListUpdated\", this),\n            (a, b) => (a && b ? hasNumberArrChange(a, b) : true),\n        )\n    }\n\n    private _createFetchAndEmitBalanceEthUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this._fetch(\"balanceEth\", { cache: false })),\n            () => this.emit(\"balanceEthUpdated\", this),\n            (a, b) => (a && b ? hasNumberChange(a, b) : true),\n        )\n    }\n\n    private _createFetchAndEmitCollateralTokenPriceListUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this._fetch(\"collateralTokenPriceList\", { cache: false })),\n            () => this.emit(\"collateralTokenPriceListUpdated\", this),\n            (a, b) => (a && b ? a !== b : true),\n        )\n    }\n\n    protected async getWalletDataAll() {\n        try {\n            logger(\"getWalletDataAll\")\n            const account = this.account\n            const contracts = this._perp.contracts\n            const multicall2 = new MulticallReader({ contract: contracts.multicall2 })\n\n            const callsMap: Record<string, ContractCall[]> = {}\n            this._collateralTokenList.forEach(collateralToken => {\n                const isSettlementToken = collateralToken instanceof SettlementToken\n                const collateralTokenAddress = collateralToken.address\n                const collateralTokenContract = collateralToken.contract\n                const decimalsCall = isSettlementToken\n                    ? {\n                          contract: collateralTokenContract,\n                          contractName: ContractName.SETTLEMENT_TOKEN,\n                          funcName: \"decimals\",\n                          funcParams: [],\n                      }\n                    : {\n                          contract: collateralTokenContract,\n                          contractName: ContractName.COLLATERAL_TOKENS,\n                          funcName: \"decimals\",\n                          funcParams: [],\n                      }\n                const allowanceCall = isSettlementToken\n                    ? {\n                          contract: collateralToken.contract,\n                          contractName: ContractName.SETTLEMENT_TOKEN,\n                          funcName: \"allowance\",\n                          funcParams: [account, this._contractVault.address],\n                      }\n                    : {\n                          contract: collateralToken.contract,\n                          contractName: ContractName.COLLATERAL_TOKENS,\n                          funcName: \"allowance\",\n                          funcParams: [account, this._contractVault.address],\n                      }\n                const balanceCall = isSettlementToken\n                    ? {\n                          contract: collateralTokenContract,\n                          contractName: ContractName.SETTLEMENT_TOKEN,\n                          funcName: \"balanceOf\",\n                          funcParams: [account],\n                      }\n                    : {\n                          contract: collateralTokenContract,\n                          contractName: ContractName.COLLATERAL_TOKENS,\n                          funcName: \"balanceOf\",\n                          funcParams: [account],\n                      }\n                const calls: ContractCall[] = [\n                    // NOTE: get decimals\n                    decimalsCall,\n                    // NOTE: get allowance\n                    allowanceCall,\n                    // NOTE: get balance\n                    balanceCall,\n                ]\n                const priceDecimalsCall = isSettlementToken\n                    ? undefined\n                    : {\n                          contract: collateralToken.priceFeedContract,\n                          contractName: ContractName.CHAINLINK_PRICE_FEED,\n                          funcName: \"decimals\",\n                          funcParams: [],\n                      }\n                const priceCall = isSettlementToken\n                    ? undefined\n                    : {\n                          contract: collateralToken.priceFeedContract,\n                          contractName: ContractName.CHAINLINK_PRICE_FEED,\n                          funcName: \"getPrice\",\n                          funcParams: [0],\n                      }\n                priceDecimalsCall && calls.push(priceDecimalsCall)\n                priceCall && calls.push(priceCall)\n                callsMap[`${collateralTokenAddress}`] = calls\n            })\n\n            const data = await multicall2.execute(Object.values(callsMap).flat())\n\n            const walletDataAll: WalletDataAll = {}\n            Object.entries(callsMap).forEach(([collateralAddress, calls]) => {\n                const dataChunk = data.splice(0, calls.length)\n                const decimals = dataChunk[0]\n                const allowance = bigNumber2BigAndScaleDown(dataChunk[1], decimals)\n                const balance = bigNumber2BigAndScaleDown(dataChunk[2], decimals)\n                const priceDecimals = dataChunk[3]\n                const price = dataChunk[4]\n                walletDataAll[`${collateralAddress}`] = {\n                    allowance,\n                    balance,\n                    // NOTE: SettlementToken price = 1\n                    price: priceDecimals && price ? bigNumber2BigAndScaleDown(price, priceDecimals).toNumber() : 1,\n                }\n            })\n\n            this.emit(\"updatedWalletDataAll\", walletDataAll)\n        } catch (error) {\n            this.emit(\"updateError\", { error })\n        }\n    }\n\n    // TODO: too many ternary operator, can try to extract settlement token from collateral token list\n    async getWalletDataAllCollateralInfo() {\n        logger(\"getWalletDataAllCollateralInfo\")\n\n        const contracts = this._perp.contracts\n        const collateralTokenList = this._collateralTokenList\n        const multicall2 = new MulticallReader({ contract: contracts.multicall2 })\n\n        const callsMap: Record<string, ContractCall[]> = {}\n        collateralTokenList.forEach(collateralToken => {\n            const isSettlementToken = collateralToken instanceof SettlementToken\n            const collateralTokenContract = collateralToken.contract\n            const collateralTokenAddress = collateralToken.address\n            const decimalsCall = isSettlementToken\n                ? {\n                      contract: collateralTokenContract,\n                      contractName: ContractName.SETTLEMENT_TOKEN,\n                      funcName: \"decimals\",\n                      funcParams: [],\n                  }\n                : {\n                      contract: collateralTokenContract,\n                      contractName: ContractName.COLLATERAL_TOKENS,\n                      funcName: \"decimals\",\n                      funcParams: [],\n                  }\n            const balanceCall = isSettlementToken\n                ? {\n                      contract: collateralTokenContract,\n                      contractName: ContractName.SETTLEMENT_TOKEN,\n                      funcName: \"balanceOf\",\n                      funcParams: [contracts.vault.address],\n                  }\n                : {\n                      contract: collateralTokenContract,\n                      contractName: ContractName.COLLATERAL_TOKENS,\n                      funcName: \"balanceOf\",\n                      funcParams: [contracts.vault.address],\n                  }\n            const symbolCall = isSettlementToken\n                ? undefined\n                : {\n                      contract: collateralTokenContract,\n                      contractName: ContractName.COLLATERAL_TOKENS,\n                      funcName: \"symbol\",\n                      funcParams: [],\n                  }\n            const nameCall = isSettlementToken\n                ? undefined\n                : {\n                      contract: collateralTokenContract,\n                      contractName: ContractName.COLLATERAL_TOKENS,\n                      funcName: \"name\",\n                      funcParams: [],\n                  }\n            const configCall = isSettlementToken\n                ? undefined\n                : {\n                      contract: contracts.collateralManager,\n                      contractName: ContractName.COLLATERAL_MANAGER,\n                      funcName: \"getCollateralConfig\",\n                      funcParams: [collateralTokenAddress],\n                  }\n            const calls: ContractCall[] = [\n                // NOTE: get decimal\n                decimalsCall,\n                // NOTE: get balance (deposited amount)\n                balanceCall,\n            ]\n            // NOTE: get symbol\n            symbolCall && calls.push(symbolCall)\n            // NOTE: get name\n            nameCall && calls.push(nameCall)\n            // NOTE: get config\n            configCall && calls.push(configCall)\n            callsMap[`${collateralTokenAddress}`] = calls\n        })\n\n        const data = await multicall2.execute(Object.values(callsMap).flat())\n        const walletDataAllCollateralInfo: WalletDataAllCollateralInfo = {}\n        Object.entries(callsMap).forEach(([collateralTokenAddress, calls]) => {\n            const dataChunk = data.splice(0, calls.length)\n            const decimals = dataChunk[0]\n            const depositedAmount = bigNumber2BigAndScaleDown(dataChunk[1], decimals)\n            const symbol = dataChunk[2] || \"USDC\"\n            const name = dataChunk[3] || \"USDC Coin\"\n            const config = dataChunk[4]\n            const weight = config?.collateralRatio\n                ? scaleDownDecimals(Big(config.collateralRatio), RATIO_DECIMAL).toNumber()\n                : 1\n            const depositCap = config?.depositCap ? bigNumber2BigAndScaleDown(config.depositCap, decimals) : undefined\n            walletDataAllCollateralInfo[`${collateralTokenAddress}`] = {\n                symbol,\n                name,\n                weight,\n                depositCap,\n                depositedAmount,\n            }\n        })\n\n        return walletDataAllCollateralInfo\n    }\n}\n\nexport { Wallet }\n\nexport type WalletDataAll = {\n    [key: string]: {\n        allowance: Big\n        balance: Big\n        price: number\n    }\n}\n\nexport type WalletDataAllCollateralInfo = {\n    [key: string]: {\n        symbol: string\n        name: string\n        weight: number\n        depositCap?: Big\n        depositedAmount: Big\n    }\n}\n"],"names":["Wallet","Channel","constructor","_perp","account","super","channelRegistry","this","_collateralTokenList","_cache","Map","_contractVault","contracts","vault","_contractReader","contractReader","_settlementToken","SettlementToken","settlementToken","push","collateralTokenMap","forEach","token","NonSettlementCollateralToken","contract","priceFeedContract","collateralTokenList","async","cache","_fetch","amount","approve","address","_getEventSourceMap","fetchAndEmitAllowanceListUpdated","_createFetchAndEmitAllowanceListUpdated","allowanceListUpdated","ChannelEventSource","eventSourceStarter","poll","_b","moduleConfigs","_a","wallet","period","DEFAULT_PERIOD","cancel","initEventEmitter","fetchAndEmitBalanceListUpdated","_createFetchAndEmitBalanceListUpdated","balanceListUpdated","fetchAndEmitBalanceEthUpdated","_createFetchAndEmitBalanceEthUpdated","balanceEthUpdated","fetchAndEmitCollateralTokenPriceListUpdated","_createFetchAndEmitCollateralTokenPriceListUpdated","collateralTokenPriceListUpdated","fetchAndEmitUpdatedWalletDataAll","getWalletDataAll","bind","updatedWalletDataAll","fetcher","error","emit","key","has","get","result","tokens","spender","Promise","all","map","allowance","balanceOf","getNativeBalance","price","set","createMemoizedFetcher","_fetchUpdateData","a","b","hasNumberArrChange","hasNumberChange","logger","multicall2","MulticallReader","callsMap","collateralToken","isSettlementToken","collateralTokenAddress","collateralTokenContract","calls","contractName","ContractName","SETTLEMENT_TOKEN","funcName","funcParams","COLLATERAL_TOKENS","priceDecimalsCall","undefined","CHAINLINK_PRICE_FEED","priceCall","data","execute","Object","values","flat","walletDataAll","entries","collateralAddress","dataChunk","splice","length","decimals","bigNumber2BigAndScaleDown","balance","priceDecimals","toNumber","decimalsCall","balanceCall","symbolCall","nameCall","configCall","collateralManager","COLLATERAL_MANAGER","walletDataAllCollateralInfo","depositedAmount","symbol","name","config","weight","collateralRatio","scaleDownDecimals","Big","RATIO_DECIMAL","depositCap"],"mappings":"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"}