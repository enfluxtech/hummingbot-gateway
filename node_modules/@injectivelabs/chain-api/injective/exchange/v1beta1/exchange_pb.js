// source: injective/exchange/v1beta1/exchange.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var injective_oracle_v1beta1_oracle_pb = require('../../../injective/oracle/v1beta1/oracle_pb.js');
goog.object.extend(proto, injective_oracle_v1beta1_oracle_pb);
goog.exportSymbol('proto.injective.exchange.v1beta1.AccountRewards', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.AtomicMarketOrderAccessLevel', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.BinaryOptionsMarket', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.CampaignRewardPool', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.Deposit', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DepositUpdate', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DerivativeLimitOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DerivativeMarket', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DerivativeMarketOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DerivativeOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.DerivativeTradeLog', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.ExecutionType', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.FeeDiscountSchedule', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.FeeDiscountTierInfo', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.FeeDiscountTierTTL', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.Level', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.MarketFeeMultiplier', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.MarketOrderIndicator', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.MarketStatus', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.NextFundingTimestamp', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.OrderInfo', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.OrderMask', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.OrderType', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.Params', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.PerpetualMarketFunding', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.PerpetualMarketInfo', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.PointsMultiplier', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.Position', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.PositionDelta', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SpotLimitOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SpotMarket', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SpotMarketOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SpotOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountDeposit', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountIDs', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountOrder', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountOrderData', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountPosition', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.SubaccountTradeNonce', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.TradeLog', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.TradeRecord', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.TradeRecords', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo', null, global);
goog.exportSymbol('proto.injective.exchange.v1beta1.TradingRewardCampaignInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.Params.displayName = 'proto.injective.exchange.v1beta1.Params';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.MarketFeeMultiplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.MarketFeeMultiplier.displayName = 'proto.injective.exchange.v1beta1.MarketFeeMultiplier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DerivativeMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DerivativeMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DerivativeMarket.displayName = 'proto.injective.exchange.v1beta1.DerivativeMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.BinaryOptionsMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.BinaryOptionsMarket.displayName = 'proto.injective.exchange.v1beta1.BinaryOptionsMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.displayName = 'proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.PerpetualMarketInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.PerpetualMarketInfo.displayName = 'proto.injective.exchange.v1beta1.PerpetualMarketInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.PerpetualMarketFunding, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.PerpetualMarketFunding.displayName = 'proto.injective.exchange.v1beta1.PerpetualMarketFunding';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.displayName = 'proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.NextFundingTimestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.NextFundingTimestamp.displayName = 'proto.injective.exchange.v1beta1.NextFundingTimestamp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SpotMarket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SpotMarket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SpotMarket.displayName = 'proto.injective.exchange.v1beta1.SpotMarket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.Deposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.Deposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.Deposit.displayName = 'proto.injective.exchange.v1beta1.Deposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountTradeNonce, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountTradeNonce.displayName = 'proto.injective.exchange.v1beta1.SubaccountTradeNonce';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.OrderInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.OrderInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.OrderInfo.displayName = 'proto.injective.exchange.v1beta1.OrderInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SpotOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SpotOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SpotOrder.displayName = 'proto.injective.exchange.v1beta1.SpotOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SpotLimitOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SpotLimitOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SpotLimitOrder.displayName = 'proto.injective.exchange.v1beta1.SpotLimitOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SpotMarketOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SpotMarketOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SpotMarketOrder.displayName = 'proto.injective.exchange.v1beta1.SpotMarketOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DerivativeOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DerivativeOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DerivativeOrder.displayName = 'proto.injective.exchange.v1beta1.DerivativeOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.displayName = 'proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountOrder.displayName = 'proto.injective.exchange.v1beta1.SubaccountOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountOrderData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountOrderData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountOrderData.displayName = 'proto.injective.exchange.v1beta1.SubaccountOrderData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DerivativeLimitOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DerivativeLimitOrder.displayName = 'proto.injective.exchange.v1beta1.DerivativeLimitOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DerivativeMarketOrder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DerivativeMarketOrder.displayName = 'proto.injective.exchange.v1beta1.DerivativeMarketOrder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.Position.displayName = 'proto.injective.exchange.v1beta1.Position';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.MarketOrderIndicator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.MarketOrderIndicator.displayName = 'proto.injective.exchange.v1beta1.MarketOrderIndicator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.TradeLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.TradeLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.TradeLog.displayName = 'proto.injective.exchange.v1beta1.TradeLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.PositionDelta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.PositionDelta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.PositionDelta.displayName = 'proto.injective.exchange.v1beta1.PositionDelta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DerivativeTradeLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DerivativeTradeLog.displayName = 'proto.injective.exchange.v1beta1.DerivativeTradeLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountPosition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountPosition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountPosition.displayName = 'proto.injective.exchange.v1beta1.SubaccountPosition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountDeposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountDeposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountDeposit.displayName = 'proto.injective.exchange.v1beta1.SubaccountDeposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.DepositUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.DepositUpdate.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.DepositUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.DepositUpdate.displayName = 'proto.injective.exchange.v1beta1.DepositUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.PointsMultiplier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.PointsMultiplier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.PointsMultiplier.displayName = 'proto.injective.exchange.v1beta1.PointsMultiplier';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.displayName = 'proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.CampaignRewardPool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.CampaignRewardPool.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.CampaignRewardPool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.CampaignRewardPool.displayName = 'proto.injective.exchange.v1beta1.CampaignRewardPool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.TradingRewardCampaignInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.displayName = 'proto.injective.exchange.v1beta1.TradingRewardCampaignInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.FeeDiscountTierInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.FeeDiscountTierInfo.displayName = 'proto.injective.exchange.v1beta1.FeeDiscountTierInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.FeeDiscountSchedule.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.FeeDiscountSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.FeeDiscountSchedule.displayName = 'proto.injective.exchange.v1beta1.FeeDiscountSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.FeeDiscountTierTTL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.FeeDiscountTierTTL.displayName = 'proto.injective.exchange.v1beta1.FeeDiscountTierTTL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.AccountRewards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.AccountRewards.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.AccountRewards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.AccountRewards.displayName = 'proto.injective.exchange.v1beta1.AccountRewards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.TradeRecords = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.TradeRecords.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.TradeRecords, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.TradeRecords.displayName = 'proto.injective.exchange.v1beta1.TradeRecords';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.SubaccountIDs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.exchange.v1beta1.SubaccountIDs.repeatedFields_, null);
};
goog.inherits(proto.injective.exchange.v1beta1.SubaccountIDs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.SubaccountIDs.displayName = 'proto.injective.exchange.v1beta1.SubaccountIDs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.TradeRecord = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.TradeRecord, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.TradeRecord.displayName = 'proto.injective.exchange.v1beta1.TradeRecord';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.exchange.v1beta1.Level = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.exchange.v1beta1.Level, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.exchange.v1beta1.Level.displayName = 'proto.injective.exchange.v1beta1.Level';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    spotMarketInstantListingFee: (f = msg.getSpotMarketInstantListingFee()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    derivativeMarketInstantListingFee: (f = msg.getDerivativeMarketInstantListingFee()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    defaultSpotMakerFeeRate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    defaultSpotTakerFeeRate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    defaultDerivativeMakerFeeRate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    defaultDerivativeTakerFeeRate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    defaultInitialMarginRatio: jspb.Message.getFieldWithDefault(msg, 7, ""),
    defaultMaintenanceMarginRatio: jspb.Message.getFieldWithDefault(msg, 8, ""),
    defaultFundingInterval: jspb.Message.getFieldWithDefault(msg, 9, 0),
    fundingMultiple: jspb.Message.getFieldWithDefault(msg, 10, 0),
    relayerFeeShareRate: jspb.Message.getFieldWithDefault(msg, 11, ""),
    defaultHourlyFundingRateCap: jspb.Message.getFieldWithDefault(msg, 12, ""),
    defaultHourlyInterestRate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    maxDerivativeOrderSideCount: jspb.Message.getFieldWithDefault(msg, 14, 0),
    injRewardStakedRequirementThreshold: jspb.Message.getFieldWithDefault(msg, 15, ""),
    tradingRewardsVestingDuration: jspb.Message.getFieldWithDefault(msg, 16, 0),
    liquidatorRewardShareRate: jspb.Message.getFieldWithDefault(msg, 17, ""),
    binaryOptionsMarketInstantListingFee: (f = msg.getBinaryOptionsMarketInstantListingFee()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    atomicMarketOrderAccessLevel: jspb.Message.getFieldWithDefault(msg, 19, 0),
    spotAtomicMarketOrderFeeMultiplier: jspb.Message.getFieldWithDefault(msg, 20, ""),
    derivativeAtomicMarketOrderFeeMultiplier: jspb.Message.getFieldWithDefault(msg, 21, ""),
    binaryOptionsAtomicMarketOrderFeeMultiplier: jspb.Message.getFieldWithDefault(msg, 22, ""),
    minimalProtocolFeeRate: jspb.Message.getFieldWithDefault(msg, 23, ""),
    isInstantDerivativeMarketLaunchEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 24, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.Params}
 */
proto.injective.exchange.v1beta1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.Params;
  return proto.injective.exchange.v1beta1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.Params}
 */
proto.injective.exchange.v1beta1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setSpotMarketInstantListingFee(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setDerivativeMarketInstantListingFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultSpotMakerFeeRate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultSpotTakerFeeRate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultDerivativeMakerFeeRate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultDerivativeTakerFeeRate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultInitialMarginRatio(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultMaintenanceMarginRatio(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDefaultFundingInterval(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundingMultiple(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerFeeShareRate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultHourlyFundingRateCap(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultHourlyInterestRate(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxDerivativeOrderSideCount(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setInjRewardStakedRequirementThreshold(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTradingRewardsVestingDuration(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setLiquidatorRewardShareRate(value);
      break;
    case 18:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setBinaryOptionsMarketInstantListingFee(value);
      break;
    case 19:
      var value = /** @type {!proto.injective.exchange.v1beta1.AtomicMarketOrderAccessLevel} */ (reader.readEnum());
      msg.setAtomicMarketOrderAccessLevel(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpotAtomicMarketOrderFeeMultiplier(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setDerivativeAtomicMarketOrderFeeMultiplier(value);
      break;
    case 22:
      var value = /** @type {string} */ (reader.readString());
      msg.setBinaryOptionsAtomicMarketOrderFeeMultiplier(value);
      break;
    case 23:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinimalProtocolFeeRate(value);
      break;
    case 24:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsInstantDerivativeMarketLaunchEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpotMarketInstantListingFee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getDerivativeMarketInstantListingFee();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getDefaultSpotMakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDefaultSpotTakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDefaultDerivativeMakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefaultDerivativeTakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDefaultInitialMarginRatio();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getDefaultMaintenanceMarginRatio();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getDefaultFundingInterval();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getFundingMultiple();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getRelayerFeeShareRate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getDefaultHourlyFundingRateCap();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDefaultHourlyInterestRate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getMaxDerivativeOrderSideCount();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getInjRewardStakedRequirementThreshold();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getTradingRewardsVestingDuration();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getLiquidatorRewardShareRate();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getBinaryOptionsMarketInstantListingFee();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getAtomicMarketOrderAccessLevel();
  if (f !== 0.0) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = message.getSpotAtomicMarketOrderFeeMultiplier();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getDerivativeAtomicMarketOrderFeeMultiplier();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getBinaryOptionsAtomicMarketOrderFeeMultiplier();
  if (f.length > 0) {
    writer.writeString(
      22,
      f
    );
  }
  f = message.getMinimalProtocolFeeRate();
  if (f.length > 0) {
    writer.writeString(
      23,
      f
    );
  }
  f = message.getIsInstantDerivativeMarketLaunchEnabled();
  if (f) {
    writer.writeBool(
      24,
      f
    );
  }
};


/**
 * optional cosmos.base.v1beta1.Coin spot_market_instant_listing_fee = 1;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.exchange.v1beta1.Params.prototype.getSpotMarketInstantListingFee = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
*/
proto.injective.exchange.v1beta1.Params.prototype.setSpotMarketInstantListingFee = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.clearSpotMarketInstantListingFee = function() {
  return this.setSpotMarketInstantListingFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.Params.prototype.hasSpotMarketInstantListingFee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional cosmos.base.v1beta1.Coin derivative_market_instant_listing_fee = 2;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDerivativeMarketInstantListingFee = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
*/
proto.injective.exchange.v1beta1.Params.prototype.setDerivativeMarketInstantListingFee = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.clearDerivativeMarketInstantListingFee = function() {
  return this.setDerivativeMarketInstantListingFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.Params.prototype.hasDerivativeMarketInstantListingFee = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string default_spot_maker_fee_rate = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultSpotMakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultSpotMakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string default_spot_taker_fee_rate = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultSpotTakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultSpotTakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string default_derivative_maker_fee_rate = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultDerivativeMakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultDerivativeMakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string default_derivative_taker_fee_rate = 6;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultDerivativeTakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultDerivativeTakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string default_initial_margin_ratio = 7;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultInitialMarginRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultInitialMarginRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string default_maintenance_margin_ratio = 8;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultMaintenanceMarginRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultMaintenanceMarginRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 default_funding_interval = 9;
 * @return {number}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultFundingInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultFundingInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 funding_multiple = 10;
 * @return {number}
 */
proto.injective.exchange.v1beta1.Params.prototype.getFundingMultiple = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setFundingMultiple = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string relayer_fee_share_rate = 11;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getRelayerFeeShareRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setRelayerFeeShareRate = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string default_hourly_funding_rate_cap = 12;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultHourlyFundingRateCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultHourlyFundingRateCap = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string default_hourly_interest_rate = 13;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDefaultHourlyInterestRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDefaultHourlyInterestRate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional uint32 max_derivative_order_side_count = 14;
 * @return {number}
 */
proto.injective.exchange.v1beta1.Params.prototype.getMaxDerivativeOrderSideCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setMaxDerivativeOrderSideCount = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional string inj_reward_staked_requirement_threshold = 15;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getInjRewardStakedRequirementThreshold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setInjRewardStakedRequirementThreshold = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional int64 trading_rewards_vesting_duration = 16;
 * @return {number}
 */
proto.injective.exchange.v1beta1.Params.prototype.getTradingRewardsVestingDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setTradingRewardsVestingDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional string liquidator_reward_share_rate = 17;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getLiquidatorRewardShareRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setLiquidatorRewardShareRate = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional cosmos.base.v1beta1.Coin binary_options_market_instant_listing_fee = 18;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.exchange.v1beta1.Params.prototype.getBinaryOptionsMarketInstantListingFee = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 18));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
*/
proto.injective.exchange.v1beta1.Params.prototype.setBinaryOptionsMarketInstantListingFee = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.clearBinaryOptionsMarketInstantListingFee = function() {
  return this.setBinaryOptionsMarketInstantListingFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.Params.prototype.hasBinaryOptionsMarketInstantListingFee = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional AtomicMarketOrderAccessLevel atomic_market_order_access_level = 19;
 * @return {!proto.injective.exchange.v1beta1.AtomicMarketOrderAccessLevel}
 */
proto.injective.exchange.v1beta1.Params.prototype.getAtomicMarketOrderAccessLevel = function() {
  return /** @type {!proto.injective.exchange.v1beta1.AtomicMarketOrderAccessLevel} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.AtomicMarketOrderAccessLevel} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setAtomicMarketOrderAccessLevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 19, value);
};


/**
 * optional string spot_atomic_market_order_fee_multiplier = 20;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getSpotAtomicMarketOrderFeeMultiplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setSpotAtomicMarketOrderFeeMultiplier = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string derivative_atomic_market_order_fee_multiplier = 21;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getDerivativeAtomicMarketOrderFeeMultiplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setDerivativeAtomicMarketOrderFeeMultiplier = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional string binary_options_atomic_market_order_fee_multiplier = 22;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getBinaryOptionsAtomicMarketOrderFeeMultiplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setBinaryOptionsAtomicMarketOrderFeeMultiplier = function(value) {
  return jspb.Message.setProto3StringField(this, 22, value);
};


/**
 * optional string minimal_protocol_fee_rate = 23;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Params.prototype.getMinimalProtocolFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 23, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setMinimalProtocolFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 23, value);
};


/**
 * optional bool is_instant_derivative_market_launch_enabled = 24;
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.Params.prototype.getIsInstantDerivativeMarketLaunchEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 24, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.exchange.v1beta1.Params} returns this
 */
proto.injective.exchange.v1beta1.Params.prototype.setIsInstantDerivativeMarketLaunchEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 24, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.MarketFeeMultiplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.MarketFeeMultiplier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    feeMultiplier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.MarketFeeMultiplier}
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.MarketFeeMultiplier;
  return proto.injective.exchange.v1beta1.MarketFeeMultiplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.MarketFeeMultiplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.MarketFeeMultiplier}
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.MarketFeeMultiplier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.MarketFeeMultiplier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeeMultiplier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.MarketFeeMultiplier} returns this
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fee_multiplier = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.prototype.getFeeMultiplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.MarketFeeMultiplier} returns this
 */
proto.injective.exchange.v1beta1.MarketFeeMultiplier.prototype.setFeeMultiplier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DerivativeMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oracleBase: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oracleQuote: jspb.Message.getFieldWithDefault(msg, 3, ""),
    oracleType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oracleScaleFactor: jspb.Message.getFieldWithDefault(msg, 5, 0),
    quoteDenom: jspb.Message.getFieldWithDefault(msg, 6, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    initialMarginRatio: jspb.Message.getFieldWithDefault(msg, 8, ""),
    maintenanceMarginRatio: jspb.Message.getFieldWithDefault(msg, 9, ""),
    makerFeeRate: jspb.Message.getFieldWithDefault(msg, 10, ""),
    takerFeeRate: jspb.Message.getFieldWithDefault(msg, 11, ""),
    relayerFeeShareRate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    isperpetual: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    status: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minPriceTickSize: jspb.Message.getFieldWithDefault(msg, 15, ""),
    minQuantityTickSize: jspb.Message.getFieldWithDefault(msg, 16, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DerivativeMarket;
  return proto.injective.exchange.v1beta1.DerivativeMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleBase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleQuote(value);
      break;
    case 4:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracleType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleScaleFactor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteDenom(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialMarginRatio(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaintenanceMarginRatio(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerFeeRate(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerFeeRate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerFeeShareRate(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsperpetual(value);
      break;
    case 14:
      var value = /** @type {!proto.injective.exchange.v1beta1.MarketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPriceTickSize(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinQuantityTickSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DerivativeMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOracleBase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOracleQuote();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOracleType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOracleScaleFactor();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getQuoteDenom();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInitialMarginRatio();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getMaintenanceMarginRatio();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRelayerFeeShareRate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getIsperpetual();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getMinPriceTickSize();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMinQuantityTickSize();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string oracle_base = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getOracleBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setOracleBase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oracle_quote = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getOracleQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setOracleQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional injective.oracle.v1beta1.OracleType oracle_type = 4;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getOracleType = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setOracleType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 oracle_scale_factor = 5;
 * @return {number}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getOracleScaleFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setOracleScaleFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string quote_denom = 6;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getQuoteDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setQuoteDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string market_id = 7;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string initial_margin_ratio = 8;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getInitialMarginRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setInitialMarginRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string maintenance_margin_ratio = 9;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getMaintenanceMarginRatio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setMaintenanceMarginRatio = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string maker_fee_rate = 10;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getMakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setMakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string taker_fee_rate = 11;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getTakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setTakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string relayer_fee_share_rate = 12;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getRelayerFeeShareRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setRelayerFeeShareRate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bool isPerpetual = 13;
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getIsperpetual = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setIsperpetual = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional MarketStatus status = 14;
 * @return {!proto.injective.exchange.v1beta1.MarketStatus}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getStatus = function() {
  return /** @type {!proto.injective.exchange.v1beta1.MarketStatus} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.MarketStatus} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional string min_price_tick_size = 15;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getMinPriceTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setMinPriceTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string min_quantity_tick_size = 16;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.getMinQuantityTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarket} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarket.prototype.setMinQuantityTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.BinaryOptionsMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    oracleSymbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    oracleProvider: jspb.Message.getFieldWithDefault(msg, 3, ""),
    oracleType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oracleScaleFactor: jspb.Message.getFieldWithDefault(msg, 5, 0),
    expirationTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    settlementTimestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    admin: jspb.Message.getFieldWithDefault(msg, 8, ""),
    quoteDenom: jspb.Message.getFieldWithDefault(msg, 9, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    makerFeeRate: jspb.Message.getFieldWithDefault(msg, 11, ""),
    takerFeeRate: jspb.Message.getFieldWithDefault(msg, 12, ""),
    relayerFeeShareRate: jspb.Message.getFieldWithDefault(msg, 13, ""),
    status: jspb.Message.getFieldWithDefault(msg, 14, 0),
    minPriceTickSize: jspb.Message.getFieldWithDefault(msg, 15, ""),
    minQuantityTickSize: jspb.Message.getFieldWithDefault(msg, 16, ""),
    settlementPrice: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.BinaryOptionsMarket;
  return proto.injective.exchange.v1beta1.BinaryOptionsMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOracleProvider(value);
      break;
    case 4:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracleType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOracleScaleFactor(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirationTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSettlementTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdmin(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteDenom(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerFeeRate(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerFeeRate(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerFeeShareRate(value);
      break;
    case 14:
      var value = /** @type {!proto.injective.exchange.v1beta1.MarketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPriceTickSize(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinQuantityTickSize(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.BinaryOptionsMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOracleSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOracleProvider();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOracleType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getOracleScaleFactor();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getExpirationTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSettlementTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getAdmin();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getQuoteDenom();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRelayerFeeShareRate();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getMinPriceTickSize();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getMinQuantityTickSize();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getSettlementPrice();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string oracle_symbol = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getOracleSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setOracleSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string oracle_provider = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getOracleProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setOracleProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional injective.oracle.v1beta1.OracleType oracle_type = 4;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getOracleType = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setOracleType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint32 oracle_scale_factor = 5;
 * @return {number}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getOracleScaleFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setOracleScaleFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 expiration_timestamp = 6;
 * @return {number}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getExpirationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setExpirationTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 settlement_timestamp = 7;
 * @return {number}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getSettlementTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setSettlementTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string admin = 8;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getAdmin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setAdmin = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string quote_denom = 9;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getQuoteDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setQuoteDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string market_id = 10;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string maker_fee_rate = 11;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getMakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setMakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string taker_fee_rate = 12;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getTakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setTakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string relayer_fee_share_rate = 13;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getRelayerFeeShareRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setRelayerFeeShareRate = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional MarketStatus status = 14;
 * @return {!proto.injective.exchange.v1beta1.MarketStatus}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getStatus = function() {
  return /** @type {!proto.injective.exchange.v1beta1.MarketStatus} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.MarketStatus} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional string min_price_tick_size = 15;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getMinPriceTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setMinPriceTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string min_quantity_tick_size = 16;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getMinQuantityTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setMinQuantityTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string settlement_price = 17;
 * @return {string}
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.getSettlementPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.BinaryOptionsMarket} returns this
 */
proto.injective.exchange.v1beta1.BinaryOptionsMarket.prototype.setSettlementPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expirationTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    twapStartTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    expirationTwapStartPriceCumulative: jspb.Message.getFieldWithDefault(msg, 4, ""),
    settlementPrice: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo;
  return proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirationTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTwapStartTimestamp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpirationTwapStartPriceCumulative(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpirationTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTwapStartTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getExpirationTwapStartPriceCumulative();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSettlementPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 expiration_timestamp = 2;
 * @return {number}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.getExpirationTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.setExpirationTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 twap_start_timestamp = 3;
 * @return {number}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.getTwapStartTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.setTwapStartTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string expiration_twap_start_price_cumulative = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.getExpirationTwapStartPriceCumulative = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.setExpirationTwapStartPriceCumulative = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string settlement_price = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.getSettlementPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.ExpiryFuturesMarketInfo.prototype.setSettlementPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.PerpetualMarketInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hourlyFundingRateCap: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hourlyInterestRate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nextFundingTimestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fundingInterval: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.PerpetualMarketInfo;
  return proto.injective.exchange.v1beta1.PerpetualMarketInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyFundingRateCap(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHourlyInterestRate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextFundingTimestamp(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFundingInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.PerpetualMarketInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHourlyFundingRateCap();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHourlyInterestRate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNextFundingTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFundingInterval();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string hourly_funding_rate_cap = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.getHourlyFundingRateCap = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.setHourlyFundingRateCap = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hourly_interest_rate = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.getHourlyInterestRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.setHourlyInterestRate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 next_funding_timestamp = 4;
 * @return {number}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.getNextFundingTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.setNextFundingTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 funding_interval = 5;
 * @return {number}
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.getFundingInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketInfo} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketInfo.prototype.setFundingInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.PerpetualMarketFunding.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.PerpetualMarketFunding} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.toObject = function(includeInstance, msg) {
  var f, obj = {
    cumulativeFunding: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cumulativePrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastTimestamp: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketFunding}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.PerpetualMarketFunding;
  return proto.injective.exchange.v1beta1.PerpetualMarketFunding.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.PerpetualMarketFunding} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketFunding}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativeFunding(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativePrice(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.PerpetualMarketFunding.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.PerpetualMarketFunding} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCumulativeFunding();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCumulativePrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string cumulative_funding = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.getCumulativeFunding = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketFunding} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.setCumulativeFunding = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cumulative_price = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.getCumulativePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketFunding} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.setCumulativePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 last_timestamp = 3;
 * @return {number}
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.getLastTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.PerpetualMarketFunding} returns this
 */
proto.injective.exchange.v1beta1.PerpetualMarketFunding.prototype.setLastTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    settlementPrice: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo}
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo;
  return proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo}
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettlementPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSettlementPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string settlement_price = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.prototype.getSettlementPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketSettlementInfo.prototype.setSettlementPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.NextFundingTimestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.NextFundingTimestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    nextTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.NextFundingTimestamp}
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.NextFundingTimestamp;
  return proto.injective.exchange.v1beta1.NextFundingTimestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.NextFundingTimestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.NextFundingTimestamp}
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.NextFundingTimestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.NextFundingTimestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNextTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 next_timestamp = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.prototype.getNextTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.NextFundingTimestamp} returns this
 */
proto.injective.exchange.v1beta1.NextFundingTimestamp.prototype.setNextTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SpotMarket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SpotMarket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotMarket.toObject = function(includeInstance, msg) {
  var f, obj = {
    ticker: jspb.Message.getFieldWithDefault(msg, 1, ""),
    baseDenom: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quoteDenom: jspb.Message.getFieldWithDefault(msg, 3, ""),
    makerFeeRate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    takerFeeRate: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerFeeShareRate: jspb.Message.getFieldWithDefault(msg, 6, ""),
    marketId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    minPriceTickSize: jspb.Message.getFieldWithDefault(msg, 9, ""),
    minQuantityTickSize: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SpotMarket}
 */
proto.injective.exchange.v1beta1.SpotMarket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SpotMarket;
  return proto.injective.exchange.v1beta1.SpotMarket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SpotMarket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SpotMarket}
 */
proto.injective.exchange.v1beta1.SpotMarket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTicker(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseDenom(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerFeeRate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerFeeRate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerFeeShareRate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 8:
      var value = /** @type {!proto.injective.exchange.v1beta1.MarketStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinPriceTickSize(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinQuantityTickSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SpotMarket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SpotMarket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotMarket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTicker();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBaseDenom();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuoteDenom();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTakerFeeRate();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerFeeShareRate();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getMinPriceTickSize();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMinQuantityTickSize();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string ticker = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getTicker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setTicker = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string base_denom = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getBaseDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setBaseDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quote_denom = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getQuoteDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setQuoteDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string maker_fee_rate = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getMakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setMakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string taker_fee_rate = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getTakerFeeRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setTakerFeeRate = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayer_fee_share_rate = 6;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getRelayerFeeShareRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setRelayerFeeShareRate = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string market_id = 7;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional MarketStatus status = 8;
 * @return {!proto.injective.exchange.v1beta1.MarketStatus}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getStatus = function() {
  return /** @type {!proto.injective.exchange.v1beta1.MarketStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.MarketStatus} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string min_price_tick_size = 9;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getMinPriceTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setMinPriceTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string min_quantity_tick_size = 10;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.getMinQuantityTickSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarket} returns this
 */
proto.injective.exchange.v1beta1.SpotMarket.prototype.setMinQuantityTickSize = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.Deposit.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.Deposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.Deposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Deposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    availableBalance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    totalBalance: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.Deposit}
 */
proto.injective.exchange.v1beta1.Deposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.Deposit;
  return proto.injective.exchange.v1beta1.Deposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.Deposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.Deposit}
 */
proto.injective.exchange.v1beta1.Deposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvailableBalance(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.Deposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.Deposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.Deposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Deposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAvailableBalance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotalBalance();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string available_balance = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Deposit.prototype.getAvailableBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Deposit} returns this
 */
proto.injective.exchange.v1beta1.Deposit.prototype.setAvailableBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string total_balance = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Deposit.prototype.getTotalBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Deposit} returns this
 */
proto.injective.exchange.v1beta1.Deposit.prototype.setTotalBalance = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountTradeNonce.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountTradeNonce} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountTradeNonce}
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountTradeNonce;
  return proto.injective.exchange.v1beta1.SubaccountTradeNonce.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountTradeNonce} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountTradeNonce}
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountTradeNonce.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountTradeNonce} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 nonce = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountTradeNonce} returns this
 */
proto.injective.exchange.v1beta1.SubaccountTradeNonce.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.OrderInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.OrderInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.OrderInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    feeRecipient: jspb.Message.getFieldWithDefault(msg, 2, ""),
    price: jspb.Message.getFieldWithDefault(msg, 3, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.OrderInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.OrderInfo;
  return proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.OrderInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeeRecipient(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.OrderInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeeRecipient();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string subaccount_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.getSubaccountId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.OrderInfo} returns this
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fee_recipient = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.getFeeRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.OrderInfo} returns this
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.setFeeRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string price = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.OrderInfo} returns this
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string quantity = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.OrderInfo} returns this
 */
proto.injective.exchange.v1beta1.OrderInfo.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SpotOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SpotOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderInfo: (f = msg.getOrderInfo()) && proto.injective.exchange.v1beta1.OrderInfo.toObject(includeInstance, f),
    orderType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SpotOrder}
 */
proto.injective.exchange.v1beta1.SpotOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SpotOrder;
  return proto.injective.exchange.v1beta1.SpotOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SpotOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SpotOrder}
 */
proto.injective.exchange.v1beta1.SpotOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.OrderInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader);
      msg.setOrderInfo(value);
      break;
    case 3:
      var value = /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SpotOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SpotOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OrderInfo order_info = 2;
 * @return {?proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.getOrderInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.OrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.OrderInfo, 2));
};


/**
 * @param {?proto.injective.exchange.v1beta1.OrderInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.SpotOrder} returns this
*/
proto.injective.exchange.v1beta1.SpotOrder.prototype.setOrderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.SpotOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.clearOrderInfo = function() {
  return this.setOrderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.hasOrderInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OrderType order_type = 3;
 * @return {!proto.injective.exchange.v1beta1.OrderType}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.getOrderType = function() {
  return /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.OrderType} value
 * @return {!proto.injective.exchange.v1beta1.SpotOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string trigger_price = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SpotLimitOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SpotLimitOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderInfo: (f = msg.getOrderInfo()) && proto.injective.exchange.v1beta1.OrderInfo.toObject(includeInstance, f),
    orderType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    fillable: jspb.Message.getFieldWithDefault(msg, 3, ""),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderHash: msg.getOrderHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SpotLimitOrder;
  return proto.injective.exchange.v1beta1.SpotLimitOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SpotLimitOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.exchange.v1beta1.OrderInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader);
      msg.setOrderInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFillable(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SpotLimitOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SpotLimitOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFillable();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional OrderInfo order_info = 1;
 * @return {?proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getOrderInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.OrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.OrderInfo, 1));
};


/**
 * @param {?proto.injective.exchange.v1beta1.OrderInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder} returns this
*/
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.setOrderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.clearOrderInfo = function() {
  return this.setOrderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.hasOrderInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OrderType order_type = 2;
 * @return {!proto.injective.exchange.v1beta1.OrderType}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getOrderType = function() {
  return /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.OrderType} value
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string fillable = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getFillable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.setFillable = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string trigger_price = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes order_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes order_hash = 5;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.SpotLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotLimitOrder.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SpotMarketOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SpotMarketOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderInfo: (f = msg.getOrderInfo()) && proto.injective.exchange.v1beta1.OrderInfo.toObject(includeInstance, f),
    balanceHold: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orderHash: msg.getOrderHash_asB64(),
    orderType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SpotMarketOrder;
  return proto.injective.exchange.v1beta1.SpotMarketOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SpotMarketOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.exchange.v1beta1.OrderInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader);
      msg.setOrderInfo(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBalanceHold(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    case 4:
      var value = /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SpotMarketOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SpotMarketOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getBalanceHold();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional OrderInfo order_info = 1;
 * @return {?proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getOrderInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.OrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.OrderInfo, 1));
};


/**
 * @param {?proto.injective.exchange.v1beta1.OrderInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder} returns this
*/
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.setOrderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.clearOrderInfo = function() {
  return this.setOrderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.hasOrderInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string balance_hold = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getBalanceHold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.setBalanceHold = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes order_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes order_hash = 3;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional OrderType order_type = 4;
 * @return {!proto.injective.exchange.v1beta1.OrderType}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getOrderType = function() {
  return /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.OrderType} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string trigger_price = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SpotMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.SpotMarketOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DerivativeOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DerivativeOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orderInfo: (f = msg.getOrderInfo()) && proto.injective.exchange.v1beta1.OrderInfo.toObject(includeInstance, f),
    orderType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    margin: jspb.Message.getFieldWithDefault(msg, 4, ""),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DerivativeOrder;
  return proto.injective.exchange.v1beta1.DerivativeOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DerivativeOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.OrderInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader);
      msg.setOrderInfo(value);
      break;
    case 3:
      var value = /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DerivativeOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DerivativeOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrderInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OrderInfo order_info = 2;
 * @return {?proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.getOrderInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.OrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.OrderInfo, 2));
};


/**
 * @param {?proto.injective.exchange.v1beta1.OrderInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder} returns this
*/
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.setOrderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.clearOrderInfo = function() {
  return this.setOrderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.hasOrderInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OrderType order_type = 3;
 * @return {!proto.injective.exchange.v1beta1.OrderType}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.getOrderType = function() {
  return /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.OrderType} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string margin = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string trigger_price = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    vanillaLimitOrderCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    reduceOnlyLimitOrderCount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    aggregateReduceOnlyQuantity: jspb.Message.getFieldWithDefault(msg, 3, ""),
    aggregateVanillaQuantity: jspb.Message.getFieldWithDefault(msg, 4, ""),
    vanillaConditionalOrderCount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    reduceOnlyConditionalOrderCount: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata;
  return proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVanillaLimitOrderCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReduceOnlyLimitOrderCount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregateReduceOnlyQuantity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAggregateVanillaQuantity(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVanillaConditionalOrderCount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReduceOnlyConditionalOrderCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVanillaLimitOrderCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getReduceOnlyLimitOrderCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAggregateReduceOnlyQuantity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAggregateVanillaQuantity();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVanillaConditionalOrderCount();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getReduceOnlyConditionalOrderCount();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 vanilla_limit_order_count = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.getVanillaLimitOrderCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.setVanillaLimitOrderCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 reduce_only_limit_order_count = 2;
 * @return {number}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.getReduceOnlyLimitOrderCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.setReduceOnlyLimitOrderCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string aggregate_reduce_only_quantity = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.getAggregateReduceOnlyQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.setAggregateReduceOnlyQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string aggregate_vanilla_quantity = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.getAggregateVanillaQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.setAggregateVanillaQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 vanilla_conditional_order_count = 5;
 * @return {number}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.getVanillaConditionalOrderCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.setVanillaConditionalOrderCount = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 reduce_only_conditional_order_count = 6;
 * @return {number}
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.getReduceOnlyConditionalOrderCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderbookMetadata.prototype.setReduceOnlyConditionalOrderCount = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    isreduceonly: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrder}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountOrder;
  return proto.injective.exchange.v1beta1.SubaccountOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrder}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsreduceonly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIsreduceonly();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string price = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrder} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string quantity = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrder} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool isReduceOnly = 3;
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.getIsreduceonly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrder} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrder.prototype.setIsreduceonly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountOrderData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrderData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.toObject = function(includeInstance, msg) {
  var f, obj = {
    order: (f = msg.getOrder()) && proto.injective.exchange.v1beta1.SubaccountOrder.toObject(includeInstance, f),
    orderHash: msg.getOrderHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderData}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountOrderData;
  return proto.injective.exchange.v1beta1.SubaccountOrderData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrderData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderData}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.exchange.v1beta1.SubaccountOrder;
      reader.readMessage(value,proto.injective.exchange.v1beta1.SubaccountOrder.deserializeBinaryFromReader);
      msg.setOrder(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountOrderData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountOrderData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrder();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.exchange.v1beta1.SubaccountOrder.serializeBinaryToWriter
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional SubaccountOrder order = 1;
 * @return {?proto.injective.exchange.v1beta1.SubaccountOrder}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.getOrder = function() {
  return /** @type{?proto.injective.exchange.v1beta1.SubaccountOrder} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.SubaccountOrder, 1));
};


/**
 * @param {?proto.injective.exchange.v1beta1.SubaccountOrder|undefined} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderData} returns this
*/
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.setOrder = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderData} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.clearOrder = function() {
  return this.setOrder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.hasOrder = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes order_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes order_hash = 2;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountOrderData} returns this
 */
proto.injective.exchange.v1beta1.SubaccountOrderData.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DerivativeLimitOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderInfo: (f = msg.getOrderInfo()) && proto.injective.exchange.v1beta1.OrderInfo.toObject(includeInstance, f),
    orderType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    margin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fillable: jspb.Message.getFieldWithDefault(msg, 4, ""),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orderHash: msg.getOrderHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DerivativeLimitOrder;
  return proto.injective.exchange.v1beta1.DerivativeLimitOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.exchange.v1beta1.OrderInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader);
      msg.setOrderInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFillable(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DerivativeLimitOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFillable();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional OrderInfo order_info = 1;
 * @return {?proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getOrderInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.OrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.OrderInfo, 1));
};


/**
 * @param {?proto.injective.exchange.v1beta1.OrderInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
*/
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.setOrderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.clearOrderInfo = function() {
  return this.setOrderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.hasOrderInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OrderType order_type = 2;
 * @return {!proto.injective.exchange.v1beta1.OrderType}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getOrderType = function() {
  return /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.OrderType} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string margin = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fillable = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getFillable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.setFillable = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string trigger_price = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes order_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes order_hash = 6;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeLimitOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeLimitOrder.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DerivativeMarketOrder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.toObject = function(includeInstance, msg) {
  var f, obj = {
    orderInfo: (f = msg.getOrderInfo()) && proto.injective.exchange.v1beta1.OrderInfo.toObject(includeInstance, f),
    orderType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    margin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    marginHold: jspb.Message.getFieldWithDefault(msg, 4, ""),
    triggerPrice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orderHash: msg.getOrderHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DerivativeMarketOrder;
  return proto.injective.exchange.v1beta1.DerivativeMarketOrder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.exchange.v1beta1.OrderInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.OrderInfo.deserializeBinaryFromReader);
      msg.setOrderInfo(value);
      break;
    case 2:
      var value = /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (reader.readEnum());
      msg.setOrderType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarginHold(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTriggerPrice(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DerivativeMarketOrder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrderInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.exchange.v1beta1.OrderInfo.serializeBinaryToWriter
    );
  }
  f = message.getOrderType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMarginHold();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTriggerPrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional OrderInfo order_info = 1;
 * @return {?proto.injective.exchange.v1beta1.OrderInfo}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getOrderInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.OrderInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.OrderInfo, 1));
};


/**
 * @param {?proto.injective.exchange.v1beta1.OrderInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
*/
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.setOrderInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.clearOrderInfo = function() {
  return this.setOrderInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.hasOrderInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OrderType order_type = 2;
 * @return {!proto.injective.exchange.v1beta1.OrderType}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getOrderType = function() {
  return /** @type {!proto.injective.exchange.v1beta1.OrderType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.injective.exchange.v1beta1.OrderType} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.setOrderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string margin = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string margin_hold = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getMarginHold = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.setMarginHold = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string trigger_price = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getTriggerPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.setTriggerPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bytes order_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes order_hash = 6;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeMarketOrder} returns this
 */
proto.injective.exchange.v1beta1.DerivativeMarketOrder.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    islong: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    entryPrice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    margin: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cumulativeFundingEntry: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.Position}
 */
proto.injective.exchange.v1beta1.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.Position;
  return proto.injective.exchange.v1beta1.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.Position}
 */
proto.injective.exchange.v1beta1.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslong(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntryPrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMargin(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativeFundingEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIslong();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEntryPrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMargin();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCumulativeFundingEntry();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bool isLong = 1;
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.Position.prototype.getIslong = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.exchange.v1beta1.Position} returns this
 */
proto.injective.exchange.v1beta1.Position.prototype.setIslong = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string quantity = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Position.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Position} returns this
 */
proto.injective.exchange.v1beta1.Position.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string entry_price = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Position.prototype.getEntryPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Position} returns this
 */
proto.injective.exchange.v1beta1.Position.prototype.setEntryPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string margin = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Position.prototype.getMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Position} returns this
 */
proto.injective.exchange.v1beta1.Position.prototype.setMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string cumulative_funding_entry = 5;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Position.prototype.getCumulativeFundingEntry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Position} returns this
 */
proto.injective.exchange.v1beta1.Position.prototype.setCumulativeFundingEntry = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.MarketOrderIndicator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.MarketOrderIndicator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    isbuy: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.MarketOrderIndicator}
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.MarketOrderIndicator;
  return proto.injective.exchange.v1beta1.MarketOrderIndicator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.MarketOrderIndicator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.MarketOrderIndicator}
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbuy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.MarketOrderIndicator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.MarketOrderIndicator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsbuy();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.MarketOrderIndicator} returns this
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isBuy = 2;
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.prototype.getIsbuy = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.exchange.v1beta1.MarketOrderIndicator} returns this
 */
proto.injective.exchange.v1beta1.MarketOrderIndicator.prototype.setIsbuy = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.TradeLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.TradeLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradeLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    quantity: jspb.Message.getFieldWithDefault(msg, 1, ""),
    price: jspb.Message.getFieldWithDefault(msg, 2, ""),
    subaccountId: msg.getSubaccountId_asB64(),
    fee: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderHash: msg.getOrderHash_asB64(),
    feeRecipientAddress: msg.getFeeRecipientAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.TradeLog}
 */
proto.injective.exchange.v1beta1.TradeLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.TradeLog;
  return proto.injective.exchange.v1beta1.TradeLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.TradeLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.TradeLog}
 */
proto.injective.exchange.v1beta1.TradeLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccountId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeeRecipientAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.TradeLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.TradeLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradeLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSubaccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getFeeRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional string quantity = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.TradeLog} returns this
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.TradeLog} returns this
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes subaccount_id = 3;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getSubaccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes subaccount_id = 3;
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getSubaccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccountId()));
};


/**
 * optional bytes subaccount_id = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getSubaccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.TradeLog} returns this
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fee = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.TradeLog} returns this
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes order_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes order_hash = 5;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.TradeLog} returns this
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes fee_recipient_address = 6;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getFeeRecipientAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes fee_recipient_address = 6;
 * This is a type-conversion wrapper around `getFeeRecipientAddress()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getFeeRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeeRecipientAddress()));
};


/**
 * optional bytes fee_recipient_address = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeeRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.getFeeRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeeRecipientAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.TradeLog} returns this
 */
proto.injective.exchange.v1beta1.TradeLog.prototype.setFeeRecipientAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.PositionDelta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.PositionDelta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PositionDelta.toObject = function(includeInstance, msg) {
  var f, obj = {
    isLong: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    executionQuantity: jspb.Message.getFieldWithDefault(msg, 2, ""),
    executionMargin: jspb.Message.getFieldWithDefault(msg, 3, ""),
    executionPrice: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.PositionDelta}
 */
proto.injective.exchange.v1beta1.PositionDelta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.PositionDelta;
  return proto.injective.exchange.v1beta1.PositionDelta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.PositionDelta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.PositionDelta}
 */
proto.injective.exchange.v1beta1.PositionDelta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLong(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionQuantity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionMargin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExecutionPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.PositionDelta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.PositionDelta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PositionDelta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsLong();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getExecutionQuantity();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExecutionMargin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getExecutionPrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool is_long = 1;
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.getIsLong = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.exchange.v1beta1.PositionDelta} returns this
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.setIsLong = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string execution_quantity = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.getExecutionQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PositionDelta} returns this
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.setExecutionQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string execution_margin = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.getExecutionMargin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PositionDelta} returns this
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.setExecutionMargin = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string execution_price = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.getExecutionPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PositionDelta} returns this
 */
proto.injective.exchange.v1beta1.PositionDelta.prototype.setExecutionPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DerivativeTradeLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DerivativeTradeLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: msg.getSubaccountId_asB64(),
    positionDelta: (f = msg.getPositionDelta()) && proto.injective.exchange.v1beta1.PositionDelta.toObject(includeInstance, f),
    payout: jspb.Message.getFieldWithDefault(msg, 3, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 4, ""),
    orderHash: msg.getOrderHash_asB64(),
    feeRecipientAddress: msg.getFeeRecipientAddress_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DerivativeTradeLog;
  return proto.injective.exchange.v1beta1.DerivativeTradeLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DerivativeTradeLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.PositionDelta;
      reader.readMessage(value,proto.injective.exchange.v1beta1.PositionDelta.deserializeBinaryFromReader);
      msg.setPositionDelta(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayout(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOrderHash(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFeeRecipientAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DerivativeTradeLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DerivativeTradeLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPositionDelta();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.PositionDelta.serializeBinaryToWriter
    );
  }
  f = message.getPayout();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getOrderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getFeeRecipientAddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes subaccount_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getSubaccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes subaccount_id = 1;
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getSubaccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccountId()));
};


/**
 * optional bytes subaccount_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getSubaccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional PositionDelta position_delta = 2;
 * @return {?proto.injective.exchange.v1beta1.PositionDelta}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getPositionDelta = function() {
  return /** @type{?proto.injective.exchange.v1beta1.PositionDelta} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.PositionDelta, 2));
};


/**
 * @param {?proto.injective.exchange.v1beta1.PositionDelta|undefined} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
*/
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.setPositionDelta = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.clearPositionDelta = function() {
  return this.setPositionDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.hasPositionDelta = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string payout = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getPayout = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.setPayout = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fee = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes order_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getOrderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes order_hash = 5;
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getOrderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOrderHash()));
};


/**
 * optional bytes order_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOrderHash()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getOrderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOrderHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.setOrderHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes fee_recipient_address = 6;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getFeeRecipientAddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes fee_recipient_address = 6;
 * This is a type-conversion wrapper around `getFeeRecipientAddress()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getFeeRecipientAddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFeeRecipientAddress()));
};


/**
 * optional bytes fee_recipient_address = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFeeRecipientAddress()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.getFeeRecipientAddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFeeRecipientAddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.DerivativeTradeLog} returns this
 */
proto.injective.exchange.v1beta1.DerivativeTradeLog.prototype.setFeeRecipientAddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountPosition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountPosition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountPosition.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: (f = msg.getPosition()) && proto.injective.exchange.v1beta1.Position.toObject(includeInstance, f),
    subaccountId: msg.getSubaccountId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountPosition}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountPosition;
  return proto.injective.exchange.v1beta1.SubaccountPosition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountPosition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountPosition}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.exchange.v1beta1.Position;
      reader.readMessage(value,proto.injective.exchange.v1beta1.Position.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccountId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountPosition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountPosition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountPosition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.exchange.v1beta1.Position.serializeBinaryToWriter
    );
  }
  f = message.getSubaccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional Position position = 1;
 * @return {?proto.injective.exchange.v1beta1.Position}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.getPosition = function() {
  return /** @type{?proto.injective.exchange.v1beta1.Position} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.Position, 1));
};


/**
 * @param {?proto.injective.exchange.v1beta1.Position|undefined} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountPosition} returns this
*/
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.setPosition = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.SubaccountPosition} returns this
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.clearPosition = function() {
  return this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes subaccount_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.getSubaccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes subaccount_id = 2;
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.getSubaccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccountId()));
};


/**
 * optional bytes subaccount_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.getSubaccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountPosition} returns this
 */
proto.injective.exchange.v1beta1.SubaccountPosition.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountDeposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountDeposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountId: msg.getSubaccountId_asB64(),
    deposit: (f = msg.getDeposit()) && proto.injective.exchange.v1beta1.Deposit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountDeposit}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountDeposit;
  return proto.injective.exchange.v1beta1.SubaccountDeposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountDeposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountDeposit}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSubaccountId(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.Deposit;
      reader.readMessage(value,proto.injective.exchange.v1beta1.Deposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountDeposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountDeposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.Deposit.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes subaccount_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.getSubaccountId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes subaccount_id = 1;
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {string}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.getSubaccountId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSubaccountId()));
};


/**
 * optional bytes subaccount_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccountId()`
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.getSubaccountId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSubaccountId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountDeposit} returns this
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.setSubaccountId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Deposit deposit = 2;
 * @return {?proto.injective.exchange.v1beta1.Deposit}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.getDeposit = function() {
  return /** @type{?proto.injective.exchange.v1beta1.Deposit} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.Deposit, 2));
};


/**
 * @param {?proto.injective.exchange.v1beta1.Deposit|undefined} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountDeposit} returns this
*/
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.setDeposit = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.SubaccountDeposit} returns this
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.SubaccountDeposit.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.DepositUpdate.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.DepositUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.DepositUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DepositUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    depositsList: jspb.Message.toObjectList(msg.getDepositsList(),
    proto.injective.exchange.v1beta1.SubaccountDeposit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.DepositUpdate}
 */
proto.injective.exchange.v1beta1.DepositUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.DepositUpdate;
  return proto.injective.exchange.v1beta1.DepositUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.DepositUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.DepositUpdate}
 */
proto.injective.exchange.v1beta1.DepositUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.SubaccountDeposit;
      reader.readMessage(value,proto.injective.exchange.v1beta1.SubaccountDeposit.deserializeBinaryFromReader);
      msg.addDeposits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.DepositUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.DepositUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.DepositUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDepositsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.SubaccountDeposit.serializeBinaryToWriter
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.DepositUpdate} returns this
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated SubaccountDeposit deposits = 2;
 * @return {!Array<!proto.injective.exchange.v1beta1.SubaccountDeposit>}
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.getDepositsList = function() {
  return /** @type{!Array<!proto.injective.exchange.v1beta1.SubaccountDeposit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.exchange.v1beta1.SubaccountDeposit, 2));
};


/**
 * @param {!Array<!proto.injective.exchange.v1beta1.SubaccountDeposit>} value
 * @return {!proto.injective.exchange.v1beta1.DepositUpdate} returns this
*/
proto.injective.exchange.v1beta1.DepositUpdate.prototype.setDepositsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective.exchange.v1beta1.SubaccountDeposit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.SubaccountDeposit}
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.addDeposits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective.exchange.v1beta1.SubaccountDeposit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.DepositUpdate} returns this
 */
proto.injective.exchange.v1beta1.DepositUpdate.prototype.clearDepositsList = function() {
  return this.setDepositsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.PointsMultiplier.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.PointsMultiplier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.PointsMultiplier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PointsMultiplier.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerPointsMultiplier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    takerPointsMultiplier: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.PointsMultiplier}
 */
proto.injective.exchange.v1beta1.PointsMultiplier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.PointsMultiplier;
  return proto.injective.exchange.v1beta1.PointsMultiplier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.PointsMultiplier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.PointsMultiplier}
 */
proto.injective.exchange.v1beta1.PointsMultiplier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerPointsMultiplier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerPointsMultiplier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.PointsMultiplier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.PointsMultiplier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.PointsMultiplier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.PointsMultiplier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerPointsMultiplier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTakerPointsMultiplier();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string maker_points_multiplier = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PointsMultiplier.prototype.getMakerPointsMultiplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PointsMultiplier} returns this
 */
proto.injective.exchange.v1beta1.PointsMultiplier.prototype.setMakerPointsMultiplier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string taker_points_multiplier = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.PointsMultiplier.prototype.getTakerPointsMultiplier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.PointsMultiplier} returns this
 */
proto.injective.exchange.v1beta1.PointsMultiplier.prototype.setTakerPointsMultiplier = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    boostedSpotMarketIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    spotMarketMultipliersList: jspb.Message.toObjectList(msg.getSpotMarketMultipliersList(),
    proto.injective.exchange.v1beta1.PointsMultiplier.toObject, includeInstance),
    boostedDerivativeMarketIdsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    derivativeMarketMultipliersList: jspb.Message.toObjectList(msg.getDerivativeMarketMultipliersList(),
    proto.injective.exchange.v1beta1.PointsMultiplier.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo;
  return proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addBoostedSpotMarketIds(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.PointsMultiplier;
      reader.readMessage(value,proto.injective.exchange.v1beta1.PointsMultiplier.deserializeBinaryFromReader);
      msg.addSpotMarketMultipliers(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addBoostedDerivativeMarketIds(value);
      break;
    case 4:
      var value = new proto.injective.exchange.v1beta1.PointsMultiplier;
      reader.readMessage(value,proto.injective.exchange.v1beta1.PointsMultiplier.deserializeBinaryFromReader);
      msg.addDerivativeMarketMultipliers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoostedSpotMarketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getSpotMarketMultipliersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.PointsMultiplier.serializeBinaryToWriter
    );
  }
  f = message.getBoostedDerivativeMarketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getDerivativeMarketMultipliersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.injective.exchange.v1beta1.PointsMultiplier.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string boosted_spot_market_ids = 1;
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.getBoostedSpotMarketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.setBoostedSpotMarketIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.addBoostedSpotMarketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.clearBoostedSpotMarketIdsList = function() {
  return this.setBoostedSpotMarketIdsList([]);
};


/**
 * repeated PointsMultiplier spot_market_multipliers = 2;
 * @return {!Array<!proto.injective.exchange.v1beta1.PointsMultiplier>}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.getSpotMarketMultipliersList = function() {
  return /** @type{!Array<!proto.injective.exchange.v1beta1.PointsMultiplier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.exchange.v1beta1.PointsMultiplier, 2));
};


/**
 * @param {!Array<!proto.injective.exchange.v1beta1.PointsMultiplier>} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
*/
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.setSpotMarketMultipliersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective.exchange.v1beta1.PointsMultiplier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.PointsMultiplier}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.addSpotMarketMultipliers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective.exchange.v1beta1.PointsMultiplier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.clearSpotMarketMultipliersList = function() {
  return this.setSpotMarketMultipliersList([]);
};


/**
 * repeated string boosted_derivative_market_ids = 3;
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.getBoostedDerivativeMarketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.setBoostedDerivativeMarketIdsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.addBoostedDerivativeMarketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.clearBoostedDerivativeMarketIdsList = function() {
  return this.setBoostedDerivativeMarketIdsList([]);
};


/**
 * repeated PointsMultiplier derivative_market_multipliers = 4;
 * @return {!Array<!proto.injective.exchange.v1beta1.PointsMultiplier>}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.getDerivativeMarketMultipliersList = function() {
  return /** @type{!Array<!proto.injective.exchange.v1beta1.PointsMultiplier>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.exchange.v1beta1.PointsMultiplier, 4));
};


/**
 * @param {!Array<!proto.injective.exchange.v1beta1.PointsMultiplier>} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
*/
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.setDerivativeMarketMultipliersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.injective.exchange.v1beta1.PointsMultiplier=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.PointsMultiplier}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.addDerivativeMarketMultipliers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.injective.exchange.v1beta1.PointsMultiplier, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.prototype.clearDerivativeMarketMultipliersList = function() {
  return this.setDerivativeMarketMultipliersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.CampaignRewardPool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.CampaignRewardPool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxCampaignRewardsList: jspb.Message.toObjectList(msg.getMaxCampaignRewardsList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.CampaignRewardPool}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.CampaignRewardPool;
  return proto.injective.exchange.v1beta1.CampaignRewardPool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.CampaignRewardPool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.CampaignRewardPool}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartTimestamp(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addMaxCampaignRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.CampaignRewardPool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.CampaignRewardPool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaxCampaignRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 start_timestamp = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.getStartTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.CampaignRewardPool} returns this
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.setStartTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin max_campaign_rewards = 2;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.getMaxCampaignRewardsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.injective.exchange.v1beta1.CampaignRewardPool} returns this
*/
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.setMaxCampaignRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.addMaxCampaignRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.CampaignRewardPool} returns this
 */
proto.injective.exchange.v1beta1.CampaignRewardPool.prototype.clearMaxCampaignRewardsList = function() {
  return this.setMaxCampaignRewardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    campaignDurationSeconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    quoteDenomsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    tradingRewardBoostInfo: (f = msg.getTradingRewardBoostInfo()) && proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.toObject(includeInstance, f),
    disqualifiedMarketIdsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.TradingRewardCampaignInfo;
  return proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCampaignDurationSeconds(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addQuoteDenoms(value);
      break;
    case 3:
      var value = new proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.deserializeBinaryFromReader);
      msg.setTradingRewardBoostInfo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addDisqualifiedMarketIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCampaignDurationSeconds();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQuoteDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTradingRewardBoostInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo.serializeBinaryToWriter
    );
  }
  f = message.getDisqualifiedMarketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional int64 campaign_duration_seconds = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.getCampaignDurationSeconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.setCampaignDurationSeconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string quote_denoms = 2;
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.getQuoteDenomsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.setQuoteDenomsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.addQuoteDenoms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.clearQuoteDenomsList = function() {
  return this.setQuoteDenomsList([]);
};


/**
 * optional TradingRewardCampaignBoostInfo trading_reward_boost_info = 3;
 * @return {?proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.getTradingRewardBoostInfo = function() {
  return /** @type{?proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo} */ (
    jspb.Message.getWrapperField(this, proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo, 3));
};


/**
 * @param {?proto.injective.exchange.v1beta1.TradingRewardCampaignBoostInfo|undefined} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
*/
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.setTradingRewardBoostInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.clearTradingRewardBoostInfo = function() {
  return this.setTradingRewardBoostInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.hasTradingRewardBoostInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string disqualified_market_ids = 4;
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.getDisqualifiedMarketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.setDisqualifiedMarketIdsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.addDisqualifiedMarketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradingRewardCampaignInfo} returns this
 */
proto.injective.exchange.v1beta1.TradingRewardCampaignInfo.prototype.clearDisqualifiedMarketIdsList = function() {
  return this.setDisqualifiedMarketIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.FeeDiscountTierInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    makerDiscountRate: jspb.Message.getFieldWithDefault(msg, 1, ""),
    takerDiscountRate: jspb.Message.getFieldWithDefault(msg, 2, ""),
    stakedAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    volume: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.FeeDiscountTierInfo;
  return proto.injective.exchange.v1beta1.FeeDiscountTierInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMakerDiscountRate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTakerDiscountRate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStakedAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.FeeDiscountTierInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMakerDiscountRate();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTakerDiscountRate();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStakedAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVolume();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string maker_discount_rate = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.getMakerDiscountRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.setMakerDiscountRate = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string taker_discount_rate = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.getTakerDiscountRate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.setTakerDiscountRate = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string staked_amount = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.getStakedAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.setStakedAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string volume = 4;
 * @return {string}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.getVolume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountTierInfo.prototype.setVolume = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.FeeDiscountSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bucketDuration: jspb.Message.getFieldWithDefault(msg, 2, 0),
    quoteDenomsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    tierInfosList: jspb.Message.toObjectList(msg.getTierInfosList(),
    proto.injective.exchange.v1beta1.FeeDiscountTierInfo.toObject, includeInstance),
    disqualifiedMarketIdsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.FeeDiscountSchedule;
  return proto.injective.exchange.v1beta1.FeeDiscountSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBucketCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBucketDuration(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addQuoteDenoms(value);
      break;
    case 4:
      var value = new proto.injective.exchange.v1beta1.FeeDiscountTierInfo;
      reader.readMessage(value,proto.injective.exchange.v1beta1.FeeDiscountTierInfo.deserializeBinaryFromReader);
      msg.addTierInfos(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addDisqualifiedMarketIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.FeeDiscountSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBucketDuration();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getQuoteDenomsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getTierInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.injective.exchange.v1beta1.FeeDiscountTierInfo.serializeBinaryToWriter
    );
  }
  f = message.getDisqualifiedMarketIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * optional uint64 bucket_count = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.getBucketCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.setBucketCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 bucket_duration = 2;
 * @return {number}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.getBucketDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.setBucketDuration = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string quote_denoms = 3;
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.getQuoteDenomsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.setQuoteDenomsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.addQuoteDenoms = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.clearQuoteDenomsList = function() {
  return this.setQuoteDenomsList([]);
};


/**
 * repeated FeeDiscountTierInfo tier_infos = 4;
 * @return {!Array<!proto.injective.exchange.v1beta1.FeeDiscountTierInfo>}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.getTierInfosList = function() {
  return /** @type{!Array<!proto.injective.exchange.v1beta1.FeeDiscountTierInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.exchange.v1beta1.FeeDiscountTierInfo, 4));
};


/**
 * @param {!Array<!proto.injective.exchange.v1beta1.FeeDiscountTierInfo>} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
*/
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.setTierInfosList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierInfo}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.addTierInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.injective.exchange.v1beta1.FeeDiscountTierInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.clearTierInfosList = function() {
  return this.setTierInfosList([]);
};


/**
 * repeated string disqualified_market_ids = 5;
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.getDisqualifiedMarketIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.setDisqualifiedMarketIdsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.addDisqualifiedMarketIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountSchedule} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountSchedule.prototype.clearDisqualifiedMarketIdsList = function() {
  return this.setDisqualifiedMarketIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.FeeDiscountTierTTL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.toObject = function(includeInstance, msg) {
  var f, obj = {
    tier: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ttlTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.FeeDiscountTierTTL;
  return proto.injective.exchange.v1beta1.FeeDiscountTierTTL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTier(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTtlTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.FeeDiscountTierTTL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTier();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTtlTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional uint64 tier = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.prototype.getTier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.prototype.setTier = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ttl_timestamp = 2;
 * @return {number}
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.prototype.getTtlTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.FeeDiscountTierTTL} returns this
 */
proto.injective.exchange.v1beta1.FeeDiscountTierTTL.prototype.setTtlTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.AccountRewards.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.AccountRewards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.AccountRewards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.AccountRewards.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rewardsList: jspb.Message.toObjectList(msg.getRewardsList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.AccountRewards}
 */
proto.injective.exchange.v1beta1.AccountRewards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.AccountRewards;
  return proto.injective.exchange.v1beta1.AccountRewards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.AccountRewards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.AccountRewards}
 */
proto.injective.exchange.v1beta1.AccountRewards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccount(value);
      break;
    case 2:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addRewards(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.AccountRewards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.AccountRewards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.AccountRewards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRewardsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string account = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.AccountRewards} returns this
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.setAccount = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated cosmos.base.v1beta1.Coin rewards = 2;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.getRewardsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 2));
};


/**
 * @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value
 * @return {!proto.injective.exchange.v1beta1.AccountRewards} returns this
*/
proto.injective.exchange.v1beta1.AccountRewards.prototype.setRewardsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.addRewards = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.AccountRewards} returns this
 */
proto.injective.exchange.v1beta1.AccountRewards.prototype.clearRewardsList = function() {
  return this.setRewardsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.TradeRecords.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.TradeRecords.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.TradeRecords} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradeRecords.toObject = function(includeInstance, msg) {
  var f, obj = {
    marketId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    latestTradeRecordsList: jspb.Message.toObjectList(msg.getLatestTradeRecordsList(),
    proto.injective.exchange.v1beta1.TradeRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.TradeRecords}
 */
proto.injective.exchange.v1beta1.TradeRecords.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.TradeRecords;
  return proto.injective.exchange.v1beta1.TradeRecords.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.TradeRecords} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.TradeRecords}
 */
proto.injective.exchange.v1beta1.TradeRecords.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarketId(value);
      break;
    case 2:
      var value = new proto.injective.exchange.v1beta1.TradeRecord;
      reader.readMessage(value,proto.injective.exchange.v1beta1.TradeRecord.deserializeBinaryFromReader);
      msg.addLatestTradeRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.TradeRecords.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.TradeRecords} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradeRecords.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLatestTradeRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.injective.exchange.v1beta1.TradeRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market_id = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.getMarketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.TradeRecords} returns this
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.setMarketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TradeRecord latest_trade_records = 2;
 * @return {!Array<!proto.injective.exchange.v1beta1.TradeRecord>}
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.getLatestTradeRecordsList = function() {
  return /** @type{!Array<!proto.injective.exchange.v1beta1.TradeRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.injective.exchange.v1beta1.TradeRecord, 2));
};


/**
 * @param {!Array<!proto.injective.exchange.v1beta1.TradeRecord>} value
 * @return {!proto.injective.exchange.v1beta1.TradeRecords} returns this
*/
proto.injective.exchange.v1beta1.TradeRecords.prototype.setLatestTradeRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.injective.exchange.v1beta1.TradeRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.TradeRecord}
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.addLatestTradeRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.injective.exchange.v1beta1.TradeRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.TradeRecords} returns this
 */
proto.injective.exchange.v1beta1.TradeRecords.prototype.clearLatestTradeRecordsList = function() {
  return this.setLatestTradeRecordsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.exchange.v1beta1.SubaccountIDs.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.SubaccountIDs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.SubaccountIDs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountIDs.toObject = function(includeInstance, msg) {
  var f, obj = {
    subaccountIdsList: msg.getSubaccountIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.SubaccountIDs}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.SubaccountIDs;
  return proto.injective.exchange.v1beta1.SubaccountIDs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.SubaccountIDs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.SubaccountIDs}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addSubaccountIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.SubaccountIDs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.SubaccountIDs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.SubaccountIDs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubaccountIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes subaccount_ids = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.getSubaccountIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes subaccount_ids = 1;
 * This is a type-conversion wrapper around `getSubaccountIdsList()`
 * @return {!Array<string>}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.getSubaccountIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getSubaccountIdsList()));
};


/**
 * repeated bytes subaccount_ids = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSubaccountIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.getSubaccountIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getSubaccountIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.injective.exchange.v1beta1.SubaccountIDs} returns this
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.setSubaccountIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.injective.exchange.v1beta1.SubaccountIDs} returns this
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.addSubaccountIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.exchange.v1beta1.SubaccountIDs} returns this
 */
proto.injective.exchange.v1beta1.SubaccountIDs.prototype.clearSubaccountIdsList = function() {
  return this.setSubaccountIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.TradeRecord.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.TradeRecord} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradeRecord.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    price: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.TradeRecord}
 */
proto.injective.exchange.v1beta1.TradeRecord.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.TradeRecord;
  return proto.injective.exchange.v1beta1.TradeRecord.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.TradeRecord} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.TradeRecord}
 */
proto.injective.exchange.v1beta1.TradeRecord.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.TradeRecord.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.TradeRecord} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.TradeRecord.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int64 timestamp = 1;
 * @return {number}
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.exchange.v1beta1.TradeRecord} returns this
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string price = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.getPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.TradeRecord} returns this
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.setPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quantity = 3;
 * @return {string}
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.getQuantity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.TradeRecord} returns this
 */
proto.injective.exchange.v1beta1.TradeRecord.prototype.setQuantity = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.exchange.v1beta1.Level.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.exchange.v1beta1.Level.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.exchange.v1beta1.Level} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Level.toObject = function(includeInstance, msg) {
  var f, obj = {
    p: jspb.Message.getFieldWithDefault(msg, 1, ""),
    q: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.exchange.v1beta1.Level}
 */
proto.injective.exchange.v1beta1.Level.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.exchange.v1beta1.Level;
  return proto.injective.exchange.v1beta1.Level.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.exchange.v1beta1.Level} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.exchange.v1beta1.Level}
 */
proto.injective.exchange.v1beta1.Level.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setP(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.exchange.v1beta1.Level.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.exchange.v1beta1.Level.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.exchange.v1beta1.Level} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.exchange.v1beta1.Level.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQ();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string p = 1;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Level.prototype.getP = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Level} returns this
 */
proto.injective.exchange.v1beta1.Level.prototype.setP = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string q = 2;
 * @return {string}
 */
proto.injective.exchange.v1beta1.Level.prototype.getQ = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.exchange.v1beta1.Level} returns this
 */
proto.injective.exchange.v1beta1.Level.prototype.setQ = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.injective.exchange.v1beta1.AtomicMarketOrderAccessLevel = {
  NOBODY: 0,
  BEGINBLOCKERSMARTCONTRACTSONLY: 1,
  SMARTCONTRACTSONLY: 2,
  EVERYONE: 3
};

/**
 * @enum {number}
 */
proto.injective.exchange.v1beta1.MarketStatus = {
  UNSPECIFIED: 0,
  ACTIVE: 1,
  PAUSED: 2,
  DEMOLISHED: 3,
  EXPIRED: 4
};

/**
 * @enum {number}
 */
proto.injective.exchange.v1beta1.OrderType = {
  UNSPECIFIED: 0,
  BUY: 1,
  SELL: 2,
  STOP_BUY: 3,
  STOP_SELL: 4,
  TAKE_BUY: 5,
  TAKE_SELL: 6,
  BUY_PO: 7,
  SELL_PO: 8,
  BUY_ATOMIC: 9,
  SELL_ATOMIC: 10
};

/**
 * @enum {number}
 */
proto.injective.exchange.v1beta1.ExecutionType = {
  UNSPECIFIEDEXECUTIONTYPE: 0,
  MARKET: 1,
  LIMITFILL: 2,
  LIMITMATCHRESTINGORDER: 3,
  LIMITMATCHNEWORDER: 4,
  MARKETLIQUIDATION: 5,
  EXPIRYMARKETSETTLEMENT: 6
};

/**
 * @enum {number}
 */
proto.injective.exchange.v1beta1.OrderMask = {
  UNUSED: 0,
  ANY: 1,
  REGULAR: 2,
  CONDITIONAL: 4,
  DIRECTION_BUY_OR_HIGHER: 8,
  DIRECTION_SELL_OR_LOWER: 16,
  TYPE_MARKET: 32,
  TYPE_LIMIT: 64
};

goog.object.extend(exports, proto.injective.exchange.v1beta1);
