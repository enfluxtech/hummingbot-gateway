export declare const VaultFactoryABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "wnative";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidDecimals";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidFeeRecipient";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidLength";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidOraclePrice";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidStrategy";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "VaultFactory__InvalidType";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }];
    readonly name: "VaultFactory__StrategyImplementationNotSet";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }];
    readonly name: "VaultFactory__VaultImplementationNotSet";
    readonly type: "error";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "defaultOperator";
        readonly type: "address";
    }];
    readonly name: "DefaultOperatorSet";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "sender";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "feeRecipient";
        readonly type: "address";
    }];
    readonly name: "FeeRecipientSet";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint8";
        readonly name: "version";
        readonly type: "uint8";
    }];
    readonly name: "Initialized";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferStarted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "previousOwner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "OwnershipTransferred";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "strategy";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "strategyIndex";
        readonly type: "uint256";
    }];
    readonly name: "StrategyCreated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "strategyImplementation";
        readonly type: "address";
    }];
    readonly name: "StrategyImplementationSet";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "vaultIndex";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "tokenY";
        readonly type: "address";
    }];
    readonly name: "VaultCreated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "vaultImplementation";
        readonly type: "address";
    }];
    readonly name: "VaultImplementationSet";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "address[]";
        readonly name: "addresses";
        readonly type: "address[]";
    }];
    readonly name: "addToWhitelist";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "vaults";
        readonly type: "address[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "rounds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "bool[]";
        readonly name: "withdrawNative";
        readonly type: "bool[]";
    }];
    readonly name: "batchRedeemQueuedWithdrawals";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly name: "createDefaultStrategy";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "strategy";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly internalType: "contract IAggregatorV3";
        readonly name: "dataFeedX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IAggregatorV3";
        readonly name: "dataFeedY";
        readonly type: "address";
    }];
    readonly name: "createOracleVault";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }, {
        readonly internalType: "contract IAggregatorV3";
        readonly name: "dataFeedX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IAggregatorV3";
        readonly name: "dataFeedY";
        readonly type: "address";
    }];
    readonly name: "createOracleVaultAndDefaultStrategy";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "strategy";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }];
    readonly name: "createSimpleVault";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "lbPair";
        readonly type: "address";
    }];
    readonly name: "createSimpleVaultAndDefaultStrategy";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "strategy";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getDefaultOperator";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getFeeRecipient";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }];
    readonly name: "getNumberOfStrategies";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }];
    readonly name: "getNumberOfVaults";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint256";
        readonly name: "index";
        readonly type: "uint256";
    }];
    readonly name: "getStrategyAt";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }];
    readonly name: "getStrategyImplementation";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "strategy";
        readonly type: "address";
    }];
    readonly name: "getStrategyType";
    readonly outputs: readonly [{
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }, {
        readonly internalType: "uint256";
        readonly name: "index";
        readonly type: "uint256";
    }];
    readonly name: "getVaultAt";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }];
    readonly name: "getVaultImplementation";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly name: "getVaultType";
    readonly outputs: readonly [{
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getWNative";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "owner";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "strategy";
        readonly type: "address";
    }];
    readonly name: "linkVaultToStrategy";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly name: "pauseDeposits";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20Upgradeable";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "recoverERC20";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "address[]";
        readonly name: "addresses";
        readonly type: "address[]";
    }];
    readonly name: "removeFromWhitelist";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly name: "resetPendingAumAnnualFee";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly name: "resumeDeposits";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "defaultOperator";
        readonly type: "address";
    }];
    readonly name: "setDefaultOperator";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }];
    readonly name: "setEmergencyMode";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "feeRecipient";
        readonly type: "address";
    }];
    readonly name: "setFeeRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IStrategy";
        readonly name: "strategy";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "operator";
        readonly type: "address";
    }];
    readonly name: "setOperator";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "pendingAumAnnualFee";
        readonly type: "uint16";
    }];
    readonly name: "setPendingAumAnnualFee";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.StrategyType";
        readonly name: "sType";
        readonly type: "uint8";
    }, {
        readonly internalType: "address";
        readonly name: "strategyImplementation";
        readonly type: "address";
    }];
    readonly name: "setStrategyImplementation";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IVaultFactory.VaultType";
        readonly name: "vType";
        readonly type: "uint8";
    }, {
        readonly internalType: "address";
        readonly name: "vaultImplementation";
        readonly type: "address";
    }];
    readonly name: "setVaultImplementation";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IBaseVault";
        readonly name: "vault";
        readonly type: "address";
    }, {
        readonly internalType: "bool";
        readonly name: "isWhitelisted";
        readonly type: "bool";
    }];
    readonly name: "setWhitelistState";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "newOwner";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}];
