import { Channel, ChannelEventSource } from "../../internal";
import { Position } from "./Position";
import Big from "big.js";
import { PerpetualProtocolConnected } from "../PerpetualProtocol";
export interface FetchPositionsReturn {
    takerPositions: Position[];
    makerPositions: Position[];
}
declare type PositionsEventName = "updated" | "updateError";
declare type ByMarketTickerSymbol<Value> = {
    [tickerSymbol: string]: Value;
};
export declare class Positions extends Channel<PositionsEventName> {
    private readonly _perp;
    private _cache;
    constructor(_perp: PerpetualProtocolConnected);
    protected _getEventSourceMap(): {
        updated: ChannelEventSource<PositionsEventName>;
    };
    getTakerPositions({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Position[]>;
    getMakerPositions({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Position[]>;
    getTakerPositionByTickerSymbol(tickerSymbol: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Position | undefined>;
    getMakerPositionByTickerSymbol(tickerSymbol: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Position | undefined>;
    getTakerPosition(baseAddress: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Position | undefined>;
    getMakerPosition(baseAddress: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Position | undefined>;
    getTotalPositionValue(baseAddress: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalPositionValueFromAllMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalTakerPositionValueFromAllMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalMakerPositionValueFromAllMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalUnrealizedPnlFromAllMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalTakerUnrealizedPnlFromAllMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalMakerUnrealizedPnlFromAllMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalPendingFundingPayments({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<ByMarketTickerSymbol<Big>>;
    getAccountMarginRatio({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big | undefined>;
    getAccountLeverage({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big | undefined>;
    private _fetch;
    protected getPositionDataAll(): Promise<void>;
}
export interface PositionDataAllCrossMarket {
    totalTakerPositionValue: Big;
    totalMakerPositionValue: Big;
    totalTakerUnrealizedPnl: Big;
    totalMakerUnrealizedPnl: Big;
    totalUnrealizedPnl: Big;
    accountPosValueAbs: Big;
    accountMarginRatio?: Big;
    accountLeverage?: Big;
}
export interface PositionDataAllByMarket {
    [key: string]: {
        takerPosition?: Position;
        takerPositionValue?: Big;
        takerPosUnrealizedPnl?: Big;
        takerPosExitPrice?: Big;
        takerPosExitPriceImpact?: Big;
        takerPosExitTxFee?: Big;
        makerPosition?: Position;
        makerPositionValue?: Big;
        makerPosUnrealizedPnl?: Big;
        makerPosExitPrice?: Big;
        makerPosExitPriceImpact?: Big;
        makerPosExitTxFee?: Big;
        pendingFundingPayment: Big;
        indexPrice: Big;
        markPrice: Big;
    };
}
export interface PositionDataAll {
    positionDataAllByMarket: PositionDataAllByMarket;
    positionDataAllCrossMarket: PositionDataAllCrossMarket;
}
export {};
