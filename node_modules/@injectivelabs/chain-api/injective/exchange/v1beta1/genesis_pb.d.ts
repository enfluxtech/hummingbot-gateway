// package: injective.exchange.v1beta1
// file: injective/exchange/v1beta1/genesis.proto

import * as jspb from "google-protobuf";
import * as injective_exchange_v1beta1_exchange_pb from "../../../injective/exchange/v1beta1/exchange_pb";
import * as injective_exchange_v1beta1_tx_pb from "../../../injective/exchange/v1beta1/tx_pb";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";

export class GenesisState extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_exchange_v1beta1_exchange_pb.Params | undefined;
  setParams(value?: injective_exchange_v1beta1_exchange_pb.Params): void;

  clearSpotMarketsList(): void;
  getSpotMarketsList(): Array<injective_exchange_v1beta1_exchange_pb.SpotMarket>;
  setSpotMarketsList(value: Array<injective_exchange_v1beta1_exchange_pb.SpotMarket>): void;
  addSpotMarkets(value?: injective_exchange_v1beta1_exchange_pb.SpotMarket, index?: number): injective_exchange_v1beta1_exchange_pb.SpotMarket;

  clearDerivativeMarketsList(): void;
  getDerivativeMarketsList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarket>;
  setDerivativeMarketsList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarket>): void;
  addDerivativeMarkets(value?: injective_exchange_v1beta1_exchange_pb.DerivativeMarket, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeMarket;

  clearSpotOrderbookList(): void;
  getSpotOrderbookList(): Array<SpotOrderBook>;
  setSpotOrderbookList(value: Array<SpotOrderBook>): void;
  addSpotOrderbook(value?: SpotOrderBook, index?: number): SpotOrderBook;

  clearDerivativeOrderbookList(): void;
  getDerivativeOrderbookList(): Array<DerivativeOrderBook>;
  setDerivativeOrderbookList(value: Array<DerivativeOrderBook>): void;
  addDerivativeOrderbook(value?: DerivativeOrderBook, index?: number): DerivativeOrderBook;

  clearBalancesList(): void;
  getBalancesList(): Array<Balance>;
  setBalancesList(value: Array<Balance>): void;
  addBalances(value?: Balance, index?: number): Balance;

  clearPositionsList(): void;
  getPositionsList(): Array<DerivativePosition>;
  setPositionsList(value: Array<DerivativePosition>): void;
  addPositions(value?: DerivativePosition, index?: number): DerivativePosition;

  clearSubaccountTradeNoncesList(): void;
  getSubaccountTradeNoncesList(): Array<SubaccountNonce>;
  setSubaccountTradeNoncesList(value: Array<SubaccountNonce>): void;
  addSubaccountTradeNonces(value?: SubaccountNonce, index?: number): SubaccountNonce;

  clearExpiryFuturesMarketInfoStateList(): void;
  getExpiryFuturesMarketInfoStateList(): Array<ExpiryFuturesMarketInfoState>;
  setExpiryFuturesMarketInfoStateList(value: Array<ExpiryFuturesMarketInfoState>): void;
  addExpiryFuturesMarketInfoState(value?: ExpiryFuturesMarketInfoState, index?: number): ExpiryFuturesMarketInfoState;

  clearPerpetualMarketInfoList(): void;
  getPerpetualMarketInfoList(): Array<injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo>;
  setPerpetualMarketInfoList(value: Array<injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo>): void;
  addPerpetualMarketInfo(value?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo, index?: number): injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo;

  clearPerpetualMarketFundingStateList(): void;
  getPerpetualMarketFundingStateList(): Array<PerpetualMarketFundingState>;
  setPerpetualMarketFundingStateList(value: Array<PerpetualMarketFundingState>): void;
  addPerpetualMarketFundingState(value?: PerpetualMarketFundingState, index?: number): PerpetualMarketFundingState;

  clearDerivativeMarketSettlementScheduledList(): void;
  getDerivativeMarketSettlementScheduledList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketSettlementInfo>;
  setDerivativeMarketSettlementScheduledList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketSettlementInfo>): void;
  addDerivativeMarketSettlementScheduled(value?: injective_exchange_v1beta1_exchange_pb.DerivativeMarketSettlementInfo, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeMarketSettlementInfo;

  getIsSpotExchangeEnabled(): boolean;
  setIsSpotExchangeEnabled(value: boolean): void;

  getIsDerivativesExchangeEnabled(): boolean;
  setIsDerivativesExchangeEnabled(value: boolean): void;

  hasTradingRewardCampaignInfo(): boolean;
  clearTradingRewardCampaignInfo(): void;
  getTradingRewardCampaignInfo(): injective_exchange_v1beta1_exchange_pb.TradingRewardCampaignInfo | undefined;
  setTradingRewardCampaignInfo(value?: injective_exchange_v1beta1_exchange_pb.TradingRewardCampaignInfo): void;

  clearTradingRewardPoolCampaignScheduleList(): void;
  getTradingRewardPoolCampaignScheduleList(): Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>;
  setTradingRewardPoolCampaignScheduleList(value: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>): void;
  addTradingRewardPoolCampaignSchedule(value?: injective_exchange_v1beta1_exchange_pb.CampaignRewardPool, index?: number): injective_exchange_v1beta1_exchange_pb.CampaignRewardPool;

  clearTradingRewardCampaignAccountPointsList(): void;
  getTradingRewardCampaignAccountPointsList(): Array<TradingRewardCampaignAccountPoints>;
  setTradingRewardCampaignAccountPointsList(value: Array<TradingRewardCampaignAccountPoints>): void;
  addTradingRewardCampaignAccountPoints(value?: TradingRewardCampaignAccountPoints, index?: number): TradingRewardCampaignAccountPoints;

  hasFeeDiscountSchedule(): boolean;
  clearFeeDiscountSchedule(): void;
  getFeeDiscountSchedule(): injective_exchange_v1beta1_exchange_pb.FeeDiscountSchedule | undefined;
  setFeeDiscountSchedule(value?: injective_exchange_v1beta1_exchange_pb.FeeDiscountSchedule): void;

  clearFeeDiscountAccountTierTtlList(): void;
  getFeeDiscountAccountTierTtlList(): Array<FeeDiscountAccountTierTTL>;
  setFeeDiscountAccountTierTtlList(value: Array<FeeDiscountAccountTierTTL>): void;
  addFeeDiscountAccountTierTtl(value?: FeeDiscountAccountTierTTL, index?: number): FeeDiscountAccountTierTTL;

  clearFeeDiscountBucketVolumeAccountsList(): void;
  getFeeDiscountBucketVolumeAccountsList(): Array<FeeDiscountBucketVolumeAccounts>;
  setFeeDiscountBucketVolumeAccountsList(value: Array<FeeDiscountBucketVolumeAccounts>): void;
  addFeeDiscountBucketVolumeAccounts(value?: FeeDiscountBucketVolumeAccounts, index?: number): FeeDiscountBucketVolumeAccounts;

  getIsFirstFeeCycleFinished(): boolean;
  setIsFirstFeeCycleFinished(value: boolean): void;

  clearPendingTradingRewardPoolCampaignScheduleList(): void;
  getPendingTradingRewardPoolCampaignScheduleList(): Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>;
  setPendingTradingRewardPoolCampaignScheduleList(value: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool>): void;
  addPendingTradingRewardPoolCampaignSchedule(value?: injective_exchange_v1beta1_exchange_pb.CampaignRewardPool, index?: number): injective_exchange_v1beta1_exchange_pb.CampaignRewardPool;

  clearPendingTradingRewardCampaignAccountPointsList(): void;
  getPendingTradingRewardCampaignAccountPointsList(): Array<TradingRewardCampaignAccountPendingPoints>;
  setPendingTradingRewardCampaignAccountPointsList(value: Array<TradingRewardCampaignAccountPendingPoints>): void;
  addPendingTradingRewardCampaignAccountPoints(value?: TradingRewardCampaignAccountPendingPoints, index?: number): TradingRewardCampaignAccountPendingPoints;

  clearRewardsOptOutAddressesList(): void;
  getRewardsOptOutAddressesList(): Array<string>;
  setRewardsOptOutAddressesList(value: Array<string>): void;
  addRewardsOptOutAddresses(value: string, index?: number): string;

  clearHistoricalTradeRecordsList(): void;
  getHistoricalTradeRecordsList(): Array<injective_exchange_v1beta1_exchange_pb.TradeRecords>;
  setHistoricalTradeRecordsList(value: Array<injective_exchange_v1beta1_exchange_pb.TradeRecords>): void;
  addHistoricalTradeRecords(value?: injective_exchange_v1beta1_exchange_pb.TradeRecords, index?: number): injective_exchange_v1beta1_exchange_pb.TradeRecords;

  clearBinaryOptionsMarketsList(): void;
  getBinaryOptionsMarketsList(): Array<injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket>;
  setBinaryOptionsMarketsList(value: Array<injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket>): void;
  addBinaryOptionsMarkets(value?: injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket, index?: number): injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket;

  clearBinaryOptionsMarketIdsScheduledForSettlementList(): void;
  getBinaryOptionsMarketIdsScheduledForSettlementList(): Array<string>;
  setBinaryOptionsMarketIdsScheduledForSettlementList(value: Array<string>): void;
  addBinaryOptionsMarketIdsScheduledForSettlement(value: string, index?: number): string;

  clearSpotMarketIdsScheduledToForceCloseList(): void;
  getSpotMarketIdsScheduledToForceCloseList(): Array<string>;
  setSpotMarketIdsScheduledToForceCloseList(value: Array<string>): void;
  addSpotMarketIdsScheduledToForceClose(value: string, index?: number): string;

  clearDenomDecimalsList(): void;
  getDenomDecimalsList(): Array<injective_exchange_v1beta1_tx_pb.DenomDecimals>;
  setDenomDecimalsList(value: Array<injective_exchange_v1beta1_tx_pb.DenomDecimals>): void;
  addDenomDecimals(value?: injective_exchange_v1beta1_tx_pb.DenomDecimals, index?: number): injective_exchange_v1beta1_tx_pb.DenomDecimals;

  clearConditionalDerivativeOrderbooksList(): void;
  getConditionalDerivativeOrderbooksList(): Array<ConditionalDerivativeOrderBook>;
  setConditionalDerivativeOrderbooksList(value: Array<ConditionalDerivativeOrderBook>): void;
  addConditionalDerivativeOrderbooks(value?: ConditionalDerivativeOrderBook, index?: number): ConditionalDerivativeOrderBook;

  clearMarketFeeMultipliersList(): void;
  getMarketFeeMultipliersList(): Array<injective_exchange_v1beta1_exchange_pb.MarketFeeMultiplier>;
  setMarketFeeMultipliersList(value: Array<injective_exchange_v1beta1_exchange_pb.MarketFeeMultiplier>): void;
  addMarketFeeMultipliers(value?: injective_exchange_v1beta1_exchange_pb.MarketFeeMultiplier, index?: number): injective_exchange_v1beta1_exchange_pb.MarketFeeMultiplier;

  clearOrderbookSequencesList(): void;
  getOrderbookSequencesList(): Array<OrderbookSequence>;
  setOrderbookSequencesList(value: Array<OrderbookSequence>): void;
  addOrderbookSequences(value?: OrderbookSequence, index?: number): OrderbookSequence;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenesisState.AsObject;
  static toObject(includeInstance: boolean, msg: GenesisState): GenesisState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenesisState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenesisState;
  static deserializeBinaryFromReader(message: GenesisState, reader: jspb.BinaryReader): GenesisState;
}

export namespace GenesisState {
  export type AsObject = {
    params?: injective_exchange_v1beta1_exchange_pb.Params.AsObject,
    spotMarketsList: Array<injective_exchange_v1beta1_exchange_pb.SpotMarket.AsObject>,
    derivativeMarketsList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarket.AsObject>,
    spotOrderbookList: Array<SpotOrderBook.AsObject>,
    derivativeOrderbookList: Array<DerivativeOrderBook.AsObject>,
    balancesList: Array<Balance.AsObject>,
    positionsList: Array<DerivativePosition.AsObject>,
    subaccountTradeNoncesList: Array<SubaccountNonce.AsObject>,
    expiryFuturesMarketInfoStateList: Array<ExpiryFuturesMarketInfoState.AsObject>,
    perpetualMarketInfoList: Array<injective_exchange_v1beta1_exchange_pb.PerpetualMarketInfo.AsObject>,
    perpetualMarketFundingStateList: Array<PerpetualMarketFundingState.AsObject>,
    derivativeMarketSettlementScheduledList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketSettlementInfo.AsObject>,
    isSpotExchangeEnabled: boolean,
    isDerivativesExchangeEnabled: boolean,
    tradingRewardCampaignInfo?: injective_exchange_v1beta1_exchange_pb.TradingRewardCampaignInfo.AsObject,
    tradingRewardPoolCampaignScheduleList: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool.AsObject>,
    tradingRewardCampaignAccountPointsList: Array<TradingRewardCampaignAccountPoints.AsObject>,
    feeDiscountSchedule?: injective_exchange_v1beta1_exchange_pb.FeeDiscountSchedule.AsObject,
    feeDiscountAccountTierTtlList: Array<FeeDiscountAccountTierTTL.AsObject>,
    feeDiscountBucketVolumeAccountsList: Array<FeeDiscountBucketVolumeAccounts.AsObject>,
    isFirstFeeCycleFinished: boolean,
    pendingTradingRewardPoolCampaignScheduleList: Array<injective_exchange_v1beta1_exchange_pb.CampaignRewardPool.AsObject>,
    pendingTradingRewardCampaignAccountPointsList: Array<TradingRewardCampaignAccountPendingPoints.AsObject>,
    rewardsOptOutAddressesList: Array<string>,
    historicalTradeRecordsList: Array<injective_exchange_v1beta1_exchange_pb.TradeRecords.AsObject>,
    binaryOptionsMarketsList: Array<injective_exchange_v1beta1_exchange_pb.BinaryOptionsMarket.AsObject>,
    binaryOptionsMarketIdsScheduledForSettlementList: Array<string>,
    spotMarketIdsScheduledToForceCloseList: Array<string>,
    denomDecimalsList: Array<injective_exchange_v1beta1_tx_pb.DenomDecimals.AsObject>,
    conditionalDerivativeOrderbooksList: Array<ConditionalDerivativeOrderBook.AsObject>,
    marketFeeMultipliersList: Array<injective_exchange_v1beta1_exchange_pb.MarketFeeMultiplier.AsObject>,
    orderbookSequencesList: Array<OrderbookSequence.AsObject>,
  }
}

export class OrderbookSequence extends jspb.Message {
  getSequence(): number;
  setSequence(value: number): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): OrderbookSequence.AsObject;
  static toObject(includeInstance: boolean, msg: OrderbookSequence): OrderbookSequence.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: OrderbookSequence, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): OrderbookSequence;
  static deserializeBinaryFromReader(message: OrderbookSequence, reader: jspb.BinaryReader): OrderbookSequence;
}

export namespace OrderbookSequence {
  export type AsObject = {
    sequence: number,
    marketId: string,
  }
}

export class FeeDiscountAccountTierTTL extends jspb.Message {
  getAccount(): string;
  setAccount(value: string): void;

  hasTierTtl(): boolean;
  clearTierTtl(): void;
  getTierTtl(): injective_exchange_v1beta1_exchange_pb.FeeDiscountTierTTL | undefined;
  setTierTtl(value?: injective_exchange_v1beta1_exchange_pb.FeeDiscountTierTTL): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FeeDiscountAccountTierTTL.AsObject;
  static toObject(includeInstance: boolean, msg: FeeDiscountAccountTierTTL): FeeDiscountAccountTierTTL.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FeeDiscountAccountTierTTL, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FeeDiscountAccountTierTTL;
  static deserializeBinaryFromReader(message: FeeDiscountAccountTierTTL, reader: jspb.BinaryReader): FeeDiscountAccountTierTTL;
}

export namespace FeeDiscountAccountTierTTL {
  export type AsObject = {
    account: string,
    tierTtl?: injective_exchange_v1beta1_exchange_pb.FeeDiscountTierTTL.AsObject,
  }
}

export class FeeDiscountBucketVolumeAccounts extends jspb.Message {
  getBucketStartTimestamp(): number;
  setBucketStartTimestamp(value: number): void;

  clearAccountVolumeList(): void;
  getAccountVolumeList(): Array<AccountVolume>;
  setAccountVolumeList(value: Array<AccountVolume>): void;
  addAccountVolume(value?: AccountVolume, index?: number): AccountVolume;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FeeDiscountBucketVolumeAccounts.AsObject;
  static toObject(includeInstance: boolean, msg: FeeDiscountBucketVolumeAccounts): FeeDiscountBucketVolumeAccounts.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FeeDiscountBucketVolumeAccounts, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FeeDiscountBucketVolumeAccounts;
  static deserializeBinaryFromReader(message: FeeDiscountBucketVolumeAccounts, reader: jspb.BinaryReader): FeeDiscountBucketVolumeAccounts;
}

export namespace FeeDiscountBucketVolumeAccounts {
  export type AsObject = {
    bucketStartTimestamp: number,
    accountVolumeList: Array<AccountVolume.AsObject>,
  }
}

export class AccountVolume extends jspb.Message {
  getAccount(): string;
  setAccount(value: string): void;

  getVolume(): string;
  setVolume(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): AccountVolume.AsObject;
  static toObject(includeInstance: boolean, msg: AccountVolume): AccountVolume.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: AccountVolume, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): AccountVolume;
  static deserializeBinaryFromReader(message: AccountVolume, reader: jspb.BinaryReader): AccountVolume;
}

export namespace AccountVolume {
  export type AsObject = {
    account: string,
    volume: string,
  }
}

export class TradingRewardCampaignAccountPoints extends jspb.Message {
  getAccount(): string;
  setAccount(value: string): void;

  getPoints(): string;
  setPoints(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TradingRewardCampaignAccountPoints.AsObject;
  static toObject(includeInstance: boolean, msg: TradingRewardCampaignAccountPoints): TradingRewardCampaignAccountPoints.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TradingRewardCampaignAccountPoints, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TradingRewardCampaignAccountPoints;
  static deserializeBinaryFromReader(message: TradingRewardCampaignAccountPoints, reader: jspb.BinaryReader): TradingRewardCampaignAccountPoints;
}

export namespace TradingRewardCampaignAccountPoints {
  export type AsObject = {
    account: string,
    points: string,
  }
}

export class TradingRewardCampaignAccountPendingPoints extends jspb.Message {
  getRewardPoolStartTimestamp(): number;
  setRewardPoolStartTimestamp(value: number): void;

  clearAccountPointsList(): void;
  getAccountPointsList(): Array<TradingRewardCampaignAccountPoints>;
  setAccountPointsList(value: Array<TradingRewardCampaignAccountPoints>): void;
  addAccountPoints(value?: TradingRewardCampaignAccountPoints, index?: number): TradingRewardCampaignAccountPoints;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TradingRewardCampaignAccountPendingPoints.AsObject;
  static toObject(includeInstance: boolean, msg: TradingRewardCampaignAccountPendingPoints): TradingRewardCampaignAccountPendingPoints.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TradingRewardCampaignAccountPendingPoints, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TradingRewardCampaignAccountPendingPoints;
  static deserializeBinaryFromReader(message: TradingRewardCampaignAccountPendingPoints, reader: jspb.BinaryReader): TradingRewardCampaignAccountPendingPoints;
}

export namespace TradingRewardCampaignAccountPendingPoints {
  export type AsObject = {
    rewardPoolStartTimestamp: number,
    accountPointsList: Array<TradingRewardCampaignAccountPoints.AsObject>,
  }
}

export class SpotOrderBook extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getIsbuyside(): boolean;
  setIsbuyside(value: boolean): void;

  clearOrdersList(): void;
  getOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.SpotLimitOrder>;
  setOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.SpotLimitOrder>): void;
  addOrders(value?: injective_exchange_v1beta1_exchange_pb.SpotLimitOrder, index?: number): injective_exchange_v1beta1_exchange_pb.SpotLimitOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SpotOrderBook.AsObject;
  static toObject(includeInstance: boolean, msg: SpotOrderBook): SpotOrderBook.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SpotOrderBook, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SpotOrderBook;
  static deserializeBinaryFromReader(message: SpotOrderBook, reader: jspb.BinaryReader): SpotOrderBook;
}

export namespace SpotOrderBook {
  export type AsObject = {
    marketId: string,
    isbuyside: boolean,
    ordersList: Array<injective_exchange_v1beta1_exchange_pb.SpotLimitOrder.AsObject>,
  }
}

export class DerivativeOrderBook extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  getIsbuyside(): boolean;
  setIsbuyside(value: boolean): void;

  clearOrdersList(): void;
  getOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder>;
  setOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder>): void;
  addOrders(value?: injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DerivativeOrderBook.AsObject;
  static toObject(includeInstance: boolean, msg: DerivativeOrderBook): DerivativeOrderBook.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DerivativeOrderBook, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DerivativeOrderBook;
  static deserializeBinaryFromReader(message: DerivativeOrderBook, reader: jspb.BinaryReader): DerivativeOrderBook;
}

export namespace DerivativeOrderBook {
  export type AsObject = {
    marketId: string,
    isbuyside: boolean,
    ordersList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder.AsObject>,
  }
}

export class ConditionalDerivativeOrderBook extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  clearLimitBuyOrdersList(): void;
  getLimitBuyOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder>;
  setLimitBuyOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder>): void;
  addLimitBuyOrders(value?: injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder;

  clearMarketBuyOrdersList(): void;
  getMarketBuyOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder>;
  setMarketBuyOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder>): void;
  addMarketBuyOrders(value?: injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder;

  clearLimitSellOrdersList(): void;
  getLimitSellOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder>;
  setLimitSellOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder>): void;
  addLimitSellOrders(value?: injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder;

  clearMarketSellOrdersList(): void;
  getMarketSellOrdersList(): Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder>;
  setMarketSellOrdersList(value: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder>): void;
  addMarketSellOrders(value?: injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder, index?: number): injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ConditionalDerivativeOrderBook.AsObject;
  static toObject(includeInstance: boolean, msg: ConditionalDerivativeOrderBook): ConditionalDerivativeOrderBook.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ConditionalDerivativeOrderBook, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ConditionalDerivativeOrderBook;
  static deserializeBinaryFromReader(message: ConditionalDerivativeOrderBook, reader: jspb.BinaryReader): ConditionalDerivativeOrderBook;
}

export namespace ConditionalDerivativeOrderBook {
  export type AsObject = {
    marketId: string,
    limitBuyOrdersList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder.AsObject>,
    marketBuyOrdersList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder.AsObject>,
    limitSellOrdersList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeLimitOrder.AsObject>,
    marketSellOrdersList: Array<injective_exchange_v1beta1_exchange_pb.DerivativeMarketOrder.AsObject>,
  }
}

export class Balance extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getDenom(): string;
  setDenom(value: string): void;

  hasDeposits(): boolean;
  clearDeposits(): void;
  getDeposits(): injective_exchange_v1beta1_exchange_pb.Deposit | undefined;
  setDeposits(value?: injective_exchange_v1beta1_exchange_pb.Deposit): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Balance.AsObject;
  static toObject(includeInstance: boolean, msg: Balance): Balance.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: Balance, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Balance;
  static deserializeBinaryFromReader(message: Balance, reader: jspb.BinaryReader): Balance;
}

export namespace Balance {
  export type AsObject = {
    subaccountId: string,
    denom: string,
    deposits?: injective_exchange_v1beta1_exchange_pb.Deposit.AsObject,
  }
}

export class DerivativePosition extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  getMarketId(): string;
  setMarketId(value: string): void;

  hasPosition(): boolean;
  clearPosition(): void;
  getPosition(): injective_exchange_v1beta1_exchange_pb.Position | undefined;
  setPosition(value?: injective_exchange_v1beta1_exchange_pb.Position): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): DerivativePosition.AsObject;
  static toObject(includeInstance: boolean, msg: DerivativePosition): DerivativePosition.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: DerivativePosition, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): DerivativePosition;
  static deserializeBinaryFromReader(message: DerivativePosition, reader: jspb.BinaryReader): DerivativePosition;
}

export namespace DerivativePosition {
  export type AsObject = {
    subaccountId: string,
    marketId: string,
    position?: injective_exchange_v1beta1_exchange_pb.Position.AsObject,
  }
}

export class SubaccountNonce extends jspb.Message {
  getSubaccountId(): string;
  setSubaccountId(value: string): void;

  hasSubaccountTradeNonce(): boolean;
  clearSubaccountTradeNonce(): void;
  getSubaccountTradeNonce(): injective_exchange_v1beta1_exchange_pb.SubaccountTradeNonce | undefined;
  setSubaccountTradeNonce(value?: injective_exchange_v1beta1_exchange_pb.SubaccountTradeNonce): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SubaccountNonce.AsObject;
  static toObject(includeInstance: boolean, msg: SubaccountNonce): SubaccountNonce.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SubaccountNonce, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SubaccountNonce;
  static deserializeBinaryFromReader(message: SubaccountNonce, reader: jspb.BinaryReader): SubaccountNonce;
}

export namespace SubaccountNonce {
  export type AsObject = {
    subaccountId: string,
    subaccountTradeNonce?: injective_exchange_v1beta1_exchange_pb.SubaccountTradeNonce.AsObject,
  }
}

export class ExpiryFuturesMarketInfoState extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  hasMarketInfo(): boolean;
  clearMarketInfo(): void;
  getMarketInfo(): injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo | undefined;
  setMarketInfo(value?: injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ExpiryFuturesMarketInfoState.AsObject;
  static toObject(includeInstance: boolean, msg: ExpiryFuturesMarketInfoState): ExpiryFuturesMarketInfoState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ExpiryFuturesMarketInfoState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ExpiryFuturesMarketInfoState;
  static deserializeBinaryFromReader(message: ExpiryFuturesMarketInfoState, reader: jspb.BinaryReader): ExpiryFuturesMarketInfoState;
}

export namespace ExpiryFuturesMarketInfoState {
  export type AsObject = {
    marketId: string,
    marketInfo?: injective_exchange_v1beta1_exchange_pb.ExpiryFuturesMarketInfo.AsObject,
  }
}

export class PerpetualMarketFundingState extends jspb.Message {
  getMarketId(): string;
  setMarketId(value: string): void;

  hasFunding(): boolean;
  clearFunding(): void;
  getFunding(): injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding | undefined;
  setFunding(value?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): PerpetualMarketFundingState.AsObject;
  static toObject(includeInstance: boolean, msg: PerpetualMarketFundingState): PerpetualMarketFundingState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: PerpetualMarketFundingState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): PerpetualMarketFundingState;
  static deserializeBinaryFromReader(message: PerpetualMarketFundingState, reader: jspb.BinaryReader): PerpetualMarketFundingState;
}

export namespace PerpetualMarketFundingState {
  export type AsObject = {
    marketId: string,
    funding?: injective_exchange_v1beta1_exchange_pb.PerpetualMarketFunding.AsObject,
  }
}

