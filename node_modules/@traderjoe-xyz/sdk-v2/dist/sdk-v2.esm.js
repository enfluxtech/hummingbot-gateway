import JSBI from 'jsbi';
export { default as JSBI } from 'jsbi';
import { ChainId, Fraction, TradeType, TokenAmount, CurrencyAmount, Price, Percent, WNATIVE } from '@traderjoe-xyz/sdk';
import { parseEther, getAddress, encodeFunctionData } from 'viem';
import flatMap from 'lodash.flatmap';
import invariant from 'tiny-invariant';
import warning from 'tiny-warning';

var LBPair = [
	{
		inputs: [
			{
				internalType: "contract ILBFactory",
				name: "_factory",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "bp",
				type: "uint256"
			}
		],
		name: "BinHelper__BinStepOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BinHelper__IdOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__AddressZero",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__AddressZeroOrThis",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__AlreadyInitialized",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBPair__CompositionFactorFlawed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__DistributionsOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__FlashLoanCallbackFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__FlashLoanTokenNotSupported",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__FlashLoanWrongFee",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__InsufficientAmounts",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBPair__InsufficientLiquidityBurned",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBPair__InsufficientLiquidityMinted",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "newSize",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "oracleSize",
				type: "uint256"
			}
		],
		name: "LBPair__NewSizeTooSmall",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__OnlyFactory",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			},
			{
				internalType: "address",
				name: "sender",
				type: "address"
			}
		],
		name: "LBPair__OnlyFeeRecipient",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__OnlyStrictlyIncreasingId",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__WrongLengths",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "LBToken__BurnExceedsBalance",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__BurnFromAddress0",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "accountsLength",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "idsLength",
				type: "uint256"
			}
		],
		name: "LBToken__LengthMismatch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__MintToAddress0",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__NotSupported",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "LBToken__SelfApproval",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "LBToken__SpenderNotApproved",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "LBToken__TransferExceedsBalance",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__TransferFromOrToAddress0",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__TransferToSelf",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Math128x128__PowerUnderflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "prod1",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "denominator",
				type: "uint256"
			}
		],
		name: "Math512Bits__MulDivOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "prod1",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "offset",
				type: "uint256"
			}
		],
		name: "Math512Bits__MulShiftOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "offset",
				type: "uint256"
			}
		],
		name: "Math512Bits__OffsetOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_minTimestamp",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_lookUpTimestamp",
				type: "uint256"
			}
		],
		name: "Oracle__LookUpTimestampTooOld",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Oracle__NotInitialized",
		type: "error"
	},
	{
		inputs: [
		],
		name: "ReentrancyGuardUpgradeable__AlreadyInitialized",
		type: "error"
	},
	{
		inputs: [
		],
		name: "ReentrancyGuardUpgradeable__ReentrantCall",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds112Bits",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds128Bits",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds24Bits",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds40Bits",
		type: "error"
	},
	{
		inputs: [
		],
		name: "TokenHelper__CallFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "TokenHelper__NonContract",
		type: "error"
	},
	{
		inputs: [
		],
		name: "TokenHelper__TransferFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "TreeMath__ErrorDepthSearch",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "ApprovalForAll",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "Burn",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "feesX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "feesY",
				type: "uint256"
			}
		],
		name: "CompositionFee",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "DepositedToBin",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "FeesCollected",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBFlashLoanCallback",
				name: "receiver",
				type: "address"
			},
			{
				indexed: false,
				internalType: "contract IERC20",
				name: "token",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "fee",
				type: "uint256"
			}
		],
		name: "FlashLoan",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "previousSize",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "newSize",
				type: "uint256"
			}
		],
		name: "OracleSizeIncreased",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "ProtocolFeesCollected",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "volatilityAccumulated",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "fees",
				type: "uint256"
			}
		],
		name: "Swap",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			}
		],
		name: "TransferBatch",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "TransferSingle",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "WithdrawnFromBin",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_account",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_id",
				type: "uint256"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "_accounts",
				type: "address[]"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			}
		],
		name: "balanceOfBatch",
		outputs: [
			{
				internalType: "uint256[]",
				name: "batchBalances",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_amounts",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			}
		],
		name: "burn",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_account",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			}
		],
		name: "collectFees",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "collectProtocolFees",
		outputs: [
			{
				internalType: "uint128",
				name: "amountX",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "amountY",
				type: "uint128"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "factory",
		outputs: [
			{
				internalType: "contract ILBFactory",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "feeParameters",
		outputs: [
			{
				components: [
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "uint16",
						name: "baseFactor",
						type: "uint16"
					},
					{
						internalType: "uint16",
						name: "filterPeriod",
						type: "uint16"
					},
					{
						internalType: "uint16",
						name: "decayPeriod",
						type: "uint16"
					},
					{
						internalType: "uint16",
						name: "reductionFactor",
						type: "uint16"
					},
					{
						internalType: "uint24",
						name: "variableFeeControl",
						type: "uint24"
					},
					{
						internalType: "uint16",
						name: "protocolShare",
						type: "uint16"
					},
					{
						internalType: "uint24",
						name: "maxVolatilityAccumulated",
						type: "uint24"
					},
					{
						internalType: "uint24",
						name: "volatilityAccumulated",
						type: "uint24"
					},
					{
						internalType: "uint24",
						name: "volatilityReference",
						type: "uint24"
					},
					{
						internalType: "uint24",
						name: "indexRef",
						type: "uint24"
					},
					{
						internalType: "uint40",
						name: "time",
						type: "uint40"
					}
				],
				internalType: "struct FeeHelper.FeeParameters",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "_id",
				type: "uint24"
			},
			{
				internalType: "bool",
				name: "_swapForY",
				type: "bool"
			}
		],
		name: "findFirstNonEmptyBinId",
		outputs: [
			{
				internalType: "uint24",
				name: "",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBFlashLoanCallback",
				name: "_receiver",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_token",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_amount",
				type: "uint256"
			},
			{
				internalType: "bytes",
				name: "_data",
				type: "bytes"
			}
		],
		name: "flashLoan",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "forceDecay",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "_id",
				type: "uint24"
			}
		],
		name: "getBin",
		outputs: [
			{
				internalType: "uint256",
				name: "reserveX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "reserveY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getGlobalFees",
		outputs: [
			{
				internalType: "uint128",
				name: "feesXTotal",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "feesYTotal",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "feesXProtocol",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "feesYProtocol",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getOracleParameters",
		outputs: [
			{
				internalType: "uint256",
				name: "oracleSampleLifetime",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "oracleSize",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "oracleActiveSize",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "oracleLastTimestamp",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "oracleId",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "min",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "max",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_timeDelta",
				type: "uint256"
			}
		],
		name: "getOracleSampleFrom",
		outputs: [
			{
				internalType: "uint256",
				name: "cumulativeId",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "cumulativeVolatilityAccumulated",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "cumulativeBinCrossed",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getReservesAndId",
		outputs: [
			{
				internalType: "uint256",
				name: "reserveX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "reserveY",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "activeId",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "_newSize",
				type: "uint16"
			}
		],
		name: "increaseOracleLength",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "_activeId",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "_sampleLifetime",
				type: "uint16"
			},
			{
				internalType: "bytes32",
				name: "_packedFeeParameters",
				type: "bytes32"
			}
		],
		name: "initialize",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "_spender",
				type: "address"
			}
		],
		name: "isApprovedForAll",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_distributionX",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_distributionY",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			}
		],
		name: "mint",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "liquidityMinted",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_account",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			}
		],
		name: "pendingFees",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_from",
				type: "address"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_amounts",
				type: "uint256[]"
			}
		],
		name: "safeBatchTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_from",
				type: "address"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_id",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amount",
				type: "uint256"
			}
		],
		name: "safeTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_spender",
				type: "address"
			},
			{
				internalType: "bool",
				name: "_approved",
				type: "bool"
			}
		],
		name: "setApprovalForAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "_packedFeeParameters",
				type: "bytes32"
			}
		],
		name: "setFeesParameters",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes4",
				name: "_interfaceId",
				type: "bytes4"
			}
		],
		name: "supportsInterface",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "_swapForY",
				type: "bool"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			}
		],
		name: "swap",
		outputs: [
			{
				internalType: "uint256",
				name: "amountXOut",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "tokenX",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "tokenY",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_id",
				type: "uint256"
			}
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var LBFactory = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_feeRecipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_flashLoanFee",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "bp",
				type: "uint256"
			}
		],
		name: "BinHelper__BinStepOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BinHelper__IdOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__AddressZero",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__BinStepHasNoPreset",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "lowerBound",
				type: "uint256"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "higherBound",
				type: "uint256"
			}
		],
		name: "LBFactory__BinStepRequirementsBreached",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			}
		],
		name: "LBFactory__DecreasingPeriods",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__FactoryLockIsAlreadyInTheSameState",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "fees",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "maxFees",
				type: "uint256"
			}
		],
		name: "LBFactory__FeesAboveMax",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "fees",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "maxFees",
				type: "uint256"
			}
		],
		name: "LBFactory__FlashLoanFeeAboveMax",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "LBFactory__FunctionIsLockedForUsers",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "token",
				type: "address"
			}
		],
		name: "LBFactory__IdenticalAddresses",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__ImplementationNotSet",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__LBPairAlreadyExists",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__LBPairNotCreated",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "LBPairImplementation",
				type: "address"
			}
		],
		name: "LBFactory__LBPairSafetyCheckFailed",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "max",
				type: "uint256"
			}
		],
		name: "LBFactory__ProtocolShareOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "LBFactory__QuoteAssetAlreadyWhitelisted",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "LBFactory__QuoteAssetNotWhitelisted",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "max",
				type: "uint256"
			}
		],
		name: "LBFactory__ReductionFactorOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			}
		],
		name: "LBFactory__SameFeeRecipient",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "flashLoanFee",
				type: "uint256"
			}
		],
		name: "LBFactory__SameFlashLoanFee",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "LBPairImplementation",
				type: "address"
			}
		],
		name: "LBFactory__SameImplementation",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Math128x128__PowerUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__AddressZero",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__NoPendingOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__NotOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__NotPendingOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__PendingOwnerAlreadySet",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds16Bits",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "bool",
				name: "unlocked",
				type: "bool"
			}
		],
		name: "FactoryLockedStatusUpdated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "LBPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "baseFactor",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "filterPeriod",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "decayPeriod",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "reductionFactor",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "variableFeeControl",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "protocolShare",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "maxVolatilityAccumulated",
				type: "uint256"
			}
		],
		name: "FeeParametersSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "oldRecipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "newRecipient",
				type: "address"
			}
		],
		name: "FeeRecipientSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "oldFlashLoanFee",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "newFlashLoanFee",
				type: "uint256"
			}
		],
		name: "FlashLoanFeeSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "contract ILBPair",
				name: "LBPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "pid",
				type: "uint256"
			}
		],
		name: "LBPairCreated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "LBPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "ignored",
				type: "bool"
			}
		],
		name: "LBPairIgnoredStateChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "oldLBPairImplementation",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "LBPairImplementation",
				type: "address"
			}
		],
		name: "LBPairImplementationSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "pendingOwner",
				type: "address"
			}
		],
		name: "PendingOwnerSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "PresetRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "baseFactor",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "filterPeriod",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "decayPeriod",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "reductionFactor",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "variableFeeControl",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "protocolShare",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "maxVolatilityAccumulated",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "sampleLifetime",
				type: "uint256"
			}
		],
		name: "PresetSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "QuoteAssetAdded",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "QuoteAssetRemoved",
		type: "event"
	},
	{
		inputs: [
		],
		name: "LBPairImplementation",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MAX_BIN_STEP",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MAX_FEE",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MAX_PROTOCOL_SHARE",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "MIN_BIN_STEP",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_quoteAsset",
				type: "address"
			}
		],
		name: "addQuoteAsset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		name: "allLBPairs",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "becomeOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "_activeId",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			}
		],
		name: "createLBPair",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "_LBPair",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "creationUnlocked",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "feeRecipient",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "flashLoanFee",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "_LBPair",
				type: "address"
			}
		],
		name: "forceDecay",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getAllBinSteps",
		outputs: [
			{
				internalType: "uint256[]",
				name: "presetsBinStep",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			}
		],
		name: "getAllLBPairs",
		outputs: [
			{
				components: [
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "contract ILBPair",
						name: "LBPair",
						type: "address"
					},
					{
						internalType: "bool",
						name: "createdByOwner",
						type: "bool"
					},
					{
						internalType: "bool",
						name: "ignoredForRouting",
						type: "bool"
					}
				],
				internalType: "struct ILBFactory.LBPairInformation[]",
				name: "LBPairsAvailable",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenA",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenB",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_binStep",
				type: "uint256"
			}
		],
		name: "getLBPairInformation",
		outputs: [
			{
				components: [
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "contract ILBPair",
						name: "LBPair",
						type: "address"
					},
					{
						internalType: "bool",
						name: "createdByOwner",
						type: "bool"
					},
					{
						internalType: "bool",
						name: "ignoredForRouting",
						type: "bool"
					}
				],
				internalType: "struct ILBFactory.LBPairInformation",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getNumberOfLBPairs",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getNumberOfQuoteAssets",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			}
		],
		name: "getPreset",
		outputs: [
			{
				internalType: "uint256",
				name: "baseFactor",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "filterPeriod",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "decayPeriod",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "reductionFactor",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "variableFeeControl",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "protocolShare",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "maxVolatilityAccumulated",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "sampleLifetime",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_index",
				type: "uint256"
			}
		],
		name: "getQuoteAsset",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_token",
				type: "address"
			}
		],
		name: "isQuoteAsset",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pendingOwner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			}
		],
		name: "removePreset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_quoteAsset",
				type: "address"
			}
		],
		name: "removeQuoteAsset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "revokePendingOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "_locked",
				type: "bool"
			}
		],
		name: "setFactoryLockedState",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_feeRecipient",
				type: "address"
			}
		],
		name: "setFeeRecipient",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "_variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "_protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "_maxVolatilityAccumulated",
				type: "uint24"
			}
		],
		name: "setFeesParametersOnPair",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_flashLoanFee",
				type: "uint256"
			}
		],
		name: "setFlashLoanFee",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_binStep",
				type: "uint256"
			},
			{
				internalType: "bool",
				name: "_ignored",
				type: "bool"
			}
		],
		name: "setLBPairIgnored",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "_LBPairImplementation",
				type: "address"
			}
		],
		name: "setLBPairImplementation",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "pendingOwner_",
				type: "address"
			}
		],
		name: "setPendingOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "_reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "_variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "_protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "_maxVolatilityAccumulated",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "_sampleLifetime",
				type: "uint16"
			}
		],
		name: "setPreset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var LBRouter = [
	{
		inputs: [
			{
				internalType: "contract ILBFactory",
				name: "_factory",
				type: "address"
			},
			{
				internalType: "contract IJoeFactory",
				name: "_oldFactory",
				type: "address"
			},
			{
				internalType: "contract IWAVAX",
				name: "_wavax",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "bp",
				type: "uint256"
			}
		],
		name: "BinHelper__BinStepOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "int256",
				name: "id",
				type: "int256"
			}
		],
		name: "BinHelper__IdOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "BinHelper__IntOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountXMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "LBRouter__AmountSlippageCaught",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBRouter__BinReserveOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__BrokenSwapSafetyCheck",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "currentTimestamp",
				type: "uint256"
			}
		],
		name: "LBRouter__DeadlineExceeded",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "LBRouter__FailedToSendAVAX",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "idDesired",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "idSlippage",
				type: "uint256"
			}
		],
		name: "LBRouter__IdDesiredOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "int256",
				name: "id",
				type: "int256"
			}
		],
		name: "LBRouter__IdOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "activeIdDesired",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "idSlippage",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "activeId",
				type: "uint256"
			}
		],
		name: "LBRouter__IdSlippageCaught",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountOutMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		name: "LBRouter__InsufficientAmountOut",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "wrongToken",
				type: "address"
			}
		],
		name: "LBRouter__InvalidTokenPath",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__LengthsMismatch",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountInMax",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			}
		],
		name: "LBRouter__MaxAmountInExceeded",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__NotFactoryOwner",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBRouter__PairNotCreated",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__SenderIsNotWAVAX",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBRouter__SwapOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "excess",
				type: "uint256"
			}
		],
		name: "LBRouter__TooMuchTokensIn",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "reserve",
				type: "uint256"
			}
		],
		name: "LBRouter__WrongAmounts",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "msgValue",
				type: "uint256"
			}
		],
		name: "LBRouter__WrongAvaxLiquidityParameters",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__WrongTokenOrder",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Math128x128__LogUnderflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Math128x128__PowerUnderflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "prod1",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "denominator",
				type: "uint256"
			}
		],
		name: "Math512Bits__MulDivOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "prod1",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "offset",
				type: "uint256"
			}
		],
		name: "Math512Bits__MulShiftOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "offset",
				type: "uint256"
			}
		],
		name: "Math512Bits__OffsetOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds128Bits",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			}
		],
		name: "SafeCast__Exceeds40Bits",
		type: "error"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "binStep",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountX",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountY",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountXMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountYMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "activeIdDesired",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "idSlippage",
						type: "uint256"
					},
					{
						internalType: "int256[]",
						name: "deltaIds",
						type: "int256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionX",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionY",
						type: "uint256[]"
					},
					{
						internalType: "address",
						name: "to",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "deadline",
						type: "uint256"
					}
				],
				internalType: "struct ILBRouter.LiquidityParameters",
				name: "_liquidityParameters",
				type: "tuple"
			}
		],
		name: "addLiquidity",
		outputs: [
			{
				internalType: "uint256[]",
				name: "depositIds",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "liquidityMinted",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "binStep",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountX",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountY",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountXMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountYMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "activeIdDesired",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "idSlippage",
						type: "uint256"
					},
					{
						internalType: "int256[]",
						name: "deltaIds",
						type: "int256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionX",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionY",
						type: "uint256[]"
					},
					{
						internalType: "address",
						name: "to",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "deadline",
						type: "uint256"
					}
				],
				internalType: "struct ILBRouter.LiquidityParameters",
				name: "_liquidityParameters",
				type: "tuple"
			}
		],
		name: "addLiquidityAVAX",
		outputs: [
			{
				internalType: "uint256[]",
				name: "depositIds",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "liquidityMinted",
				type: "uint256[]"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "_activeId",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			}
		],
		name: "createLBPair",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "factory",
		outputs: [
			{
				internalType: "contract ILBFactory",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "_LBPair",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_price",
				type: "uint256"
			}
		],
		name: "getIdFromPrice",
		outputs: [
			{
				internalType: "uint24",
				name: "",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "_LBPair",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "_id",
				type: "uint24"
			}
		],
		name: "getPriceFromId",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "_LBPair",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_amountOut",
				type: "uint256"
			},
			{
				internalType: "bool",
				name: "_swapForY",
				type: "bool"
			}
		],
		name: "getSwapIn",
		outputs: [
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "feesIn",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "_LBPair",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_amountIn",
				type: "uint256"
			},
			{
				internalType: "bool",
				name: "_swapForY",
				type: "bool"
			}
		],
		name: "getSwapOut",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "feesIn",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "oldFactory",
		outputs: [
			{
				internalType: "contract IJoeFactory",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "_tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "_amountXMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountYMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_amounts",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "removeLiquidity",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_token",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "_binStep",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "_amountTokenMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountAVAXMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_amounts",
				type: "uint256[]"
			},
			{
				internalType: "address payable",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "removeLiquidityAVAX",
		outputs: [
			{
				internalType: "uint256",
				name: "amountToken",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountAVAX",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountOut",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapAVAXForExactTokens",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsIn",
				type: "uint256[]"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountOutMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapExactAVAXForTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountOutMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapExactAVAXForTokensSupportingFeeOnTransferTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountOutMinAVAX",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address payable",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForAVAX",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountOutMinAVAX",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address payable",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForAVAXSupportingFeeOnTransferTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountOutMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountOutMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountAVAXOut",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountInMax",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address payable",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapTokensForExactAVAX",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsIn",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "_amountOut",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "_amountInMax",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "_pairBinSteps",
				type: "uint256[]"
			},
			{
				internalType: "contract IERC20[]",
				name: "_tokenPath",
				type: "address[]"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_deadline",
				type: "uint256"
			}
		],
		name: "swapTokensForExactTokens",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsIn",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "_token",
				type: "address"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_amount",
				type: "uint256"
			}
		],
		name: "sweep",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBToken",
				name: "_lbToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "_to",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "_ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "_amounts",
				type: "uint256[]"
			}
		],
		name: "sweepLBToken",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "wavax",
		outputs: [
			{
				internalType: "contract IWAVAX",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		stateMutability: "payable",
		type: "receive"
	}
];

var LBRouterV21 = [
	{
		inputs: [
			{
				internalType: "contract ILBFactory",
				name: "factory",
				type: "address"
			},
			{
				internalType: "contract IJoeFactory",
				name: "factoryV1",
				type: "address"
			},
			{
				internalType: "contract ILBLegacyFactory",
				name: "legacyFactory",
				type: "address"
			},
			{
				internalType: "contract ILBLegacyRouter",
				name: "legacyRouter",
				type: "address"
			},
			{
				internalType: "contract IWNATIVE",
				name: "wnative",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "AddressHelper__CallFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "AddressHelper__NonContract",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__InsufficientAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__InsufficientLiquidity",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountSlippage",
				type: "uint256"
			}
		],
		name: "LBRouter__AmountSlippageBPTooBig",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountXMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "LBRouter__AmountSlippageCaught",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBRouter__BinReserveOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__BrokenSwapSafetyCheck",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "currentTimestamp",
				type: "uint256"
			}
		],
		name: "LBRouter__DeadlineExceeded",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "LBRouter__FailedToSendNATIVE",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "idDesired",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "idSlippage",
				type: "uint256"
			}
		],
		name: "LBRouter__IdDesiredOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "int256",
				name: "id",
				type: "int256"
			}
		],
		name: "LBRouter__IdOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "activeIdDesired",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "idSlippage",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "activeId",
				type: "uint256"
			}
		],
		name: "LBRouter__IdSlippageCaught",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountOutMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		name: "LBRouter__InsufficientAmountOut",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "wrongToken",
				type: "address"
			}
		],
		name: "LBRouter__InvalidTokenPath",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "version",
				type: "uint256"
			}
		],
		name: "LBRouter__InvalidVersion",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__LengthsMismatch",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountInMax",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			}
		],
		name: "LBRouter__MaxAmountInExceeded",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__NotFactoryOwner",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "address",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBRouter__PairNotCreated",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__SenderIsNotWNATIVE",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "LBRouter__SwapOverflows",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "excess",
				type: "uint256"
			}
		],
		name: "LBRouter__TooMuchTokensIn",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "reserve",
				type: "uint256"
			}
		],
		name: "LBRouter__WrongAmounts",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "address",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "msgValue",
				type: "uint256"
			}
		],
		name: "LBRouter__WrongNativeLiquidityParameters",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBRouter__WrongTokenOrder",
		type: "error"
	},
	{
		inputs: [
		],
		name: "TokenHelper__TransferFailed",
		type: "error"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "binStep",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountX",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountY",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountXMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountYMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "activeIdDesired",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "idSlippage",
						type: "uint256"
					},
					{
						internalType: "int256[]",
						name: "deltaIds",
						type: "int256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionX",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionY",
						type: "uint256[]"
					},
					{
						internalType: "address",
						name: "to",
						type: "address"
					},
					{
						internalType: "address",
						name: "refundTo",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "deadline",
						type: "uint256"
					}
				],
				internalType: "struct ILBRouter.LiquidityParameters",
				name: "liquidityParameters",
				type: "tuple"
			}
		],
		name: "addLiquidity",
		outputs: [
			{
				internalType: "uint256",
				name: "amountXAdded",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYAdded",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountXLeft",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYLeft",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "depositIds",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "liquidityMinted",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "binStep",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountX",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountY",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountXMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "amountYMin",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "activeIdDesired",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "idSlippage",
						type: "uint256"
					},
					{
						internalType: "int256[]",
						name: "deltaIds",
						type: "int256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionX",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "distributionY",
						type: "uint256[]"
					},
					{
						internalType: "address",
						name: "to",
						type: "address"
					},
					{
						internalType: "address",
						name: "refundTo",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "deadline",
						type: "uint256"
					}
				],
				internalType: "struct ILBRouter.LiquidityParameters",
				name: "liquidityParameters",
				type: "tuple"
			}
		],
		name: "addLiquidityNATIVE",
		outputs: [
			{
				internalType: "uint256",
				name: "amountXAdded",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYAdded",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountXLeft",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYLeft",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "depositIds",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "liquidityMinted",
				type: "uint256[]"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "activeId",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			}
		],
		name: "createLBPair",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactory",
		outputs: [
			{
				internalType: "contract ILBFactory",
				name: "lbFactory",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		name: "getIdFromPrice",
		outputs: [
			{
				internalType: "uint24",
				name: "",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLegacyFactory",
		outputs: [
			{
				internalType: "contract ILBLegacyFactory",
				name: "legacyLBfactory",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLegacyRouter",
		outputs: [
			{
				internalType: "contract ILBLegacyRouter",
				name: "legacyRouter",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "getPriceFromId",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			},
			{
				internalType: "uint128",
				name: "amountOut",
				type: "uint128"
			},
			{
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			}
		],
		name: "getSwapIn",
		outputs: [
			{
				internalType: "uint128",
				name: "amountIn",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "amountOutLeft",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "fee",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			},
			{
				internalType: "uint128",
				name: "amountIn",
				type: "uint128"
			},
			{
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			}
		],
		name: "getSwapOut",
		outputs: [
			{
				internalType: "uint128",
				name: "amountInLeft",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "amountOut",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "fee",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getV1Factory",
		outputs: [
			{
				internalType: "contract IJoeFactory",
				name: "factoryV1",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getWNATIVE",
		outputs: [
			{
				internalType: "contract IWNATIVE",
				name: "wnative",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "amountXMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountYMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "removeLiquidity",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "token",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "uint256",
				name: "amountTokenMin",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountNATIVEMin",
				type: "uint256"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			},
			{
				internalType: "address payable",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "removeLiquidityNATIVE",
		outputs: [
			{
				internalType: "uint256",
				name: "amountToken",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountNATIVE",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountOutMin",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapExactNATIVEForTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountOutMin",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountOutMinNATIVE",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address payable",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForNATIVE",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountOutMinNATIVE",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address payable",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountOutMin",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountIn",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountOutMin",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
		outputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapNATIVEForExactTokens",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsIn",
				type: "uint256[]"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountNATIVEOut",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountInMax",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address payable",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapTokensForExactNATIVE",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsIn",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountOut",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountInMax",
				type: "uint256"
			},
			{
				components: [
					{
						internalType: "uint256[]",
						name: "pairBinSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "contract IERC20[]",
						name: "tokenPath",
						type: "address[]"
					}
				],
				internalType: "struct ILBRouter.Path",
				name: "path",
				type: "tuple"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "deadline",
				type: "uint256"
			}
		],
		name: "swapTokensForExactTokens",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsIn",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "sweep",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBToken",
				name: "lbToken",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			}
		],
		name: "sweepLBToken",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		stateMutability: "payable",
		type: "receive"
	}
];

var DexLens = [
	{
		inputs: [
			{
				internalType: "contract ILBFactory",
				name: "lbFactory",
				type: "address"
			},
			{
				internalType: "contract ILBLegacyFactory",
				name: "lbLegacyFactory",
				type: "address"
			},
			{
				internalType: "contract IJoeFactory",
				name: "joeFactory",
				type: "address"
			},
			{
				internalType: "address",
				name: "wnative",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__AlreadyInitialized",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "pair",
				type: "address"
			},
			{
				internalType: "address",
				name: "collateral",
				type: "address"
			}
		],
		name: "JoeDexLens__CollateralNotInPair",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "dataFeed",
				type: "address"
			}
		],
		name: "JoeDexLens__DataFeedAlreadyAdded",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "dataFeed",
				type: "address"
			}
		],
		name: "JoeDexLens__DataFeedNotInSet",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__InvalidChainLinkPrice",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__InvalidDataFeed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__LengthsMismatch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__NativeToken",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__NullWeight",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__SameDataFeed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__SameTokens",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "pair",
				type: "address"
			},
			{
				internalType: "address",
				name: "token",
				type: "address"
			}
		],
		name: "JoeDexLens__TokenNotInPair",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__UnknownDataFeedType",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__V1ContractNotSet",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__V2ContractNotSet",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__V2_1ContractNotSet",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeDexLens__ZeroAddress",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "SafeAccessControlEnumerable__AccountAlreadyHasRole",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "SafeAccessControlEnumerable__AccountDoesNotHaveRole",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "SafeAccessControlEnumerable__OnlyOwnerOrRole",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "SafeAccessControlEnumerable__OnlyRole",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "SafeAccessControlEnumerable__RoleAlreadyGranted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeOwnable__OnlyOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeOwnable__OnlyPendingOwner",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Uint128x128Math__PowUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulShiftOverflow",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				components: [
					{
						internalType: "address",
						name: "collateralAddress",
						type: "address"
					},
					{
						internalType: "address",
						name: "dfAddress",
						type: "address"
					},
					{
						internalType: "uint88",
						name: "dfWeight",
						type: "uint88"
					},
					{
						internalType: "enum IJoeDexLens.DataFeedType",
						name: "dfType",
						type: "uint8"
					}
				],
				indexed: false,
				internalType: "struct IJoeDexLens.DataFeed",
				name: "dataFeed",
				type: "tuple"
			}
		],
		name: "DataFeedAdded",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "dfAddress",
				type: "address"
			}
		],
		name: "DataFeedRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "dfAddress",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "weight",
				type: "uint256"
			}
		],
		name: "DataFeedsWeightSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "dfAddress",
				type: "address"
			}
		],
		name: "NativeDataFeedSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "pendingOwner",
				type: "address"
			}
		],
		name: "PendingOwnerSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "adminRole",
				type: "bytes32"
			}
		],
		name: "RoleAdminSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "RoleGranted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "RoleRevoked",
		type: "event"
	},
	{
		inputs: [
		],
		name: "DATA_FEED_MANAGER_ROLE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "DEFAULT_ADMIN_ROLE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				components: [
					{
						internalType: "address",
						name: "collateralAddress",
						type: "address"
					},
					{
						internalType: "address",
						name: "dfAddress",
						type: "address"
					},
					{
						internalType: "uint88",
						name: "dfWeight",
						type: "uint88"
					},
					{
						internalType: "enum IJoeDexLens.DataFeedType",
						name: "dfType",
						type: "uint8"
					}
				],
				internalType: "struct IJoeDexLens.DataFeed",
				name: "dataFeed",
				type: "tuple"
			}
		],
		name: "addDataFeed",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "tokens",
				type: "address[]"
			},
			{
				components: [
					{
						internalType: "address",
						name: "collateralAddress",
						type: "address"
					},
					{
						internalType: "address",
						name: "dfAddress",
						type: "address"
					},
					{
						internalType: "uint88",
						name: "dfWeight",
						type: "uint88"
					},
					{
						internalType: "enum IJoeDexLens.DataFeedType",
						name: "dfType",
						type: "uint8"
					}
				],
				internalType: "struct IJoeDexLens.DataFeed[]",
				name: "dataFeeds",
				type: "tuple[]"
			}
		],
		name: "addDataFeeds",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "becomeOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			}
		],
		name: "getDataFeeds",
		outputs: [
			{
				components: [
					{
						internalType: "address",
						name: "collateralAddress",
						type: "address"
					},
					{
						internalType: "address",
						name: "dfAddress",
						type: "address"
					},
					{
						internalType: "uint88",
						name: "dfWeight",
						type: "uint88"
					},
					{
						internalType: "enum IJoeDexLens.DataFeedType",
						name: "dfType",
						type: "uint8"
					}
				],
				internalType: "struct IJoeDexLens.DataFeed[]",
				name: "dataFeeds",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactoryV1",
		outputs: [
			{
				internalType: "contract IJoeFactory",
				name: "factoryV1",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactoryV2_1",
		outputs: [
			{
				internalType: "contract ILBFactory",
				name: "factoryV2",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLegacyFactoryV2",
		outputs: [
			{
				internalType: "contract ILBLegacyFactory",
				name: "legacyFactoryV2",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "getRoleAdmin",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			}
		],
		name: "getRoleMemberAt",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "getRoleMemberCount",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			}
		],
		name: "getTokenPriceNative",
		outputs: [
			{
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			}
		],
		name: "getTokenPriceUSD",
		outputs: [
			{
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "tokens",
				type: "address[]"
			}
		],
		name: "getTokensPricesNative",
		outputs: [
			{
				internalType: "uint256[]",
				name: "prices",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "tokens",
				type: "address[]"
			}
		],
		name: "getTokensPricesUSD",
		outputs: [
			{
				internalType: "uint256[]",
				name: "prices",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getWNative",
		outputs: [
			{
				internalType: "address",
				name: "wNative",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "grantRole",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "hasRole",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "aggregator",
				type: "address"
			}
		],
		name: "initialize",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pendingOwner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "dfAddress",
				type: "address"
			}
		],
		name: "removeDataFeed",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "tokens",
				type: "address[]"
			},
			{
				internalType: "address[]",
				name: "dfAddresses",
				type: "address[]"
			}
		],
		name: "removeDataFeeds",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "renounceRole",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "revokeRole",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "dfAddress",
				type: "address"
			},
			{
				internalType: "uint88",
				name: "newWeight",
				type: "uint88"
			}
		],
		name: "setDataFeedWeight",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "tokens",
				type: "address[]"
			},
			{
				internalType: "address[]",
				name: "dfAddresses",
				type: "address[]"
			},
			{
				internalType: "uint88[]",
				name: "newWeights",
				type: "uint88[]"
			}
		],
		name: "setDataFeedsWeights",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "aggregator",
				type: "address"
			}
		],
		name: "setNativeDataFeed",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "setPendingOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var LBQuoter = [
	{
		inputs: [
			{
				internalType: "address",
				name: "_routerV2",
				type: "address"
			},
			{
				internalType: "address",
				name: "_factoryV1",
				type: "address"
			},
			{
				internalType: "address",
				name: "_factoryV2",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "bp",
				type: "uint256"
			}
		],
		name: "BinHelper__BinStepOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BinHelper__IdOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__AddressZero",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__IdenticalAddresses",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__InsufficientAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__InsufficientLiquidity",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBQuoter_InvalidLength",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Math128x128__PowerUnderflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "prod1",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "denominator",
				type: "uint256"
			}
		],
		name: "Math512Bits__MulDivOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "prod1",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "offset",
				type: "uint256"
			}
		],
		name: "Math512Bits__MulShiftOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "offset",
				type: "uint256"
			}
		],
		name: "Math512Bits__OffsetOverflows",
		type: "error"
	},
	{
		inputs: [
		],
		name: "factoryV1",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "factoryV2",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "_route",
				type: "address[]"
			},
			{
				internalType: "uint256",
				name: "_amountIn",
				type: "uint256"
			}
		],
		name: "findBestPathFromAmountIn",
		outputs: [
			{
				components: [
					{
						internalType: "address[]",
						name: "route",
						type: "address[]"
					},
					{
						internalType: "address[]",
						name: "pairs",
						type: "address[]"
					},
					{
						internalType: "uint256[]",
						name: "binSteps",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "amounts",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "virtualAmountsWithoutSlippage",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "fees",
						type: "uint256[]"
					}
				],
				internalType: "struct LBQuoter.Quote",
				name: "quote",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "_route",
				type: "address[]"
			},
			{
				internalType: "uint256",
				name: "_amountOut",
				type: "uint256"
			}
		],
		name: "findBestPathFromAmountOut",
		outputs: [
			{
				components: [
					{
						internalType: "address[]",
						name: "route",
						type: "address[]"
					},
					{
						internalType: "address[]",
						name: "pairs",
						type: "address[]"
					},
					{
						internalType: "uint256[]",
						name: "binSteps",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "amounts",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "virtualAmountsWithoutSlippage",
						type: "uint256[]"
					},
					{
						internalType: "uint256[]",
						name: "fees",
						type: "uint256[]"
					}
				],
				internalType: "struct LBQuoter.Quote",
				name: "quote",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "routerV2",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var LBQuoterV21 = [
	{
		inputs: [
			{
				internalType: "address",
				name: "factoryV1",
				type: "address"
			},
			{
				internalType: "address",
				name: "legacyFactoryV2",
				type: "address"
			},
			{
				internalType: "address",
				name: "factoryV2",
				type: "address"
			},
			{
				internalType: "address",
				name: "legacyRouterV2",
				type: "address"
			},
			{
				internalType: "address",
				name: "routerV2",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__AddressZero",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__IdenticalAddresses",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__InsufficientAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "JoeLibrary__InsufficientLiquidity",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBQuoter_InvalidLength",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Uint128x128Math__PowUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulDivOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulShiftOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "route",
				type: "address[]"
			},
			{
				internalType: "uint128",
				name: "amountIn",
				type: "uint128"
			}
		],
		name: "findBestPathFromAmountIn",
		outputs: [
			{
				components: [
					{
						internalType: "address[]",
						name: "route",
						type: "address[]"
					},
					{
						internalType: "address[]",
						name: "pairs",
						type: "address[]"
					},
					{
						internalType: "uint256[]",
						name: "binSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "uint128[]",
						name: "amounts",
						type: "uint128[]"
					},
					{
						internalType: "uint128[]",
						name: "virtualAmountsWithoutSlippage",
						type: "uint128[]"
					},
					{
						internalType: "uint128[]",
						name: "fees",
						type: "uint128[]"
					}
				],
				internalType: "struct LBQuoter.Quote",
				name: "quote",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "route",
				type: "address[]"
			},
			{
				internalType: "uint128",
				name: "amountOut",
				type: "uint128"
			}
		],
		name: "findBestPathFromAmountOut",
		outputs: [
			{
				components: [
					{
						internalType: "address[]",
						name: "route",
						type: "address[]"
					},
					{
						internalType: "address[]",
						name: "pairs",
						type: "address[]"
					},
					{
						internalType: "uint256[]",
						name: "binSteps",
						type: "uint256[]"
					},
					{
						internalType: "enum ILBRouter.Version[]",
						name: "versions",
						type: "uint8[]"
					},
					{
						internalType: "uint128[]",
						name: "amounts",
						type: "uint128[]"
					},
					{
						internalType: "uint128[]",
						name: "virtualAmountsWithoutSlippage",
						type: "uint128[]"
					},
					{
						internalType: "uint128[]",
						name: "fees",
						type: "uint128[]"
					}
				],
				internalType: "struct LBQuoter.Quote",
				name: "quote",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactoryV1",
		outputs: [
			{
				internalType: "address",
				name: "factoryV1",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactoryV2",
		outputs: [
			{
				internalType: "address",
				name: "factoryV2",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLegacyFactoryV2",
		outputs: [
			{
				internalType: "address",
				name: "legacyFactoryV2",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLegacyRouterV2",
		outputs: [
			{
				internalType: "address",
				name: "legacyRouterV2",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getRouterV2",
		outputs: [
			{
				internalType: "address",
				name: "routerV2",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var LBRewarder = [
	{
		inputs: [
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			}
		],
		name: "Rewarder__AlreadySetForEpoch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__ClawbackDelayNotPassed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__ClawbackDelayTooLow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__EmptyMerkleEntries",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__EpochCanceled",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__EpochDoesNotExist",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			}
		],
		name: "Rewarder__InsufficientBalance",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__InvalidAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__InvalidEpoch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__InvalidLength",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__InvalidProof",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__InvalidRoot",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__InvalidStart",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__MarketAlreadyWhitelisted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__MarketNotWhitelisted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__NativeTransferFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__OnlyClaimForSelf",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__OnlyValidLatestEpoch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__OverlappingEpoch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Rewarder__ZeroAddress",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeAccessControl__DefaultAdminRoleBoundToOwner",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "SafeAccessControl__OnlyOwnerOrRole",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint96",
				name: "newClawbackDelay",
				type: "uint96"
			}
		],
		name: "ClawbackDelayUpdated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "newClawbackRecipient",
				type: "address"
			}
		],
		name: "ClawbackRecipientUpdated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint128",
				name: "start",
				type: "uint128"
			},
			{
				indexed: false,
				internalType: "uint128",
				name: "duration",
				type: "uint128"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "root",
				type: "bytes32"
			}
		],
		name: "EpochAdded",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			}
		],
		name: "EpochCanceled",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint8",
				name: "version",
				type: "uint8"
			}
		],
		name: "Initialized",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		name: "MarketAddedToWhitelist",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		name: "MarketRemovedFromWhitelist",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferStarted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Paused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "released",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "unreleased",
				type: "uint256"
			}
		],
		name: "RewardClaimed",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "clawbackAmount",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "sender",
				type: "address"
			}
		],
		name: "RewardClawedBack",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "previousAdminRole",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "bytes32",
				name: "newAdminRole",
				type: "bytes32"
			}
		],
		name: "RoleAdminChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			}
		],
		name: "RoleGranted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			}
		],
		name: "RoleRevoked",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "Unpaused",
		type: "event"
	},
	{
		inputs: [
		],
		name: "CLAWBACK_ROLE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "DEFAULT_ADMIN_ROLE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "PAUSER_ROLE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "UNPAUSER_ROLE",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "acceptOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		name: "addMarketToWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "address",
						name: "market",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "epoch",
						type: "uint256"
					},
					{
						internalType: "contract IERC20Upgradeable",
						name: "token",
						type: "address"
					},
					{
						internalType: "address",
						name: "user",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "bytes32[]",
						name: "merkleProof",
						type: "bytes32[]"
					}
				],
				internalType: "struct IRewarder.MerkleEntry[]",
				name: "merkleEntries",
				type: "tuple[]"
			}
		],
		name: "batchClaim",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "address",
						name: "market",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "epoch",
						type: "uint256"
					},
					{
						internalType: "contract IERC20Upgradeable",
						name: "token",
						type: "address"
					},
					{
						internalType: "address",
						name: "user",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "bytes32[]",
						name: "merkleProof",
						type: "bytes32[]"
					}
				],
				internalType: "struct IRewarder.MerkleEntry[]",
				name: "merkleEntries",
				type: "tuple[]"
			}
		],
		name: "batchClawback",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			}
		],
		name: "cancelEpoch",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "claim",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "clawback",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "address",
						name: "market",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "epoch",
						type: "uint256"
					},
					{
						internalType: "contract IERC20Upgradeable",
						name: "token",
						type: "address"
					},
					{
						internalType: "address",
						name: "user",
						type: "address"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					},
					{
						internalType: "bytes32[]",
						name: "merkleProof",
						type: "bytes32[]"
					}
				],
				internalType: "struct IRewarder.MerkleEntry[]",
				name: "merkleEntries",
				type: "tuple[]"
			}
		],
		name: "getBatchReleasableAmounts",
		outputs: [
			{
				internalType: "uint256[]",
				name: "releasableAmounts",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getClawbackParameters",
		outputs: [
			{
				internalType: "address",
				name: "clawbackRecipient",
				type: "address"
			},
			{
				internalType: "uint96",
				name: "clawbackDelay",
				type: "uint96"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			}
		],
		name: "getEpochParameters",
		outputs: [
			{
				components: [
					{
						internalType: "bytes32",
						name: "root",
						type: "bytes32"
					},
					{
						internalType: "uint128",
						name: "start",
						type: "uint128"
					},
					{
						internalType: "uint128",
						name: "duration",
						type: "uint128"
					}
				],
				internalType: "struct IRewarder.EpochParameters",
				name: "params",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		name: "getNumberOfEpochs",
		outputs: [
			{
				internalType: "uint256",
				name: "epochs",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getNumberOfWhitelistedMarkets",
		outputs: [
			{
				internalType: "uint256",
				name: "count",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "getReleasableAmount",
		outputs: [
			{
				internalType: "uint256",
				name: "releasable",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "getReleased",
		outputs: [
			{
				internalType: "uint256",
				name: "released",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			}
		],
		name: "getRoleAdmin",
		outputs: [
			{
				internalType: "bytes32",
				name: "",
				type: "bytes32"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			}
		],
		name: "getWhitelistedMarket",
		outputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "grantRole",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "hasRole",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint96",
				name: "clawbackDelay",
				type: "uint96"
			}
		],
		name: "initialize",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		name: "isMarketWhitelisted",
		outputs: [
			{
				internalType: "bool",
				name: "isWhitelisted",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pause",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "paused",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pendingOwner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			}
		],
		name: "removeMarketFromWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "renounceRole",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes32",
				name: "role",
				type: "bytes32"
			},
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "revokeRole",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint96",
				name: "newClawbackDelay",
				type: "uint96"
			}
		],
		name: "setClawbackDelay",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newRecipient",
				type: "address"
			}
		],
		name: "setClawbackRecipient",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				internalType: "uint128",
				name: "start",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "duration",
				type: "uint128"
			},
			{
				internalType: "contract IERC20Upgradeable[]",
				name: "tokens",
				type: "address[]"
			},
			{
				internalType: "uint256[]",
				name: "totalAmountToRelease",
				type: "uint256[]"
			},
			{
				internalType: "bytes32",
				name: "root",
				type: "bytes32"
			}
		],
		name: "setNewEpoch",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bytes4",
				name: "interfaceId",
				type: "bytes4"
			}
		],
		name: "supportsInterface",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "unpause",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "market",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "epoch",
				type: "uint256"
			},
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			},
			{
				internalType: "bytes32[]",
				name: "merkleProof",
				type: "bytes32[]"
			}
		],
		name: "verify",
		outputs: [
			{
				internalType: "bool",
				name: "isValid",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		stateMutability: "payable",
		type: "receive"
	}
];

var Vault = [
	{
		inputs: [
			{
				internalType: "contract IVaultFactory",
				name: "factory",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "BaseVault__AlreadyWhitelisted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__BurnMinShares",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__DepositsPaused",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__InvalidNativeAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__InvalidRecipient",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__InvalidRound",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__InvalidShares",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__InvalidStrategy",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__InvalidToken",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__MaxSharesExceeded",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__NativeTransferFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__NoNativeToken",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__NoQueuedWithdrawal",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__NotInEmergencyMode",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "BaseVault__NotWhitelisted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__OnlyFactory",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__OnlyStrategy",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__OnlyWNative",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__SameStrategy",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__SameWhitelistState",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__Unauthorized",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__ZeroAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BaseVault__ZeroShares",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SimpleVault__AmountsOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SimpleVault__ZeroCross",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulDivOverflow",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Approval",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		name: "Deposited",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
		],
		name: "DepositsPaused",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
		],
		name: "DepositsResumed",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
		],
		name: "EmergencyMode",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "EmergencyWithdrawal",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint8",
				name: "version",
				type: "uint8"
			}
		],
		name: "Initialized",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "token",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "Recovered",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "contract IStrategy",
				name: "strategy",
				type: "address"
			}
		],
		name: "StrategySet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "value",
				type: "uint256"
			}
		],
		name: "Transfer",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "WhitelistAdded",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "WhitelistRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "bool",
				name: "state",
				type: "bool"
			}
		],
		name: "WhitelistStateChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		name: "WithdrawalCancelled",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "totalQueuedQhares",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "WithdrawalExecuted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		name: "WithdrawalQueued",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "WithdrawalRedeemed",
		type: "event"
	},
	{
		stateMutability: "payable",
		type: "fallback"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "addToWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "allowance",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "approve",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		name: "cancelQueuedWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "decimals",
		outputs: [
			{
				internalType: "uint8",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "subtractedValue",
				type: "uint256"
			}
		],
		name: "decreaseAllowance",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "deposit",
		outputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "effectiveX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "effectiveY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "depositNative",
		outputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "effectiveX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "effectiveY",
				type: "uint256"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "emergencyWithdraw",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "executeQueuedWithdrawals",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getAumAnnualFee",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getBalances",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getCurrentRound",
		outputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getCurrentTotalQueuedWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "totalQueuedShares",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactory",
		outputs: [
			{
				internalType: "contract IVaultFactory",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getOperators",
		outputs: [
			{
				internalType: "address",
				name: "defaultOperator",
				type: "address"
			},
			{
				internalType: "address",
				name: "operator",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getPair",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "",
				type: "address"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "getQueuedWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getRange",
		outputs: [
			{
				internalType: "uint24",
				name: "low",
				type: "uint24"
			},
			{
				internalType: "uint24",
				name: "upper",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "getRedeemableAmounts",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getStrategy",
		outputs: [
			{
				internalType: "contract IStrategy",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getTokenX",
		outputs: [
			{
				internalType: "contract IERC20Upgradeable",
				name: "",
				type: "address"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getTokenY",
		outputs: [
			{
				internalType: "contract IERC20Upgradeable",
				name: "",
				type: "address"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			}
		],
		name: "getTotalQueuedWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "totalQueuedShares",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "addedValue",
				type: "uint256"
			}
		],
		name: "increaseAllowance",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "string",
				name: "name",
				type: "string"
			},
			{
				internalType: "string",
				name: "symbol",
				type: "string"
			}
		],
		name: "initialize",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "isDepositsPaused",
		outputs: [
			{
				internalType: "bool",
				name: "paused",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "isWhitelisted",
		outputs: [
			{
				internalType: "bool",
				name: "whitelisted",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "isWhitelistedOnly",
		outputs: [
			{
				internalType: "bool",
				name: "whitelist",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pauseDeposits",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			}
		],
		name: "previewAmounts",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "previewShares",
		outputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "effectiveX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "effectiveY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "shares",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			}
		],
		name: "queueWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "recoverERC20",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			}
		],
		name: "redeemQueuedWithdrawal",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "round",
				type: "uint256"
			},
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			}
		],
		name: "redeemQueuedWithdrawalNative",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "removeFromWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "resumeDeposits",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "setEmergencyMode",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IStrategy",
				name: "newStrategy",
				type: "address"
			}
		],
		name: "setStrategy",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "state",
				type: "bool"
			}
		],
		name: "setWhitelistState",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "transfer",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "transferFrom",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		stateMutability: "payable",
		type: "receive"
	}
];

var VaultFactory = [
	{
		inputs: [
			{
				internalType: "address",
				name: "wnative",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidDecimals",
		type: "error"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidFeeRecipient",
		type: "error"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidLength",
		type: "error"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidOraclePrice",
		type: "error"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidStrategy",
		type: "error"
	},
	{
		inputs: [
		],
		name: "VaultFactory__InvalidType",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			}
		],
		name: "VaultFactory__StrategyImplementationNotSet",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			}
		],
		name: "VaultFactory__VaultImplementationNotSet",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "defaultOperator",
				type: "address"
			}
		],
		name: "DefaultOperatorSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			}
		],
		name: "FeeRecipientSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint8",
				name: "version",
				type: "uint8"
			}
		],
		name: "Initialized",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferStarted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			},
			{
				indexed: true,
				internalType: "address",
				name: "strategy",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "vault",
				type: "address"
			},
			{
				indexed: false,
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "strategyIndex",
				type: "uint256"
			}
		],
		name: "StrategyCreated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			},
			{
				indexed: true,
				internalType: "address",
				name: "strategyImplementation",
				type: "address"
			}
		],
		name: "StrategyImplementationSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			},
			{
				indexed: true,
				internalType: "address",
				name: "vault",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "vaultIndex",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "address",
				name: "tokenX",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "tokenY",
				type: "address"
			}
		],
		name: "VaultCreated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			},
			{
				indexed: true,
				internalType: "address",
				name: "vaultImplementation",
				type: "address"
			}
		],
		name: "VaultImplementationSet",
		type: "event"
	},
	{
		inputs: [
		],
		name: "acceptOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			},
			{
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "addToWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "vaults",
				type: "address[]"
			},
			{
				internalType: "uint256[]",
				name: "rounds",
				type: "uint256[]"
			},
			{
				internalType: "bool[]",
				name: "withdrawNative",
				type: "bool[]"
			}
		],
		name: "batchRedeemQueuedWithdrawals",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			}
		],
		name: "createDefaultStrategy",
		outputs: [
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				internalType: "contract IAggregatorV3",
				name: "dataFeedX",
				type: "address"
			},
			{
				internalType: "contract IAggregatorV3",
				name: "dataFeedY",
				type: "address"
			}
		],
		name: "createOracleVault",
		outputs: [
			{
				internalType: "address",
				name: "vault",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				internalType: "contract IAggregatorV3",
				name: "dataFeedX",
				type: "address"
			},
			{
				internalType: "contract IAggregatorV3",
				name: "dataFeedY",
				type: "address"
			}
		],
		name: "createOracleVaultAndDefaultStrategy",
		outputs: [
			{
				internalType: "address",
				name: "vault",
				type: "address"
			},
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			}
		],
		name: "createSimpleVault",
		outputs: [
			{
				internalType: "address",
				name: "vault",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			}
		],
		name: "createSimpleVaultAndDefaultStrategy",
		outputs: [
			{
				internalType: "address",
				name: "vault",
				type: "address"
			},
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getDefaultOperator",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFeeRecipient",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			}
		],
		name: "getNumberOfStrategies",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			}
		],
		name: "getNumberOfVaults",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			},
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			}
		],
		name: "getStrategyAt",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			}
		],
		name: "getStrategyImplementation",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "getStrategyType",
		outputs: [
			{
				internalType: "enum IVaultFactory.StrategyType",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			},
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			}
		],
		name: "getVaultAt",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			}
		],
		name: "getVaultImplementation",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "vault",
				type: "address"
			}
		],
		name: "getVaultType",
		outputs: [
			{
				internalType: "enum IVaultFactory.VaultType",
				name: "",
				type: "uint8"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getWNative",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "initialize",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			},
			{
				internalType: "address",
				name: "strategy",
				type: "address"
			}
		],
		name: "linkVaultToStrategy",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			}
		],
		name: "pauseDeposits",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pendingOwner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			},
			{
				internalType: "contract IERC20Upgradeable",
				name: "token",
				type: "address"
			},
			{
				internalType: "address",
				name: "recipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "recoverERC20",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			},
			{
				internalType: "address[]",
				name: "addresses",
				type: "address[]"
			}
		],
		name: "removeFromWhitelist",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			}
		],
		name: "resetPendingAumAnnualFee",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			}
		],
		name: "resumeDeposits",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "defaultOperator",
				type: "address"
			}
		],
		name: "setDefaultOperator",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			}
		],
		name: "setEmergencyMode",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			}
		],
		name: "setFeeRecipient",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IStrategy",
				name: "strategy",
				type: "address"
			},
			{
				internalType: "address",
				name: "operator",
				type: "address"
			}
		],
		name: "setOperator",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "pendingAumAnnualFee",
				type: "uint16"
			}
		],
		name: "setPendingAumAnnualFee",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.StrategyType",
				name: "sType",
				type: "uint8"
			},
			{
				internalType: "address",
				name: "strategyImplementation",
				type: "address"
			}
		],
		name: "setStrategyImplementation",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "enum IVaultFactory.VaultType",
				name: "vType",
				type: "uint8"
			},
			{
				internalType: "address",
				name: "vaultImplementation",
				type: "address"
			}
		],
		name: "setVaultImplementation",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IBaseVault",
				name: "vault",
				type: "address"
			},
			{
				internalType: "bool",
				name: "isWhitelisted",
				type: "bool"
			}
		],
		name: "setWhitelistState",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "transferOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var LBFactoryV21 = [
	{
		inputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "flashLoanFee",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "LBFactory__AddressZero",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__BinStepHasNoPreset",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__BinStepTooLow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "fees",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "maxFees",
				type: "uint256"
			}
		],
		name: "LBFactory__FlashLoanFeeAboveMax",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "token",
				type: "address"
			}
		],
		name: "LBFactory__IdenticalAddresses",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__ImplementationNotSet",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "_binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__LBPairAlreadyExists",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__LBPairDoesNotExist",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__LBPairIgnoredIsAlreadyInTheSameState",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__LBPairNotCreated",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "LBPairImplementation",
				type: "address"
			}
		],
		name: "LBFactory__LBPairSafetyCheckFailed",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "LBFactory__PresetIsLockedForUsers",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBFactory__PresetOpenStateIsAlreadyInTheSameState",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "LBFactory__QuoteAssetAlreadyWhitelisted",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "LBFactory__QuoteAssetNotWhitelisted",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			}
		],
		name: "LBFactory__SameFeeRecipient",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "flashLoanFee",
				type: "uint256"
			}
		],
		name: "LBFactory__SameFlashLoanFee",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "LBPairImplementation",
				type: "address"
			}
		],
		name: "LBFactory__SameImplementation",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PairParametersHelper__InvalidParameter",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__AddressZero",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__NoPendingOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__NotOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__NotPendingOwner",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PendingOwnable__PendingOwnerAlreadySet",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeCast__Exceeds16Bits",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Uint128x128Math__PowUnderflow",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "oldRecipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "newRecipient",
				type: "address"
			}
		],
		name: "FeeRecipientSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "uint256",
				name: "oldFlashLoanFee",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "newFlashLoanFee",
				type: "uint256"
			}
		],
		name: "FlashLoanFeeSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "contract ILBPair",
				name: "LBPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "pid",
				type: "uint256"
			}
		],
		name: "LBPairCreated",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "LBPair",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "ignored",
				type: "bool"
			}
		],
		name: "LBPairIgnoredStateChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: false,
				internalType: "address",
				name: "oldLBPairImplementation",
				type: "address"
			},
			{
				indexed: false,
				internalType: "address",
				name: "LBPairImplementation",
				type: "address"
			}
		],
		name: "LBPairImplementationSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "previousOwner",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "newOwner",
				type: "address"
			}
		],
		name: "OwnershipTransferred",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "pendingOwner",
				type: "address"
			}
		],
		name: "PendingOwnerSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			},
			{
				indexed: true,
				internalType: "bool",
				name: "isOpen",
				type: "bool"
			}
		],
		name: "PresetOpenStateChanged",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "PresetRemoved",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "baseFactor",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "filterPeriod",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "decayPeriod",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "reductionFactor",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "variableFeeControl",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "protocolShare",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "maxVolatilityAccumulator",
				type: "uint256"
			}
		],
		name: "PresetSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "QuoteAssetAdded",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "QuoteAssetRemoved",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "addQuoteAsset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "becomeOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint24",
				name: "activeId",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			}
		],
		name: "createLBPair",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBPair",
				name: "pair",
				type: "address"
			}
		],
		name: "forceDecay",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getAllBinSteps",
		outputs: [
			{
				internalType: "uint256[]",
				name: "binStepWithPreset",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			}
		],
		name: "getAllLBPairs",
		outputs: [
			{
				components: [
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "contract ILBPair",
						name: "LBPair",
						type: "address"
					},
					{
						internalType: "bool",
						name: "createdByOwner",
						type: "bool"
					},
					{
						internalType: "bool",
						name: "ignoredForRouting",
						type: "bool"
					}
				],
				internalType: "struct ILBFactory.LBPairInformation[]",
				name: "lbPairsAvailable",
				type: "tuple[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFeeRecipient",
		outputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFlashLoanFee",
		outputs: [
			{
				internalType: "uint256",
				name: "flashLoanFee",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			}
		],
		name: "getLBPairAtIndex",
		outputs: [
			{
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getLBPairImplementation",
		outputs: [
			{
				internalType: "address",
				name: "lbPairImplementation",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenA",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenB",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "getLBPairInformation",
		outputs: [
			{
				components: [
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "contract ILBPair",
						name: "LBPair",
						type: "address"
					},
					{
						internalType: "bool",
						name: "createdByOwner",
						type: "bool"
					},
					{
						internalType: "bool",
						name: "ignoredForRouting",
						type: "bool"
					}
				],
				internalType: "struct ILBFactory.LBPairInformation",
				name: "lbPairInformation",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getMaxFlashLoanFee",
		outputs: [
			{
				internalType: "uint256",
				name: "maxFee",
				type: "uint256"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getMinBinStep",
		outputs: [
			{
				internalType: "uint256",
				name: "minBinStep",
				type: "uint256"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getNumberOfLBPairs",
		outputs: [
			{
				internalType: "uint256",
				name: "lbPairNumber",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getNumberOfQuoteAssets",
		outputs: [
			{
				internalType: "uint256",
				name: "numberOfQuoteAssets",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getOpenBinSteps",
		outputs: [
			{
				internalType: "uint256[]",
				name: "openBinStep",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "binStep",
				type: "uint256"
			}
		],
		name: "getPreset",
		outputs: [
			{
				internalType: "uint256",
				name: "baseFactor",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "filterPeriod",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "decayPeriod",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "reductionFactor",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "variableFeeControl",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "protocolShare",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "maxVolatilityAccumulator",
				type: "uint256"
			},
			{
				internalType: "bool",
				name: "isOpen",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "index",
				type: "uint256"
			}
		],
		name: "getQuoteAssetAtIndex",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "asset",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "token",
				type: "address"
			}
		],
		name: "isQuoteAsset",
		outputs: [
			{
				internalType: "bool",
				name: "isQuote",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "owner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "pendingOwner",
		outputs: [
			{
				internalType: "address",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			}
		],
		name: "removePreset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "quoteAsset",
				type: "address"
			}
		],
		name: "removeQuoteAsset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "renounceOwnership",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "revokePendingOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			}
		],
		name: "setFeeRecipient",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "maxVolatilityAccumulator",
				type: "uint24"
			}
		],
		name: "setFeesParametersOnPair",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "flashLoanFee",
				type: "uint256"
			}
		],
		name: "setFlashLoanFee",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "bool",
				name: "ignored",
				type: "bool"
			}
		],
		name: "setLBPairIgnored",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "newLBPairImplementation",
				type: "address"
			}
		],
		name: "setLBPairImplementation",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "pendingOwner_",
				type: "address"
			}
		],
		name: "setPendingOwner",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "maxVolatilityAccumulator",
				type: "uint24"
			},
			{
				internalType: "bool",
				name: "isOpen",
				type: "bool"
			}
		],
		name: "setPreset",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "bool",
				name: "isOpen",
				type: "bool"
			}
		],
		name: "setPresetOpenState",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	}
];

var LBPairV21 = [
	{
		inputs: [
			{
				internalType: "contract ILBFactory",
				name: "factory_",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "AddressHelper__CallFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "AddressHelper__NonContract",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "BinHelper__CompositionFactorFlawed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "BinHelper__LiquidityOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "FeeHelper__FeeOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__AddressZero",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__AlreadyInitialized",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__EmptyMarketConfigs",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__FlashLoanCallbackFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__FlashLoanInsufficientAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__InsufficientAmountIn",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__InsufficientAmountOut",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__InvalidInput",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__InvalidStaticFeeParameters",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__MaxTotalFeeExceeded",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__OnlyFactory",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__OnlyProtocolFeeRecipient",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__OutOfLiquidity",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__TokenNotSupported",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "LBPair__ZeroAmount",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "LBPair__ZeroAmountsOut",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBPair__ZeroBorrowAmount",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "LBPair__ZeroShares",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__AddressThisOrZero",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "LBToken__BurnExceedsBalance",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LBToken__InvalidLength",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			}
		],
		name: "LBToken__SelfApproval",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "LBToken__SpenderNotApproved",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "LBToken__TransferExceedsBalance",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LiquidityConfigurations__InvalidConfig",
		type: "error"
	},
	{
		inputs: [
		],
		name: "OracleHelper__InvalidOracleId",
		type: "error"
	},
	{
		inputs: [
		],
		name: "OracleHelper__LookUpTimestampTooOld",
		type: "error"
	},
	{
		inputs: [
		],
		name: "OracleHelper__NewLengthTooSmall",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PackedUint128Math__AddOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PackedUint128Math__MultiplierTooLarge",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PackedUint128Math__SubUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PairParametersHelper__InvalidParameter",
		type: "error"
	},
	{
		inputs: [
		],
		name: "ReentrancyGuard__ReentrantCall",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeCast__Exceeds128Bits",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeCast__Exceeds24Bits",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeCast__Exceeds40Bits",
		type: "error"
	},
	{
		inputs: [
		],
		name: "TokenHelper__TransferFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint128x128Math__LogUnderflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Uint128x128Math__PowUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulDivOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulShiftOverflow",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "ApprovalForAll",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "feeRecipient",
				type: "address"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "protocolFees",
				type: "bytes32"
			}
		],
		name: "CollectedProtocolFees",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "id",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "totalFees",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "protocolFees",
				type: "bytes32"
			}
		],
		name: "CompositionFees",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				indexed: false,
				internalType: "bytes32[]",
				name: "amounts",
				type: "bytes32[]"
			}
		],
		name: "DepositedToBins",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBFlashLoanCallback",
				name: "receiver",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "activeId",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "amounts",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "totalFees",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "protocolFees",
				type: "bytes32"
			}
		],
		name: "FlashLoan",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "idReference",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "volatilityReference",
				type: "uint24"
			}
		],
		name: "ForcedDecay",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "oracleLength",
				type: "uint16"
			}
		],
		name: "OracleLengthIncreased",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "baseFactor",
				type: "uint16"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "variableFeeControl",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "maxVolatilityAccumulator",
				type: "uint24"
			}
		],
		name: "StaticFeeParametersSet",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "id",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "amountsIn",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "amountsOut",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "uint24",
				name: "volatilityAccumulator",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "totalFees",
				type: "bytes32"
			},
			{
				indexed: false,
				internalType: "bytes32",
				name: "protocolFees",
				type: "bytes32"
			}
		],
		name: "Swap",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			}
		],
		name: "TransferBatch",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				indexed: false,
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				indexed: false,
				internalType: "bytes32[]",
				name: "amounts",
				type: "bytes32[]"
			}
		],
		name: "WithdrawnFromBins",
		type: "event"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "spender",
				type: "address"
			},
			{
				internalType: "bool",
				name: "approved",
				type: "bool"
			}
		],
		name: "approveForAll",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "account",
				type: "address"
			},
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "balanceOf",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address[]",
				name: "accounts",
				type: "address[]"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			}
		],
		name: "balanceOfBatch",
		outputs: [
			{
				internalType: "uint256[]",
				name: "batchBalances",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amounts",
				type: "uint256[]"
			}
		],
		name: "batchTransferFrom",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "from",
				type: "address"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amountsToBurn",
				type: "uint256[]"
			}
		],
		name: "burn",
		outputs: [
			{
				internalType: "bytes32[]",
				name: "amounts",
				type: "bytes32[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "collectProtocolFees",
		outputs: [
			{
				internalType: "bytes32",
				name: "collectedProtocolFees",
				type: "bytes32"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract ILBFlashLoanCallback",
				name: "receiver",
				type: "address"
			},
			{
				internalType: "bytes32",
				name: "amounts",
				type: "bytes32"
			},
			{
				internalType: "bytes",
				name: "data",
				type: "bytes"
			}
		],
		name: "flashLoan",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "forceDecay",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getActiveId",
		outputs: [
			{
				internalType: "uint24",
				name: "activeId",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "getBin",
		outputs: [
			{
				internalType: "uint128",
				name: "binReserveX",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "binReserveY",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getBinStep",
		outputs: [
			{
				internalType: "uint16",
				name: "",
				type: "uint16"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactory",
		outputs: [
			{
				internalType: "contract ILBFactory",
				name: "factory",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		name: "getIdFromPrice",
		outputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			},
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "getNextNonEmptyBin",
		outputs: [
			{
				internalType: "uint24",
				name: "nextId",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getOracleParameters",
		outputs: [
			{
				internalType: "uint8",
				name: "sampleLifetime",
				type: "uint8"
			},
			{
				internalType: "uint16",
				name: "size",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "activeSize",
				type: "uint16"
			},
			{
				internalType: "uint40",
				name: "lastUpdated",
				type: "uint40"
			},
			{
				internalType: "uint40",
				name: "firstTimestamp",
				type: "uint40"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint40",
				name: "lookupTimestamp",
				type: "uint40"
			}
		],
		name: "getOracleSampleAt",
		outputs: [
			{
				internalType: "uint64",
				name: "cumulativeId",
				type: "uint64"
			},
			{
				internalType: "uint64",
				name: "cumulativeVolatility",
				type: "uint64"
			},
			{
				internalType: "uint64",
				name: "cumulativeBinCrossed",
				type: "uint64"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint24",
				name: "id",
				type: "uint24"
			}
		],
		name: "getPriceFromId",
		outputs: [
			{
				internalType: "uint256",
				name: "price",
				type: "uint256"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getProtocolFees",
		outputs: [
			{
				internalType: "uint128",
				name: "protocolFeeX",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "protocolFeeY",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getReserves",
		outputs: [
			{
				internalType: "uint128",
				name: "reserveX",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "reserveY",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getStaticFeeParameters",
		outputs: [
			{
				internalType: "uint16",
				name: "baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "maxVolatilityAccumulator",
				type: "uint24"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint128",
				name: "amountOut",
				type: "uint128"
			},
			{
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			}
		],
		name: "getSwapIn",
		outputs: [
			{
				internalType: "uint128",
				name: "amountIn",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "amountOutLeft",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "fee",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint128",
				name: "amountIn",
				type: "uint128"
			},
			{
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			}
		],
		name: "getSwapOut",
		outputs: [
			{
				internalType: "uint128",
				name: "amountInLeft",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "amountOut",
				type: "uint128"
			},
			{
				internalType: "uint128",
				name: "fee",
				type: "uint128"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getTokenX",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getTokenY",
		outputs: [
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getVariableFeeParameters",
		outputs: [
			{
				internalType: "uint24",
				name: "volatilityAccumulator",
				type: "uint24"
			},
			{
				internalType: "uint24",
				name: "volatilityReference",
				type: "uint24"
			},
			{
				internalType: "uint24",
				name: "idReference",
				type: "uint24"
			},
			{
				internalType: "uint40",
				name: "timeOfLastUpdate",
				type: "uint40"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "newLength",
				type: "uint16"
			}
		],
		name: "increaseOracleLength",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "maxVolatilityAccumulator",
				type: "uint24"
			},
			{
				internalType: "uint24",
				name: "activeId",
				type: "uint24"
			}
		],
		name: "initialize",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "owner",
				type: "address"
			},
			{
				internalType: "address",
				name: "spender",
				type: "address"
			}
		],
		name: "isApprovedForAll",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "to",
				type: "address"
			},
			{
				internalType: "bytes32[]",
				name: "liquidityConfigs",
				type: "bytes32[]"
			},
			{
				internalType: "address",
				name: "refundTo",
				type: "address"
			}
		],
		name: "mint",
		outputs: [
			{
				internalType: "bytes32",
				name: "amountsReceived",
				type: "bytes32"
			},
			{
				internalType: "bytes32",
				name: "amountsLeft",
				type: "bytes32"
			},
			{
				internalType: "uint256[]",
				name: "liquidityMinted",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint16",
				name: "baseFactor",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "filterPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "decayPeriod",
				type: "uint16"
			},
			{
				internalType: "uint16",
				name: "reductionFactor",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "variableFeeControl",
				type: "uint24"
			},
			{
				internalType: "uint16",
				name: "protocolShare",
				type: "uint16"
			},
			{
				internalType: "uint24",
				name: "maxVolatilityAccumulator",
				type: "uint24"
			}
		],
		name: "setStaticFeeParameters",
		outputs: [
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "bool",
				name: "swapForY",
				type: "bool"
			},
			{
				internalType: "address",
				name: "to",
				type: "address"
			}
		],
		name: "swap",
		outputs: [
			{
				internalType: "bytes32",
				name: "amountsOut",
				type: "bytes32"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
		],
		name: "symbol",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "id",
				type: "uint256"
			}
		],
		name: "totalSupply",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var LiquidityAmountsHelper = [
	{
		inputs: [
		],
		name: "LiquidityAmounts__LengthMismatch",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeCast__Exceeds24Bits",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "uint256",
				name: "x",
				type: "uint256"
			},
			{
				internalType: "int256",
				name: "y",
				type: "int256"
			}
		],
		name: "Uint128x128Math__PowUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulDivOverflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulShiftOverflow",
		type: "error"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "LBPair",
				type: "address"
			}
		],
		name: "getAmountsAndLiquiditiesOf",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsX",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amountsY",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "liquidities",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256[]",
				name: "liquidities",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "totalSupplies",
				type: "uint256[]"
			},
			{
				internalType: "uint112[]",
				name: "binReservesX",
				type: "uint112[]"
			},
			{
				internalType: "uint112[]",
				name: "binReservesY",
				type: "uint112[]"
			}
		],
		name: "getAmountsForLiquidities",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "LBPair",
				type: "address"
			}
		],
		name: "getAmountsOf",
		outputs: [
			{
				internalType: "uint256[]",
				name: "amountsX",
				type: "uint256[]"
			},
			{
				internalType: "uint256[]",
				name: "amountsY",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "LBPair",
				type: "address"
			}
		],
		name: "getBalanceOf",
		outputs: [
			{
				internalType: "uint256[]",
				name: "balances",
				type: "uint256[]"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "uint112",
				name: "amountX",
				type: "uint112"
			},
			{
				internalType: "uint112",
				name: "amountY",
				type: "uint112"
			}
		],
		name: "getLiquiditiesForAmounts",
		outputs: [
			{
				internalType: "uint256[]",
				name: "liquidities",
				type: "uint256[]"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				internalType: "uint256[]",
				name: "ids",
				type: "uint256[]"
			},
			{
				internalType: "address",
				name: "LBPair",
				type: "address"
			}
		],
		name: "getTotalAmountsOf",
		outputs: [
			{
				internalType: "uint256",
				name: "totalAmountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "totalAmountY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	}
];

var LimitOrderManager = [
	{
		inputs: [
			{
				internalType: "contract ILBFactory",
				name: "factory",
				type: "address"
			},
			{
				internalType: "contract IWNATIVE",
				name: "wNative",
				type: "address"
			}
		],
		stateMutability: "nonpayable",
		type: "constructor"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__InvalidBatchLength",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__InvalidNativeAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__InvalidOrder",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__InvalidPair",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__InvalidTokenOrder",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__NoOrdersToExecute",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__OrderAlreadyExecuted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__OrderNotClaimable",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__OrderNotExecutable",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__OrderNotPlaced",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__OrdersAlreadyExecuted",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__TransferFailed",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__ZeroAddress",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__ZeroAmount",
		type: "error"
	},
	{
		inputs: [
		],
		name: "LimitOrderManager__ZeroPositionLiquidity",
		type: "error"
	},
	{
		inputs: [
		],
		name: "PackedUint128Math__SubUnderflow",
		type: "error"
	},
	{
		inputs: [
		],
		name: "SafeCast__Exceeds128Bits",
		type: "error"
	},
	{
		inputs: [
		],
		name: "Uint256x256Math__MulDivOverflow",
		type: "error"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "positionId",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "liquidity",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "OrderCancelled",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "positionId",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "liquidity",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "OrderClaimed",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "sender",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "positionId",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "liquidity",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "OrderExecuted",
		type: "event"
	},
	{
		anonymous: false,
		inputs: [
			{
				indexed: true,
				internalType: "address",
				name: "user",
				type: "address"
			},
			{
				indexed: true,
				internalType: "contract ILBPair",
				name: "lbPair",
				type: "address"
			},
			{
				indexed: true,
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				indexed: false,
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "positionId",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "liquidity",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				indexed: false,
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		name: "OrderPlaced",
		type: "event"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					}
				],
				internalType: "struct ILimitOrderManager.OrderParams[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchCancelOrders",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				components: [
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					}
				],
				internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchCancelOrdersSamePair",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					}
				],
				internalType: "struct ILimitOrderManager.OrderParams[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchClaimOrders",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				components: [
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					}
				],
				internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchClaimOrdersSamePair",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					}
				],
				internalType: "struct ILimitOrderManager.OrderParams[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchExecuteOrders",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				components: [
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					}
				],
				internalType: "struct ILimitOrderManager.OrderParamsSamePair[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchExecuteOrdersSamePair",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				components: [
					{
						internalType: "contract IERC20",
						name: "tokenX",
						type: "address"
					},
					{
						internalType: "contract IERC20",
						name: "tokenY",
						type: "address"
					},
					{
						internalType: "uint16",
						name: "binStep",
						type: "uint16"
					},
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					}
				],
				internalType: "struct ILimitOrderManager.PlaceOrderParams[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchPlaceOrders",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				components: [
					{
						internalType: "enum ILimitOrderManager.OrderType",
						name: "orderType",
						type: "uint8"
					},
					{
						internalType: "uint24",
						name: "binId",
						type: "uint24"
					},
					{
						internalType: "uint256",
						name: "amount",
						type: "uint256"
					}
				],
				internalType: "struct ILimitOrderManager.PlaceOrderParamsSamePair[]",
				name: "orders",
				type: "tuple[]"
			}
		],
		name: "batchPlaceOrdersSamePair",
		outputs: [
			{
				internalType: "uint256[]",
				name: "orderPositionIds",
				type: "uint256[]"
			}
		],
		stateMutability: "payable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			}
		],
		name: "cancelOrder",
		outputs: [
			{
				internalType: "uint256",
				name: "orderPositionId",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			}
		],
		name: "claimOrder",
		outputs: [
			{
				internalType: "uint256",
				name: "orderPositionId",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			}
		],
		name: "executeOrders",
		outputs: [
			{
				internalType: "uint256",
				name: "positionId",
				type: "uint256"
			}
		],
		stateMutability: "nonpayable",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "getCurrentAmounts",
		outputs: [
			{
				internalType: "uint256",
				name: "amountX",
				type: "uint256"
			},
			{
				internalType: "uint256",
				name: "amountY",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "getFactory",
		outputs: [
			{
				internalType: "contract ILBFactory",
				name: "",
				type: "address"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			}
		],
		name: "getLastPositionId",
		outputs: [
			{
				internalType: "uint256",
				name: "",
				type: "uint256"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				internalType: "address",
				name: "user",
				type: "address"
			}
		],
		name: "getOrder",
		outputs: [
			{
				components: [
					{
						internalType: "uint256",
						name: "positionId",
						type: "uint256"
					},
					{
						internalType: "uint256",
						name: "liquidity",
						type: "uint256"
					}
				],
				internalType: "struct ILimitOrderManager.Order",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				internalType: "uint256",
				name: "positionId",
				type: "uint256"
			}
		],
		name: "getPosition",
		outputs: [
			{
				components: [
					{
						internalType: "uint256",
						name: "liquidity",
						type: "uint256"
					},
					{
						internalType: "uint128",
						name: "amount",
						type: "uint128"
					},
					{
						internalType: "bool",
						name: "withdrawn",
						type: "bool"
					}
				],
				internalType: "struct ILimitOrderManager.Position",
				name: "",
				type: "tuple"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			}
		],
		name: "isOrderExecutable",
		outputs: [
			{
				internalType: "bool",
				name: "",
				type: "bool"
			}
		],
		stateMutability: "view",
		type: "function"
	},
	{
		inputs: [
		],
		name: "name",
		outputs: [
			{
				internalType: "string",
				name: "",
				type: "string"
			}
		],
		stateMutability: "pure",
		type: "function"
	},
	{
		inputs: [
			{
				internalType: "contract IERC20",
				name: "tokenX",
				type: "address"
			},
			{
				internalType: "contract IERC20",
				name: "tokenY",
				type: "address"
			},
			{
				internalType: "uint16",
				name: "binStep",
				type: "uint16"
			},
			{
				internalType: "enum ILimitOrderManager.OrderType",
				name: "orderType",
				type: "uint8"
			},
			{
				internalType: "uint24",
				name: "binId",
				type: "uint24"
			},
			{
				internalType: "uint256",
				name: "amount",
				type: "uint256"
			}
		],
		name: "placeOrder",
		outputs: [
			{
				internalType: "uint256",
				name: "orderPositionId",
				type: "uint256"
			}
		],
		stateMutability: "payable",
		type: "function"
	}
];



var index = {
  __proto__: null,
  LBPairABI: LBPair,
  LBFactoryABI: LBFactory,
  LBRouterABI: LBRouter,
  LBRouterV21ABI: LBRouterV21,
  DexLensABI: DexLens,
  LBQuoterABI: LBQuoter,
  LBQuoterV21ABI: LBQuoterV21,
  LBRewarderABI: LBRewarder,
  VaultABI: Vault,
  VaultFactoryABI: VaultFactory,
  LBFactoryV21ABI: LBFactoryV21,
  LBPairV21ABI: LBPairV21,
  LiquidityAmountsHelperABI: LiquidityAmountsHelper,
  LimitOrderManagerABI: LimitOrderManager
};

var _SOLIDITY_TYPE_MAXIMA;
// exports for internal consumption
var ZERO = /*#__PURE__*/JSBI.BigInt(0);
var ONE = /*#__PURE__*/JSBI.BigInt(1);
var SolidityType;
(function (SolidityType) {
  SolidityType["uint8"] = "uint8";
  SolidityType["uint256"] = "uint256";
})(SolidityType || (SolidityType = {}));
var SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);
var ZERO_HEX = '0x0';

var _MULTICALL_ADDRESS, _LB_QUOTER_ADDRESS, _LB_QUOTER_V21_ADDRES, _LB_ROUTER_ADDRESS, _LB_ROUTER_V21_ADDRES, _LB_FACTORY_ADDRESS, _LB_FACTORY_V21_ADDRE, _DEXLENS_ADDRESS, _LB_REWARDER_ADDRESS, _VAULT_FACTORY_ADDRES, _LIQUIDITY_AMOUNTS_HE, _LIMIT_ORDER_MANAGER_;
/**
 * DEX v2 SDK
 */
var MULTICALL_ADDRESS = (_MULTICALL_ADDRESS = {}, _MULTICALL_ADDRESS[ChainId.FUJI] = '0xcA11bde05977b3631167028862bE2a173976CA11', _MULTICALL_ADDRESS[ChainId.AVALANCHE] = '0xcA11bde05977b3631167028862bE2a173976CA11', _MULTICALL_ADDRESS[ChainId.ARBITRUM_ONE] = '0xcA11bde05977b3631167028862bE2a173976CA11', _MULTICALL_ADDRESS[ChainId.ARB_GOERLI] = '0xcA11bde05977b3631167028862bE2a173976CA11', _MULTICALL_ADDRESS[ChainId.BNB_CHAIN] = '0xcA11bde05977b3631167028862bE2a173976CA11', _MULTICALL_ADDRESS[ChainId.BNB_TESTNET] = '0xcA11bde05977b3631167028862bE2a173976CA11', _MULTICALL_ADDRESS);
var LB_QUOTER_ADDRESS = (_LB_QUOTER_ADDRESS = {}, _LB_QUOTER_ADDRESS[ChainId.FUJI] = '0x2644fE413b8Fe94D69c4706455108368fa36354F', _LB_QUOTER_ADDRESS[ChainId.AVALANCHE] = '0x9dbf1706577636941ab5f443d2aebe251ccd1648', _LB_QUOTER_ADDRESS[ChainId.ARBITRUM_ONE] = '0x7f281f22eDB332807A039073a7F34A4A215bE89e', _LB_QUOTER_ADDRESS[ChainId.ARB_GOERLI] = '0x42B0D9a10ee9B96a599C98a618205d0288636762', _LB_QUOTER_ADDRESS[ChainId.BNB_CHAIN] = '0x89c71F2065aA505956a86FCadAE4a625A5b5e842', _LB_QUOTER_ADDRESS[ChainId.BNB_TESTNET] = '0x0996216AE051fE4B1d3258fE75b682E75d66E4C0', _LB_QUOTER_ADDRESS);
var LB_QUOTER_V21_ADDRESS = (_LB_QUOTER_V21_ADDRES = {}, _LB_QUOTER_V21_ADDRES[ChainId.FUJI] = '0x64b57F4249aA99a812212cee7DAEFEDC40B203cD', _LB_QUOTER_V21_ADDRES[ChainId.AVALANCHE] = '0x64b57F4249aA99a812212cee7DAEFEDC40B203cD', _LB_QUOTER_V21_ADDRES[ChainId.ARBITRUM_ONE] = '0x64b57F4249aA99a812212cee7DAEFEDC40B203cD', _LB_QUOTER_V21_ADDRES[ChainId.ARB_GOERLI] = '0x64b57F4249aA99a812212cee7DAEFEDC40B203cD', _LB_QUOTER_V21_ADDRES[ChainId.BNB_CHAIN] = '0x64b57F4249aA99a812212cee7DAEFEDC40B203cD', _LB_QUOTER_V21_ADDRES[ChainId.BNB_TESTNET] = '0x64b57F4249aA99a812212cee7DAEFEDC40B203cD', _LB_QUOTER_V21_ADDRES);
var LB_ROUTER_ADDRESS = (_LB_ROUTER_ADDRESS = {}, _LB_ROUTER_ADDRESS[ChainId.FUJI] = '0x7b50046cEC8252ca835b148b1eDD997319120a12', _LB_ROUTER_ADDRESS[ChainId.AVALANCHE] = '0xE3Ffc583dC176575eEA7FD9dF2A7c65F7E23f4C3', _LB_ROUTER_ADDRESS[ChainId.ARBITRUM_ONE] = '0x7BFd7192E76D950832c77BB412aaE841049D8D9B', _LB_ROUTER_ADDRESS[ChainId.ARB_GOERLI] = '0x6E9603f925FB5A74f7321f51499d9633c1252893', _LB_ROUTER_ADDRESS[ChainId.BNB_CHAIN] = '0xb66A2704a0dabC1660941628BE987B4418f7a9E8', _LB_ROUTER_ADDRESS[ChainId.BNB_TESTNET] = '0xf7C6d73336f333b63144644944176072D94128F5', _LB_ROUTER_ADDRESS);
var LB_ROUTER_V21_ADDRESS = (_LB_ROUTER_V21_ADDRES = {}, _LB_ROUTER_V21_ADDRES[ChainId.FUJI] = '0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30', _LB_ROUTER_V21_ADDRES[ChainId.AVALANCHE] = '0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30', _LB_ROUTER_V21_ADDRES[ChainId.ARBITRUM_ONE] = '0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30', _LB_ROUTER_V21_ADDRES[ChainId.ARB_GOERLI] = '0x095EEe81B0eC73797424d67e24adab20D5A5D307', _LB_ROUTER_V21_ADDRES[ChainId.BNB_CHAIN] = '0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30', _LB_ROUTER_V21_ADDRES[ChainId.BNB_TESTNET] = '0x8FABE13D95F28f7478Dc655d8D4BA99935D50e02', _LB_ROUTER_V21_ADDRES);
var LB_FACTORY_ADDRESS = (_LB_FACTORY_ADDRESS = {}, _LB_FACTORY_ADDRESS[ChainId.FUJI] = '0x6B8E020098cd1B3Ec9f811024bc24e51C660F768', _LB_FACTORY_ADDRESS[ChainId.AVALANCHE] = '0x6E77932A92582f504FF6c4BdbCef7Da6c198aEEf', _LB_FACTORY_ADDRESS[ChainId.ARBITRUM_ONE] = '0x1886D09C9Ade0c5DB822D85D21678Db67B6c2982', _LB_FACTORY_ADDRESS[ChainId.ARB_GOERLI] = '0xC8Af41e49e2C03eA14706C7aa9cEE60454bc5c03', _LB_FACTORY_ADDRESS[ChainId.BNB_CHAIN] = '0x43646A8e839B2f2766392C1BF8f60F6e587B6960', _LB_FACTORY_ADDRESS[ChainId.BNB_TESTNET] = '0xE082a032Fa1cE68b24594bee0fC57DfE819D107c', _LB_FACTORY_ADDRESS);
var LB_FACTORY_V21_ADDRESS = (_LB_FACTORY_V21_ADDRE = {}, _LB_FACTORY_V21_ADDRE[ChainId.FUJI] = '0x8e42f2F4101563bF679975178e880FD87d3eFd4e', _LB_FACTORY_V21_ADDRE[ChainId.AVALANCHE] = '0x8e42f2F4101563bF679975178e880FD87d3eFd4e', _LB_FACTORY_V21_ADDRE[ChainId.ARBITRUM_ONE] = '0x8e42f2F4101563bF679975178e880FD87d3eFd4e', _LB_FACTORY_V21_ADDRE[ChainId.ARB_GOERLI] = '0x8e42f2F4101563bF679975178e880FD87d3eFd4e', _LB_FACTORY_V21_ADDRE[ChainId.BNB_CHAIN] = '0x8e42f2F4101563bF679975178e880FD87d3eFd4e', _LB_FACTORY_V21_ADDRE[ChainId.BNB_TESTNET] = '0x8e42f2F4101563bF679975178e880FD87d3eFd4e', _LB_FACTORY_V21_ADDRE);
var DEXLENS_ADDRESS = (_DEXLENS_ADDRESS = {}, _DEXLENS_ADDRESS[ChainId.FUJI] = '0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973', _DEXLENS_ADDRESS[ChainId.AVALANCHE] = '0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973', _DEXLENS_ADDRESS[ChainId.ARBITRUM_ONE] = '0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973', _DEXLENS_ADDRESS[ChainId.ARB_GOERLI] = '0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973', _DEXLENS_ADDRESS[ChainId.BNB_CHAIN] = '0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973', _DEXLENS_ADDRESS[ChainId.BNB_TESTNET] = '0x441eF20e39DfE886AAb99a6E1bb64f43E45bD973', _DEXLENS_ADDRESS);
var LB_REWARDER_ADDRESS = (_LB_REWARDER_ADDRESS = {}, _LB_REWARDER_ADDRESS[ChainId.FUJI] = '0x3e031f1486a27c997e85c5a2af2638ee3a4c28a1', _LB_REWARDER_ADDRESS[ChainId.AVALANCHE] = '0x624C5b9BEB13af6893e715932c26e2b7A59c410a', _LB_REWARDER_ADDRESS[ChainId.ARBITRUM_ONE] = '0x624C5b9BEB13af6893e715932c26e2b7A59c410a', _LB_REWARDER_ADDRESS[ChainId.ARB_GOERLI] = '0x3ca426d8743d46b99814cbf0929912a3ae398238', _LB_REWARDER_ADDRESS[ChainId.BNB_CHAIN] = '0x0000000000000000000000000000000000000000', _LB_REWARDER_ADDRESS[ChainId.BNB_TESTNET] = '0x0000000000000000000000000000000000000000', _LB_REWARDER_ADDRESS);
var VAULT_FACTORY_ADDRESS = (_VAULT_FACTORY_ADDRES = {}, _VAULT_FACTORY_ADDRES[ChainId.FUJI] = '0x0000000000000000000000000000000000000000', _VAULT_FACTORY_ADDRES[ChainId.AVALANCHE] = '0x613aDdd55D30BF626c3009e9DAC66222346Ae760', _VAULT_FACTORY_ADDRES[ChainId.ARBITRUM_ONE] = '0x613aDdd55D30BF626c3009e9DAC66222346Ae760', _VAULT_FACTORY_ADDRES[ChainId.ARB_GOERLI] = '0x0000000000000000000000000000000000000000', _VAULT_FACTORY_ADDRES[ChainId.BNB_CHAIN] = '0x613aDdd55D30BF626c3009e9DAC66222346Ae760', _VAULT_FACTORY_ADDRES[ChainId.BNB_TESTNET] = '0x0000000000000000000000000000000000000000', _VAULT_FACTORY_ADDRES);
var LIQUIDITY_AMOUNTS_HELPER_ADDRESS = (_LIQUIDITY_AMOUNTS_HE = {}, _LIQUIDITY_AMOUNTS_HE[ChainId.FUJI] = '0x49D3D17b5349600A7206EE7f46218A1209a5c2B4', _LIQUIDITY_AMOUNTS_HE[ChainId.AVALANCHE] = '0x49D3D17b5349600A7206EE7f46218A1209a5c2B4', _LIQUIDITY_AMOUNTS_HE[ChainId.ARBITRUM_ONE] = '0x49D3D17b5349600A7206EE7f46218A1209a5c2B4', _LIQUIDITY_AMOUNTS_HE[ChainId.ARB_GOERLI] = '0x49D3D17b5349600A7206EE7f46218A1209a5c2B4', _LIQUIDITY_AMOUNTS_HE[ChainId.BNB_CHAIN] = '0x49D3D17b5349600A7206EE7f46218A1209a5c2B4', _LIQUIDITY_AMOUNTS_HE[ChainId.BNB_TESTNET] = '0x49D3D17b5349600A7206EE7f46218A1209a5c2B4', _LIQUIDITY_AMOUNTS_HE);
var LIMIT_ORDER_MANAGER_ADDRESS = (_LIMIT_ORDER_MANAGER_ = {}, _LIMIT_ORDER_MANAGER_[ChainId.FUJI] = '0xd88401763206db1C32A3bd938CBD205b9fcde5b5', _LIMIT_ORDER_MANAGER_[ChainId.AVALANCHE] = '0xd88401763206db1C32A3bd938CBD205b9fcde5b5', _LIMIT_ORDER_MANAGER_[ChainId.ARBITRUM_ONE] = '0xd88401763206db1C32A3bd938CBD205b9fcde5b5', _LIMIT_ORDER_MANAGER_[ChainId.ARB_GOERLI] = '0xd88401763206db1C32A3bd938CBD205b9fcde5b5', _LIMIT_ORDER_MANAGER_[ChainId.BNB_CHAIN] = '0xd88401763206db1C32A3bd938CBD205b9fcde5b5', _LIMIT_ORDER_MANAGER_[ChainId.BNB_TESTNET] = '0xd88401763206db1C32A3bd938CBD205b9fcde5b5', _LIMIT_ORDER_MANAGER_);

/**
 * Configurations for Adding Liquidity Presets
 */
// 1) Spot (Uniform)
var spotUniform = {
  deltaIds: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  distributionX: /*#__PURE__*/[0, 0, 0, 0, 0, 0.090909, 0.181818, 0.181818, 0.181818, 0.181818, 0.181818].map(function (el) {
    return parseEther("" + el);
  }),
  distributionY: /*#__PURE__*/[0.181818, 0.181818, 0.181818, 0.181818, 0.181818, 0.090909, 0, 0, 0, 0, 0].map(function (el) {
    return parseEther("" + el);
  })
};
// 2) Curve
var curve = {
  deltaIds: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  distributionX: /*#__PURE__*/[0, 0, 0, 0, 0, 0.18, 0.3, 0.24, 0.16, 0.08, 0.04].map(function (el) {
    return parseEther("" + el);
  }),
  distributionY: /*#__PURE__*/[0.04, 0.08, 0.16, 0.24, 0.3, 0.18, 0, 0, 0, 0, 0].map(function (el) {
    return parseEther("" + el);
  })
};
// 3) Bid-Ask
var bidAsk = {
  deltaIds: [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5],
  distributionX: /*#__PURE__*/[0, 0, 0, 0, 0, 0.04, 0.12, 0.16, 0.2, 0.24, 0.24].map(function (el) {
    return parseEther("" + el);
  }),
  distributionY: /*#__PURE__*/[0.24, 0.24, 0.2, 0.16, 0.12, 0.04, 0, 0, 0, 0, 0].map(function (el) {
    return parseEther("" + el);
  })
};

var _DEX_V2_SUBGRAPH, _DEXCANDLES_SUBGRAPH_;
var DEX_V2_SUBGRAPH = (_DEX_V2_SUBGRAPH = {}, _DEX_V2_SUBGRAPH[ChainId.FUJI] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-fuji', _DEX_V2_SUBGRAPH[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2', _DEX_V2_SUBGRAPH[ChainId.ARBITRUM_ONE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-arbitrum', _DEX_V2_SUBGRAPH[ChainId.ARB_GOERLI] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-arb-goerli', _DEX_V2_SUBGRAPH[ChainId.BNB_CHAIN] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-bnb', _DEX_V2_SUBGRAPH[ChainId.BNB_TESTNET] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/joe-v2-bnbtest', _DEX_V2_SUBGRAPH);
var DEXCANDLES_SUBGRAPH_V2 = (_DEXCANDLES_SUBGRAPH_ = {}, _DEXCANDLES_SUBGRAPH_[ChainId.FUJI] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dex-candles-v2-fuji', _DEXCANDLES_SUBGRAPH_[ChainId.AVALANCHE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dex-candles-v2', _DEXCANDLES_SUBGRAPH_[ChainId.ARBITRUM_ONE] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-arbitrum', _DEXCANDLES_SUBGRAPH_[ChainId.ARB_GOERLI] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-arb-goerli', _DEXCANDLES_SUBGRAPH_[ChainId.BNB_CHAIN] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-bnb', _DEXCANDLES_SUBGRAPH_[ChainId.BNB_TESTNET] = 'https://api.thegraph.com/subgraphs/name/traderjoe-xyz/dexcandles-v2-bnbtest', _DEXCANDLES_SUBGRAPH_);

var DexLensABI = [{
  inputs: [{
    internalType: 'contract ILBFactory',
    name: 'lbFactory',
    type: 'address'
  }, {
    internalType: 'contract ILBLegacyFactory',
    name: 'lbLegacyFactory',
    type: 'address'
  }, {
    internalType: 'contract IJoeFactory',
    name: 'joeFactory',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'wnative',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'JoeDexLens__AlreadyInitialized',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'pair',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'collateral',
    type: 'address'
  }],
  name: 'JoeDexLens__CollateralNotInPair',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dataFeed',
    type: 'address'
  }],
  name: 'JoeDexLens__DataFeedAlreadyAdded',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dataFeed',
    type: 'address'
  }],
  name: 'JoeDexLens__DataFeedNotInSet',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__InvalidChainLinkPrice',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__InvalidDataFeed',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__LengthsMismatch',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__NativeToken',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__NullWeight',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__SameDataFeed',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__SameTokens',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'pair',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'JoeDexLens__TokenNotInPair',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__UnknownDataFeedType',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__V1ContractNotSet',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__V2ContractNotSet',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__V2_1ContractNotSet',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeDexLens__ZeroAddress',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'SafeAccessControlEnumerable__AccountAlreadyHasRole',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'SafeAccessControlEnumerable__AccountDoesNotHaveRole',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'SafeAccessControlEnumerable__OnlyOwnerOrRole',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'SafeAccessControlEnumerable__OnlyRole',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'SafeAccessControlEnumerable__RoleAlreadyGranted',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeOwnable__OnlyOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeOwnable__OnlyPendingOwner',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Uint128x128Math__PowUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulShiftOverflow',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    components: [{
      internalType: 'address',
      name: 'collateralAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'dfAddress',
      type: 'address'
    }, {
      internalType: 'uint88',
      name: 'dfWeight',
      type: 'uint88'
    }, {
      internalType: 'enum IJoeDexLens.DataFeedType',
      name: 'dfType',
      type: 'uint8'
    }],
    indexed: false,
    internalType: 'struct IJoeDexLens.DataFeed',
    name: 'dataFeed',
    type: 'tuple'
  }],
  name: 'DataFeedAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'dfAddress',
    type: 'address'
  }],
  name: 'DataFeedRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'dfAddress',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'weight',
    type: 'uint256'
  }],
  name: 'DataFeedsWeightSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'dfAddress',
    type: 'address'
  }],
  name: 'NativeDataFeedSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'pendingOwner',
    type: 'address'
  }],
  name: 'PendingOwnerSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'adminRole',
    type: 'bytes32'
  }],
  name: 'RoleAdminSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'RoleGranted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'RoleRevoked',
  type: 'event'
}, {
  inputs: [],
  name: 'DATA_FEED_MANAGER_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'DEFAULT_ADMIN_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    components: [{
      internalType: 'address',
      name: 'collateralAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'dfAddress',
      type: 'address'
    }, {
      internalType: 'uint88',
      name: 'dfWeight',
      type: 'uint88'
    }, {
      internalType: 'enum IJoeDexLens.DataFeedType',
      name: 'dfType',
      type: 'uint8'
    }],
    internalType: 'struct IJoeDexLens.DataFeed',
    name: 'dataFeed',
    type: 'tuple'
  }],
  name: 'addDataFeed',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'tokens',
    type: 'address[]'
  }, {
    components: [{
      internalType: 'address',
      name: 'collateralAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'dfAddress',
      type: 'address'
    }, {
      internalType: 'uint88',
      name: 'dfWeight',
      type: 'uint88'
    }, {
      internalType: 'enum IJoeDexLens.DataFeedType',
      name: 'dfType',
      type: 'uint8'
    }],
    internalType: 'struct IJoeDexLens.DataFeed[]',
    name: 'dataFeeds',
    type: 'tuple[]'
  }],
  name: 'addDataFeeds',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'becomeOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'getDataFeeds',
  outputs: [{
    components: [{
      internalType: 'address',
      name: 'collateralAddress',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'dfAddress',
      type: 'address'
    }, {
      internalType: 'uint88',
      name: 'dfWeight',
      type: 'uint88'
    }, {
      internalType: 'enum IJoeDexLens.DataFeedType',
      name: 'dfType',
      type: 'uint8'
    }],
    internalType: 'struct IJoeDexLens.DataFeed[]',
    name: 'dataFeeds',
    type: 'tuple[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactoryV1',
  outputs: [{
    internalType: 'contract IJoeFactory',
    name: 'factoryV1',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactoryV2_1',
  outputs: [{
    internalType: 'contract ILBFactory',
    name: 'factoryV2',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLegacyFactoryV2',
  outputs: [{
    internalType: 'contract ILBLegacyFactory',
    name: 'legacyFactoryV2',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'getRoleAdmin',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getRoleMemberAt',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'getRoleMemberCount',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'getTokenPriceNative',
  outputs: [{
    internalType: 'uint256',
    name: 'price',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }],
  name: 'getTokenPriceUSD',
  outputs: [{
    internalType: 'uint256',
    name: 'price',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'tokens',
    type: 'address[]'
  }],
  name: 'getTokensPricesNative',
  outputs: [{
    internalType: 'uint256[]',
    name: 'prices',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'tokens',
    type: 'address[]'
  }],
  name: 'getTokensPricesUSD',
  outputs: [{
    internalType: 'uint256[]',
    name: 'prices',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getWNative',
  outputs: [{
    internalType: 'address',
    name: 'wNative',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'grantRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'hasRole',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'aggregator',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pendingOwner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dfAddress',
    type: 'address'
  }],
  name: 'removeDataFeed',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'tokens',
    type: 'address[]'
  }, {
    internalType: 'address[]',
    name: 'dfAddresses',
    type: 'address[]'
  }],
  name: 'removeDataFeeds',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'renounceRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'revokeRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'dfAddress',
    type: 'address'
  }, {
    internalType: 'uint88',
    name: 'newWeight',
    type: 'uint88'
  }],
  name: 'setDataFeedWeight',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'tokens',
    type: 'address[]'
  }, {
    internalType: 'address[]',
    name: 'dfAddresses',
    type: 'address[]'
  }, {
    internalType: 'uint88[]',
    name: 'newWeights',
    type: 'uint88[]'
  }],
  name: 'setDataFeedsWeights',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'aggregator',
    type: 'address'
  }],
  name: 'setNativeDataFeed',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'setPendingOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];

var LBFactoryABI = [{
  inputs: [{
    internalType: 'address',
    name: '_feeRecipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_flashLoanFee',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'bp',
    type: 'uint256'
  }],
  name: 'BinHelper__BinStepOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'BinHelper__IdOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__AddressZero',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__BinStepHasNoPreset',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'lowerBound',
    type: 'uint256'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: 'higherBound',
    type: 'uint256'
  }],
  name: 'LBFactory__BinStepRequirementsBreached',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }],
  name: 'LBFactory__DecreasingPeriods',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__FactoryLockIsAlreadyInTheSameState',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'fees',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'maxFees',
    type: 'uint256'
  }],
  name: 'LBFactory__FeesAboveMax',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'fees',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'maxFees',
    type: 'uint256'
  }],
  name: 'LBFactory__FlashLoanFeeAboveMax',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'LBFactory__FunctionIsLockedForUsers',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'token',
    type: 'address'
  }],
  name: 'LBFactory__IdenticalAddresses',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__ImplementationNotSet',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__LBPairAlreadyExists',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__LBPairIgnoredIsAlreadyInTheSameState',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__LBPairNotCreated',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'LBPairImplementation',
    type: 'address'
  }],
  name: 'LBFactory__LBPairSafetyCheckFailed',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: 'max',
    type: 'uint256'
  }],
  name: 'LBFactory__ProtocolShareOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'LBFactory__QuoteAssetAlreadyWhitelisted',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'LBFactory__QuoteAssetNotWhitelisted',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: 'max',
    type: 'uint256'
  }],
  name: 'LBFactory__ReductionFactorOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }],
  name: 'LBFactory__SameFeeRecipient',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'flashLoanFee',
    type: 'uint256'
  }],
  name: 'LBFactory__SameFlashLoanFee',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'LBPairImplementation',
    type: 'address'
  }],
  name: 'LBFactory__SameImplementation',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Math128x128__PowerUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__AddressZero',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__NoPendingOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__NotOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__NotPendingOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__PendingOwnerAlreadySet',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds16Bits',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bool',
    name: 'unlocked',
    type: 'bool'
  }],
  name: 'FactoryLockedStatusUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'LBPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'baseFactor',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'filterPeriod',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'decayPeriod',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'reductionFactor',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'variableFeeControl',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'protocolShare',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'maxVolatilityAccumulated',
    type: 'uint256'
  }],
  name: 'FeeParametersSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldRecipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newRecipient',
    type: 'address'
  }],
  name: 'FeeRecipientSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldFlashLoanFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newFlashLoanFee',
    type: 'uint256'
  }],
  name: 'FlashLoanFeeSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'contract ILBPair',
    name: 'LBPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'pid',
    type: 'uint256'
  }],
  name: 'LBPairCreated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'LBPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'ignored',
    type: 'bool'
  }],
  name: 'LBPairIgnoredStateChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldLBPairImplementation',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'LBPairImplementation',
    type: 'address'
  }],
  name: 'LBPairImplementationSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'pendingOwner',
    type: 'address'
  }],
  name: 'PendingOwnerSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'PresetRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'baseFactor',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'filterPeriod',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'decayPeriod',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'reductionFactor',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'variableFeeControl',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'protocolShare',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'maxVolatilityAccumulated',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'sampleLifetime',
    type: 'uint256'
  }],
  name: 'PresetSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'QuoteAssetAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'QuoteAssetRemoved',
  type: 'event'
}, {
  inputs: [],
  name: 'LBPairImplementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'MAX_BIN_STEP',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'MAX_FEE',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'MAX_PROTOCOL_SHARE',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'MIN_BIN_STEP',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_quoteAsset',
    type: 'address'
  }],
  name: 'addQuoteAsset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  name: 'allLBPairs',
  outputs: [{
    internalType: 'contract ILBPair',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'becomeOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: '_activeId',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }],
  name: 'createLBPair',
  outputs: [{
    internalType: 'contract ILBPair',
    name: '_LBPair',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'creationUnlocked',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'feeRecipient',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'flashLoanFee',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: '_LBPair',
    type: 'address'
  }],
  name: 'forceDecay',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getAllBinSteps',
  outputs: [{
    internalType: 'uint256[]',
    name: 'presetsBinStep',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }],
  name: 'getAllLBPairs',
  outputs: [{
    components: [{
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'contract ILBPair',
      name: 'LBPair',
      type: 'address'
    }, {
      internalType: 'bool',
      name: 'createdByOwner',
      type: 'bool'
    }, {
      internalType: 'bool',
      name: 'ignoredForRouting',
      type: 'bool'
    }],
    internalType: 'struct ILBFactory.LBPairInformation[]',
    name: 'LBPairsAvailable',
    type: 'tuple[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenA',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_binStep',
    type: 'uint256'
  }],
  name: 'getLBPairInformation',
  outputs: [{
    components: [{
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'contract ILBPair',
      name: 'LBPair',
      type: 'address'
    }, {
      internalType: 'bool',
      name: 'createdByOwner',
      type: 'bool'
    }, {
      internalType: 'bool',
      name: 'ignoredForRouting',
      type: 'bool'
    }],
    internalType: 'struct ILBFactory.LBPairInformation',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getNumberOfLBPairs',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getNumberOfQuoteAssets',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }],
  name: 'getPreset',
  outputs: [{
    internalType: 'uint256',
    name: 'baseFactor',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'filterPeriod',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'decayPeriod',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reductionFactor',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'variableFeeControl',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'protocolShare',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'maxVolatilityAccumulated',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'sampleLifetime',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_index',
    type: 'uint256'
  }],
  name: 'getQuoteAsset',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_token',
    type: 'address'
  }],
  name: 'isQuoteAsset',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pendingOwner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }],
  name: 'removePreset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_quoteAsset',
    type: 'address'
  }],
  name: 'removeQuoteAsset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'revokePendingOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: '_locked',
    type: 'bool'
  }],
  name: 'setFactoryLockedState',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_feeRecipient',
    type: 'address'
  }],
  name: 'setFeeRecipient',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: '_variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: '_protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: '_maxVolatilityAccumulated',
    type: 'uint24'
  }],
  name: 'setFeesParametersOnPair',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_flashLoanFee',
    type: 'uint256'
  }],
  name: 'setFlashLoanFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_binStep',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: '_ignored',
    type: 'bool'
  }],
  name: 'setLBPairIgnored',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_LBPairImplementation',
    type: 'address'
  }],
  name: 'setLBPairImplementation',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'pendingOwner_',
    type: 'address'
  }],
  name: 'setPendingOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: '_reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: '_variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: '_protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: '_maxVolatilityAccumulated',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: '_sampleLifetime',
    type: 'uint16'
  }],
  name: 'setPreset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];

var LBPairABI = [{
  inputs: [{
    internalType: 'contract ILBFactory',
    name: '_factory',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'bp',
    type: 'uint256'
  }],
  name: 'BinHelper__BinStepOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'BinHelper__IdOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__AddressZero',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__AddressZeroOrThis',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__AlreadyInitialized',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBPair__CompositionFactorFlawed',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__DistributionsOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__FlashLoanCallbackFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__FlashLoanTokenNotSupported',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__FlashLoanWrongFee',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__InsufficientAmounts',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBPair__InsufficientLiquidityBurned',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBPair__InsufficientLiquidityMinted',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'newSize',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'oracleSize',
    type: 'uint256'
  }],
  name: 'LBPair__NewSizeTooSmall',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__OnlyFactory',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }],
  name: 'LBPair__OnlyFeeRecipient',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__OnlyStrictlyIncreasingId',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__WrongLengths',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'LBToken__BurnExceedsBalance',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__BurnFromAddress0',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'accountsLength',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'idsLength',
    type: 'uint256'
  }],
  name: 'LBToken__LengthMismatch',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__MintToAddress0',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__NotSupported',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'LBToken__SelfApproval',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'LBToken__SpenderNotApproved',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'LBToken__TransferExceedsBalance',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__TransferFromOrToAddress0',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__TransferToSelf',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Math128x128__PowerUnderflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'prod1',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'denominator',
    type: 'uint256'
  }],
  name: 'Math512Bits__MulDivOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'prod1',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'offset',
    type: 'uint256'
  }],
  name: 'Math512Bits__MulShiftOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'offset',
    type: 'uint256'
  }],
  name: 'Math512Bits__OffsetOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_minTimestamp',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_lookUpTimestamp',
    type: 'uint256'
  }],
  name: 'Oracle__LookUpTimestampTooOld',
  type: 'error'
}, {
  inputs: [],
  name: 'Oracle__NotInitialized',
  type: 'error'
}, {
  inputs: [],
  name: 'ReentrancyGuardUpgradeable__AlreadyInitialized',
  type: 'error'
}, {
  inputs: [],
  name: 'ReentrancyGuardUpgradeable__ReentrantCall',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds112Bits',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds128Bits',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds24Bits',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds40Bits',
  type: 'error'
}, {
  inputs: [],
  name: 'TokenHelper__CallFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'TokenHelper__NonContract',
  type: 'error'
}, {
  inputs: [],
  name: 'TokenHelper__TransferFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'TreeMath__ErrorDepthSearch',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'approved',
    type: 'bool'
  }],
  name: 'ApprovalForAll',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'Burn',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'feesX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'feesY',
    type: 'uint256'
  }],
  name: 'CompositionFee',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'DepositedToBin',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'FeesCollected',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBFlashLoanCallback',
    name: 'receiver',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract IERC20',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'fee',
    type: 'uint256'
  }],
  name: 'FlashLoan',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'previousSize',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newSize',
    type: 'uint256'
  }],
  name: 'OracleSizeIncreased',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'ProtocolFeesCollected',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'volatilityAccumulated',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'fees',
    type: 'uint256'
  }],
  name: 'Swap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  name: 'TransferBatch',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'TransferSingle',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'WithdrawnFromBin',
  type: 'event'
}, {
  inputs: [{
    internalType: 'address',
    name: '_account',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: '_accounts',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }],
  name: 'balanceOfBatch',
  outputs: [{
    internalType: 'uint256[]',
    name: 'batchBalances',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_amounts',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }],
  name: 'burn',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_account',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }],
  name: 'collectFees',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'collectProtocolFees',
  outputs: [{
    internalType: 'uint128',
    name: 'amountX',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'amountY',
    type: 'uint128'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'factory',
  outputs: [{
    internalType: 'contract ILBFactory',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'feeParameters',
  outputs: [{
    components: [{
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'baseFactor',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'filterPeriod',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'decayPeriod',
      type: 'uint16'
    }, {
      internalType: 'uint16',
      name: 'reductionFactor',
      type: 'uint16'
    }, {
      internalType: 'uint24',
      name: 'variableFeeControl',
      type: 'uint24'
    }, {
      internalType: 'uint16',
      name: 'protocolShare',
      type: 'uint16'
    }, {
      internalType: 'uint24',
      name: 'maxVolatilityAccumulated',
      type: 'uint24'
    }, {
      internalType: 'uint24',
      name: 'volatilityAccumulated',
      type: 'uint24'
    }, {
      internalType: 'uint24',
      name: 'volatilityReference',
      type: 'uint24'
    }, {
      internalType: 'uint24',
      name: 'indexRef',
      type: 'uint24'
    }, {
      internalType: 'uint40',
      name: 'time',
      type: 'uint40'
    }],
    internalType: 'struct FeeHelper.FeeParameters',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint24',
    name: '_id',
    type: 'uint24'
  }, {
    internalType: 'bool',
    name: '_swapForY',
    type: 'bool'
  }],
  name: 'findFirstNonEmptyBinId',
  outputs: [{
    internalType: 'uint24',
    name: '',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBFlashLoanCallback',
    name: '_receiver',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }, {
    internalType: 'bytes',
    name: '_data',
    type: 'bytes'
  }],
  name: 'flashLoan',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'forceDecay',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint24',
    name: '_id',
    type: 'uint24'
  }],
  name: 'getBin',
  outputs: [{
    internalType: 'uint256',
    name: 'reserveX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getGlobalFees',
  outputs: [{
    internalType: 'uint128',
    name: 'feesXTotal',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'feesYTotal',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'feesXProtocol',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'feesYProtocol',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getOracleParameters',
  outputs: [{
    internalType: 'uint256',
    name: 'oracleSampleLifetime',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'oracleSize',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'oracleActiveSize',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'oracleLastTimestamp',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'oracleId',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'min',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'max',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_timeDelta',
    type: 'uint256'
  }],
  name: 'getOracleSampleFrom',
  outputs: [{
    internalType: 'uint256',
    name: 'cumulativeId',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'cumulativeVolatilityAccumulated',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'cumulativeBinCrossed',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getReservesAndId',
  outputs: [{
    internalType: 'uint256',
    name: 'reserveX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserveY',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'activeId',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: '_newSize',
    type: 'uint16'
  }],
  name: 'increaseOracleLength',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: '_activeId',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: '_sampleLifetime',
    type: 'uint16'
  }, {
    internalType: 'bytes32',
    name: '_packedFeeParameters',
    type: 'bytes32'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_spender',
    type: 'address'
  }],
  name: 'isApprovedForAll',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_distributionX',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_distributionY',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }],
  name: 'mint',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: 'liquidityMinted',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_account',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }],
  name: 'pendingFees',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_from',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_amounts',
    type: 'uint256[]'
  }],
  name: 'safeBatchTransferFrom',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_from',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }],
  name: 'safeTransferFrom',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: '_spender',
    type: 'address'
  }, {
    internalType: 'bool',
    name: '_approved',
    type: 'bool'
  }],
  name: 'setApprovalForAll',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: '_packedFeeParameters',
    type: 'bytes32'
  }],
  name: 'setFeesParameters',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes4',
    name: '_interfaceId',
    type: 'bytes4'
  }],
  name: 'supportsInterface',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: '_swapForY',
    type: 'bool'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }],
  name: 'swap',
  outputs: [{
    internalType: 'uint256',
    name: 'amountXOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'tokenX',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'tokenY',
  outputs: [{
    internalType: 'contract IERC20',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}];

var LBQuoterABI = [{
  inputs: [{
    internalType: 'address',
    name: '_routerV2',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_factoryV1',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_factoryV2',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'bp',
    type: 'uint256'
  }],
  name: 'BinHelper__BinStepOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'BinHelper__IdOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__AddressZero',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__IdenticalAddresses',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__InsufficientAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__InsufficientLiquidity',
  type: 'error'
}, {
  inputs: [],
  name: 'LBQuoter_InvalidLength',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Math128x128__PowerUnderflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'prod1',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'denominator',
    type: 'uint256'
  }],
  name: 'Math512Bits__MulDivOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'prod1',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'offset',
    type: 'uint256'
  }],
  name: 'Math512Bits__MulShiftOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'offset',
    type: 'uint256'
  }],
  name: 'Math512Bits__OffsetOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'factoryV1',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'factoryV2',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: '_route',
    type: 'address[]'
  }, {
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }],
  name: 'findBestPathFromAmountIn',
  outputs: [{
    components: [{
      internalType: 'address[]',
      name: 'route',
      type: 'address[]'
    }, {
      internalType: 'address[]',
      name: 'pairs',
      type: 'address[]'
    }, {
      internalType: 'uint256[]',
      name: 'binSteps',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'amounts',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'virtualAmountsWithoutSlippage',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'fees',
      type: 'uint256[]'
    }],
    internalType: 'struct LBQuoter.Quote',
    name: 'quote',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: '_route',
    type: 'address[]'
  }, {
    internalType: 'uint256',
    name: '_amountOut',
    type: 'uint256'
  }],
  name: 'findBestPathFromAmountOut',
  outputs: [{
    components: [{
      internalType: 'address[]',
      name: 'route',
      type: 'address[]'
    }, {
      internalType: 'address[]',
      name: 'pairs',
      type: 'address[]'
    }, {
      internalType: 'uint256[]',
      name: 'binSteps',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'amounts',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'virtualAmountsWithoutSlippage',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'fees',
      type: 'uint256[]'
    }],
    internalType: 'struct LBQuoter.Quote',
    name: 'quote',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'routerV2',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}];

var LBQuoterV21ABI = [{
  inputs: [{
    internalType: 'address',
    name: 'factoryV1',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'legacyFactoryV2',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'factoryV2',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'legacyRouterV2',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'routerV2',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'JoeLibrary__AddressZero',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__IdenticalAddresses',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__InsufficientAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__InsufficientLiquidity',
  type: 'error'
}, {
  inputs: [],
  name: 'LBQuoter_InvalidLength',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Uint128x128Math__PowUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulDivOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulShiftOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'route',
    type: 'address[]'
  }, {
    internalType: 'uint128',
    name: 'amountIn',
    type: 'uint128'
  }],
  name: 'findBestPathFromAmountIn',
  outputs: [{
    components: [{
      internalType: 'address[]',
      name: 'route',
      type: 'address[]'
    }, {
      internalType: 'address[]',
      name: 'pairs',
      type: 'address[]'
    }, {
      internalType: 'uint256[]',
      name: 'binSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'uint128[]',
      name: 'amounts',
      type: 'uint128[]'
    }, {
      internalType: 'uint128[]',
      name: 'virtualAmountsWithoutSlippage',
      type: 'uint128[]'
    }, {
      internalType: 'uint128[]',
      name: 'fees',
      type: 'uint128[]'
    }],
    internalType: 'struct LBQuoter.Quote',
    name: 'quote',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'route',
    type: 'address[]'
  }, {
    internalType: 'uint128',
    name: 'amountOut',
    type: 'uint128'
  }],
  name: 'findBestPathFromAmountOut',
  outputs: [{
    components: [{
      internalType: 'address[]',
      name: 'route',
      type: 'address[]'
    }, {
      internalType: 'address[]',
      name: 'pairs',
      type: 'address[]'
    }, {
      internalType: 'uint256[]',
      name: 'binSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'uint128[]',
      name: 'amounts',
      type: 'uint128[]'
    }, {
      internalType: 'uint128[]',
      name: 'virtualAmountsWithoutSlippage',
      type: 'uint128[]'
    }, {
      internalType: 'uint128[]',
      name: 'fees',
      type: 'uint128[]'
    }],
    internalType: 'struct LBQuoter.Quote',
    name: 'quote',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactoryV1',
  outputs: [{
    internalType: 'address',
    name: 'factoryV1',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactoryV2',
  outputs: [{
    internalType: 'address',
    name: 'factoryV2',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLegacyFactoryV2',
  outputs: [{
    internalType: 'address',
    name: 'legacyFactoryV2',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLegacyRouterV2',
  outputs: [{
    internalType: 'address',
    name: 'legacyRouterV2',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getRouterV2',
  outputs: [{
    internalType: 'address',
    name: 'routerV2',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}];

var LBRouterABI = [{
  inputs: [{
    internalType: 'contract ILBFactory',
    name: '_factory',
    type: 'address'
  }, {
    internalType: 'contract IJoeFactory',
    name: '_oldFactory',
    type: 'address'
  }, {
    internalType: 'contract IWAVAX',
    name: '_wavax',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'bp',
    type: 'uint256'
  }],
  name: 'BinHelper__BinStepOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'int256',
    name: 'id',
    type: 'int256'
  }],
  name: 'BinHelper__IdOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'BinHelper__IntOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountXMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'LBRouter__AmountSlippageCaught',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBRouter__BinReserveOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__BrokenSwapSafetyCheck',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'currentTimestamp',
    type: 'uint256'
  }],
  name: 'LBRouter__DeadlineExceeded',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'LBRouter__FailedToSendAVAX',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'idDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'idSlippage',
    type: 'uint256'
  }],
  name: 'LBRouter__IdDesiredOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'int256',
    name: 'id',
    type: 'int256'
  }],
  name: 'LBRouter__IdOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'activeIdDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'idSlippage',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'activeId',
    type: 'uint256'
  }],
  name: 'LBRouter__IdSlippageCaught',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  name: 'LBRouter__InsufficientAmountOut',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'wrongToken',
    type: 'address'
  }],
  name: 'LBRouter__InvalidTokenPath',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__LengthsMismatch',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }],
  name: 'LBRouter__MaxAmountInExceeded',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__NotFactoryOwner',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBRouter__PairNotCreated',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__SenderIsNotWAVAX',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBRouter__SwapOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'excess',
    type: 'uint256'
  }],
  name: 'LBRouter__TooMuchTokensIn',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserve',
    type: 'uint256'
  }],
  name: 'LBRouter__WrongAmounts',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'msgValue',
    type: 'uint256'
  }],
  name: 'LBRouter__WrongAvaxLiquidityParameters',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__WrongTokenOrder',
  type: 'error'
}, {
  inputs: [],
  name: 'Math128x128__LogUnderflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Math128x128__PowerUnderflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'prod1',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'denominator',
    type: 'uint256'
  }],
  name: 'Math512Bits__MulDivOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'prod1',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'offset',
    type: 'uint256'
  }],
  name: 'Math512Bits__MulShiftOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'offset',
    type: 'uint256'
  }],
  name: 'Math512Bits__OffsetOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds128Bits',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }],
  name: 'SafeCast__Exceeds40Bits',
  type: 'error'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'binStep',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountX',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountY',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountXMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountYMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'activeIdDesired',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'idSlippage',
      type: 'uint256'
    }, {
      internalType: 'int256[]',
      name: 'deltaIds',
      type: 'int256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionX',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionY',
      type: 'uint256[]'
    }, {
      internalType: 'address',
      name: 'to',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'deadline',
      type: 'uint256'
    }],
    internalType: 'struct ILBRouter.LiquidityParameters',
    name: '_liquidityParameters',
    type: 'tuple'
  }],
  name: 'addLiquidity',
  outputs: [{
    internalType: 'uint256[]',
    name: 'depositIds',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'liquidityMinted',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'binStep',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountX',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountY',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountXMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountYMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'activeIdDesired',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'idSlippage',
      type: 'uint256'
    }, {
      internalType: 'int256[]',
      name: 'deltaIds',
      type: 'int256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionX',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionY',
      type: 'uint256[]'
    }, {
      internalType: 'address',
      name: 'to',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'deadline',
      type: 'uint256'
    }],
    internalType: 'struct ILBRouter.LiquidityParameters',
    name: '_liquidityParameters',
    type: 'tuple'
  }],
  name: 'addLiquidityAVAX',
  outputs: [{
    internalType: 'uint256[]',
    name: 'depositIds',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'liquidityMinted',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: '_activeId',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }],
  name: 'createLBPair',
  outputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'factory',
  outputs: [{
    internalType: 'contract ILBFactory',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: '_LBPair',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_price',
    type: 'uint256'
  }],
  name: 'getIdFromPrice',
  outputs: [{
    internalType: 'uint24',
    name: '',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: '_LBPair',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: '_id',
    type: 'uint24'
  }],
  name: 'getPriceFromId',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: '_LBPair',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amountOut',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: '_swapForY',
    type: 'bool'
  }],
  name: 'getSwapIn',
  outputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'feesIn',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: '_LBPair',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: '_swapForY',
    type: 'bool'
  }],
  name: 'getSwapOut',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'feesIn',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'oldFactory',
  outputs: [{
    internalType: 'contract IJoeFactory',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: '_tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: '_amountXMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountYMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_amounts',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: '_binStep',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: '_amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountAVAXMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_amounts',
    type: 'uint256[]'
  }, {
    internalType: 'address payable',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityAVAX',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountAVAX',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapAVAXForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsIn',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapExactAVAXForTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapExactAVAXForTokensSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountOutMinAVAX',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address payable',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForAVAX',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountOutMinAVAX',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address payable',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForAVAXSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountAVAXOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountInMax',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address payable',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactAVAX',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsIn',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: '_amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: '_amountInMax',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: '_pairBinSteps',
    type: 'uint256[]'
  }, {
    internalType: 'contract IERC20[]',
    name: '_tokenPath',
    type: 'address[]'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsIn',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: '_token',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_amount',
    type: 'uint256'
  }],
  name: 'sweep',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBToken',
    name: '_lbToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: '_to',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: '_ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: '_amounts',
    type: 'uint256[]'
  }],
  name: 'sweepLBToken',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'wavax',
  outputs: [{
    internalType: 'contract IWAVAX',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  stateMutability: 'payable',
  type: 'receive'
}];

var LBRouterV21ABI = [{
  inputs: [{
    internalType: 'contract ILBFactory',
    name: 'factory',
    type: 'address'
  }, {
    internalType: 'contract IJoeFactory',
    name: 'factoryV1',
    type: 'address'
  }, {
    internalType: 'contract ILBLegacyFactory',
    name: 'legacyFactory',
    type: 'address'
  }, {
    internalType: 'contract ILBLegacyRouter',
    name: 'legacyRouter',
    type: 'address'
  }, {
    internalType: 'contract IWNATIVE',
    name: 'wnative',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'AddressHelper__CallFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'AddressHelper__NonContract',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__InsufficientAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'JoeLibrary__InsufficientLiquidity',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountSlippage',
    type: 'uint256'
  }],
  name: 'LBRouter__AmountSlippageBPTooBig',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountXMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'LBRouter__AmountSlippageCaught',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBRouter__BinReserveOverflows',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__BrokenSwapSafetyCheck',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'currentTimestamp',
    type: 'uint256'
  }],
  name: 'LBRouter__DeadlineExceeded',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'LBRouter__FailedToSendNATIVE',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'idDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'idSlippage',
    type: 'uint256'
  }],
  name: 'LBRouter__IdDesiredOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'int256',
    name: 'id',
    type: 'int256'
  }],
  name: 'LBRouter__IdOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'activeIdDesired',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'idSlippage',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'activeId',
    type: 'uint256'
  }],
  name: 'LBRouter__IdSlippageCaught',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  name: 'LBRouter__InsufficientAmountOut',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'wrongToken',
    type: 'address'
  }],
  name: 'LBRouter__InvalidTokenPath',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'version',
    type: 'uint256'
  }],
  name: 'LBRouter__InvalidVersion',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__LengthsMismatch',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }],
  name: 'LBRouter__MaxAmountInExceeded',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__NotFactoryOwner',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBRouter__PairNotCreated',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__SenderIsNotWNATIVE',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'LBRouter__SwapOverflows',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'excess',
    type: 'uint256'
  }],
  name: 'LBRouter__TooMuchTokensIn',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reserve',
    type: 'uint256'
  }],
  name: 'LBRouter__WrongAmounts',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'msgValue',
    type: 'uint256'
  }],
  name: 'LBRouter__WrongNativeLiquidityParameters',
  type: 'error'
}, {
  inputs: [],
  name: 'LBRouter__WrongTokenOrder',
  type: 'error'
}, {
  inputs: [],
  name: 'TokenHelper__TransferFailed',
  type: 'error'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'binStep',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountX',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountY',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountXMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountYMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'activeIdDesired',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'idSlippage',
      type: 'uint256'
    }, {
      internalType: 'int256[]',
      name: 'deltaIds',
      type: 'int256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionX',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionY',
      type: 'uint256[]'
    }, {
      internalType: 'address',
      name: 'to',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'refundTo',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'deadline',
      type: 'uint256'
    }],
    internalType: 'struct ILBRouter.LiquidityParameters',
    name: 'liquidityParameters',
    type: 'tuple'
  }],
  name: 'addLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountXAdded',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYAdded',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountXLeft',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYLeft',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: 'depositIds',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'liquidityMinted',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'binStep',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountX',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountY',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountXMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'amountYMin',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'activeIdDesired',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'idSlippage',
      type: 'uint256'
    }, {
      internalType: 'int256[]',
      name: 'deltaIds',
      type: 'int256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionX',
      type: 'uint256[]'
    }, {
      internalType: 'uint256[]',
      name: 'distributionY',
      type: 'uint256[]'
    }, {
      internalType: 'address',
      name: 'to',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'refundTo',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'deadline',
      type: 'uint256'
    }],
    internalType: 'struct ILBRouter.LiquidityParameters',
    name: 'liquidityParameters',
    type: 'tuple'
  }],
  name: 'addLiquidityNATIVE',
  outputs: [{
    internalType: 'uint256',
    name: 'amountXAdded',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYAdded',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountXLeft',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYLeft',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: 'depositIds',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'liquidityMinted',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: 'activeId',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }],
  name: 'createLBPair',
  outputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactory',
  outputs: [{
    internalType: 'contract ILBFactory',
    name: 'lbFactory',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'price',
    type: 'uint256'
  }],
  name: 'getIdFromPrice',
  outputs: [{
    internalType: 'uint24',
    name: '',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLegacyFactory',
  outputs: [{
    internalType: 'contract ILBLegacyFactory',
    name: 'legacyLBfactory',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLegacyRouter',
  outputs: [{
    internalType: 'contract ILBLegacyRouter',
    name: 'legacyRouter',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'getPriceFromId',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }, {
    internalType: 'uint128',
    name: 'amountOut',
    type: 'uint128'
  }, {
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }],
  name: 'getSwapIn',
  outputs: [{
    internalType: 'uint128',
    name: 'amountIn',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'amountOutLeft',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'fee',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }, {
    internalType: 'uint128',
    name: 'amountIn',
    type: 'uint128'
  }, {
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }],
  name: 'getSwapOut',
  outputs: [{
    internalType: 'uint128',
    name: 'amountInLeft',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'amountOut',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'fee',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getV1Factory',
  outputs: [{
    internalType: 'contract IJoeFactory',
    name: 'factoryV1',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getWNATIVE',
  outputs: [{
    internalType: 'contract IWNATIVE',
    name: 'wnative',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: 'amountXMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountYMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidity',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'uint256',
    name: 'amountTokenMin',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountNATIVEMin',
    type: 'uint256'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }, {
    internalType: 'address payable',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'removeLiquidityNATIVE',
  outputs: [{
    internalType: 'uint256',
    name: 'amountToken',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountNATIVE',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactNATIVEForTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactNATIVEForTokensSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMinNATIVE',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address payable',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForNATIVE',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMinNATIVE',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address payable',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForNATIVESupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountIn',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountOutMin',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapExactTokensForTokensSupportingFeeOnTransferTokens',
  outputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapNATIVEForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsIn',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountNATIVEOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address payable',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactNATIVE',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsIn',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountOut',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountInMax',
    type: 'uint256'
  }, {
    components: [{
      internalType: 'uint256[]',
      name: 'pairBinSteps',
      type: 'uint256[]'
    }, {
      internalType: 'enum ILBRouter.Version[]',
      name: 'versions',
      type: 'uint8[]'
    }, {
      internalType: 'contract IERC20[]',
      name: 'tokenPath',
      type: 'address[]'
    }],
    internalType: 'struct ILBRouter.Path',
    name: 'path',
    type: 'tuple'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'deadline',
    type: 'uint256'
  }],
  name: 'swapTokensForExactTokens',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsIn',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'sweep',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBToken',
    name: 'lbToken',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  name: 'sweepLBToken',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  stateMutability: 'payable',
  type: 'receive'
}];

var LBRewarderABI = [{
  inputs: [],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }],
  name: 'Rewarder__AlreadySetForEpoch',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__ClawbackDelayNotPassed',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__ClawbackDelayTooLow',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__EmptyMerkleEntries',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__EpochCanceled',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__EpochDoesNotExist',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }],
  name: 'Rewarder__InsufficientBalance',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__InvalidAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__InvalidEpoch',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__InvalidLength',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__InvalidProof',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__InvalidRoot',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__InvalidStart',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__MarketAlreadyWhitelisted',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__MarketNotWhitelisted',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__NativeTransferFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__OnlyClaimForSelf',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__OnlyValidLatestEpoch',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__OverlappingEpoch',
  type: 'error'
}, {
  inputs: [],
  name: 'Rewarder__ZeroAddress',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeAccessControl__DefaultAdminRoleBoundToOwner',
  type: 'error'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'SafeAccessControl__OnlyOwnerOrRole',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint96',
    name: 'newClawbackDelay',
    type: 'uint96'
  }],
  name: 'ClawbackDelayUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'newClawbackRecipient',
    type: 'address'
  }],
  name: 'ClawbackRecipientUpdated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint128',
    name: 'start',
    type: 'uint128'
  }, {
    indexed: false,
    internalType: 'uint128',
    name: 'duration',
    type: 'uint128'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'root',
    type: 'bytes32'
  }],
  name: 'EpochAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }],
  name: 'EpochCanceled',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint8',
    name: 'version',
    type: 'uint8'
  }],
  name: 'Initialized',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  name: 'MarketAddedToWhitelist',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  name: 'MarketRemovedFromWhitelist',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferStarted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Paused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'released',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'unreleased',
    type: 'uint256'
  }],
  name: 'RewardClaimed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'clawbackAmount',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }],
  name: 'RewardClawedBack',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'previousAdminRole',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'bytes32',
    name: 'newAdminRole',
    type: 'bytes32'
  }],
  name: 'RoleAdminChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }],
  name: 'RoleGranted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }],
  name: 'RoleRevoked',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'Unpaused',
  type: 'event'
}, {
  inputs: [],
  name: 'CLAWBACK_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'DEFAULT_ADMIN_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'PAUSER_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'UNPAUSER_ROLE',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  name: 'addMarketToWhitelist',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'address',
      name: 'market',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'epoch',
      type: 'uint256'
    }, {
      internalType: 'contract IERC20Upgradeable',
      name: 'token',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'user',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'bytes32[]',
      name: 'merkleProof',
      type: 'bytes32[]'
    }],
    internalType: 'struct IRewarder.MerkleEntry[]',
    name: 'merkleEntries',
    type: 'tuple[]'
  }],
  name: 'batchClaim',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'address',
      name: 'market',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'epoch',
      type: 'uint256'
    }, {
      internalType: 'contract IERC20Upgradeable',
      name: 'token',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'user',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'bytes32[]',
      name: 'merkleProof',
      type: 'bytes32[]'
    }],
    internalType: 'struct IRewarder.MerkleEntry[]',
    name: 'merkleEntries',
    type: 'tuple[]'
  }],
  name: 'batchClawback',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }],
  name: 'cancelEpoch',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes32[]',
    name: 'merkleProof',
    type: 'bytes32[]'
  }],
  name: 'claim',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes32[]',
    name: 'merkleProof',
    type: 'bytes32[]'
  }],
  name: 'clawback',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'address',
      name: 'market',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'epoch',
      type: 'uint256'
    }, {
      internalType: 'contract IERC20Upgradeable',
      name: 'token',
      type: 'address'
    }, {
      internalType: 'address',
      name: 'user',
      type: 'address'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }, {
      internalType: 'bytes32[]',
      name: 'merkleProof',
      type: 'bytes32[]'
    }],
    internalType: 'struct IRewarder.MerkleEntry[]',
    name: 'merkleEntries',
    type: 'tuple[]'
  }],
  name: 'getBatchReleasableAmounts',
  outputs: [{
    internalType: 'uint256[]',
    name: 'releasableAmounts',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getClawbackParameters',
  outputs: [{
    internalType: 'address',
    name: 'clawbackRecipient',
    type: 'address'
  }, {
    internalType: 'uint96',
    name: 'clawbackDelay',
    type: 'uint96'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }],
  name: 'getEpochParameters',
  outputs: [{
    components: [{
      internalType: 'bytes32',
      name: 'root',
      type: 'bytes32'
    }, {
      internalType: 'uint128',
      name: 'start',
      type: 'uint128'
    }, {
      internalType: 'uint128',
      name: 'duration',
      type: 'uint128'
    }],
    internalType: 'struct IRewarder.EpochParameters',
    name: 'params',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  name: 'getNumberOfEpochs',
  outputs: [{
    internalType: 'uint256',
    name: 'epochs',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getNumberOfWhitelistedMarkets',
  outputs: [{
    internalType: 'uint256',
    name: 'count',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes32[]',
    name: 'merkleProof',
    type: 'bytes32[]'
  }],
  name: 'getReleasableAmount',
  outputs: [{
    internalType: 'uint256',
    name: 'releasable',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getReleased',
  outputs: [{
    internalType: 'uint256',
    name: 'released',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }],
  name: 'getRoleAdmin',
  outputs: [{
    internalType: 'bytes32',
    name: '',
    type: 'bytes32'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getWhitelistedMarket',
  outputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'grantRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'hasRole',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint96',
    name: 'clawbackDelay',
    type: 'uint96'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  name: 'isMarketWhitelisted',
  outputs: [{
    internalType: 'bool',
    name: 'isWhitelisted',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'paused',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pendingOwner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }],
  name: 'removeMarketFromWhitelist',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'renounceRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes32',
    name: 'role',
    type: 'bytes32'
  }, {
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'revokeRole',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint96',
    name: 'newClawbackDelay',
    type: 'uint96'
  }],
  name: 'setClawbackDelay',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newRecipient',
    type: 'address'
  }],
  name: 'setClawbackRecipient',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    internalType: 'uint128',
    name: 'start',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'duration',
    type: 'uint128'
  }, {
    internalType: 'contract IERC20Upgradeable[]',
    name: 'tokens',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: 'totalAmountToRelease',
    type: 'uint256[]'
  }, {
    internalType: 'bytes32',
    name: 'root',
    type: 'bytes32'
  }],
  name: 'setNewEpoch',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bytes4',
    name: 'interfaceId',
    type: 'bytes4'
  }],
  name: 'supportsInterface',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'unpause',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'market',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'epoch',
    type: 'uint256'
  }, {
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }, {
    internalType: 'bytes32[]',
    name: 'merkleProof',
    type: 'bytes32[]'
  }],
  name: 'verify',
  outputs: [{
    internalType: 'bool',
    name: 'isValid',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  stateMutability: 'payable',
  type: 'receive'
}];

var VaultABI = [{
  inputs: [{
    internalType: 'contract IVaultFactory',
    name: 'factory',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'BaseVault__AlreadyWhitelisted',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__BurnMinShares',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__DepositsPaused',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__InvalidNativeAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__InvalidRecipient',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__InvalidRound',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__InvalidShares',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__InvalidStrategy',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__InvalidToken',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__MaxSharesExceeded',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__NativeTransferFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__NoNativeToken',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__NoQueuedWithdrawal',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__NotInEmergencyMode',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'BaseVault__NotWhitelisted',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__OnlyFactory',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__OnlyStrategy',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__OnlyWNative',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__SameStrategy',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__SameWhitelistState',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__Unauthorized',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__ZeroAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'BaseVault__ZeroShares',
  type: 'error'
}, {
  inputs: [],
  name: 'SimpleVault__AmountsOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'SimpleVault__ZeroCross',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulDivOverflow',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }],
  name: 'Deposited',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'DepositsPaused',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'DepositsResumed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [],
  name: 'EmergencyMode',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'EmergencyWithdrawal',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint8',
    name: 'version',
    type: 'uint8'
  }],
  name: 'Initialized',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'token',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'Recovered',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'contract IStrategy',
    name: 'strategy',
    type: 'address'
  }],
  name: 'StrategySet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address[]',
    name: 'addresses',
    type: 'address[]'
  }],
  name: 'WhitelistAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address[]',
    name: 'addresses',
    type: 'address[]'
  }],
  name: 'WhitelistRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: 'WhitelistStateChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }],
  name: 'WithdrawalCancelled',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'totalQueuedQhares',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'WithdrawalExecuted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }],
  name: 'WithdrawalQueued',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'WithdrawalRedeemed',
  type: 'event'
}, {
  stateMutability: 'payable',
  type: 'fallback'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'addresses',
    type: 'address[]'
  }],
  name: 'addToWhitelist',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }],
  name: 'cancelQueuedWithdrawal',
  outputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'decimals',
  outputs: [{
    internalType: 'uint8',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'subtractedValue',
    type: 'uint256'
  }],
  name: 'decreaseAllowance',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'deposit',
  outputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'effectiveX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'effectiveY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'depositNative',
  outputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'effectiveX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'effectiveY',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [],
  name: 'emergencyWithdraw',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'executeQueuedWithdrawals',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getAumAnnualFee',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getBalances',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getCurrentRound',
  outputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getCurrentTotalQueuedWithdrawal',
  outputs: [{
    internalType: 'uint256',
    name: 'totalQueuedShares',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactory',
  outputs: [{
    internalType: 'contract IVaultFactory',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getOperators',
  outputs: [{
    internalType: 'address',
    name: 'defaultOperator',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'operator',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getPair',
  outputs: [{
    internalType: 'contract ILBPair',
    name: '',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getQueuedWithdrawal',
  outputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getRange',
  outputs: [{
    internalType: 'uint24',
    name: 'low',
    type: 'uint24'
  }, {
    internalType: 'uint24',
    name: 'upper',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getRedeemableAmounts',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getStrategy',
  outputs: [{
    internalType: 'contract IStrategy',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getTokenX',
  outputs: [{
    internalType: 'contract IERC20Upgradeable',
    name: '',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getTokenY',
  outputs: [{
    internalType: 'contract IERC20Upgradeable',
    name: '',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }],
  name: 'getTotalQueuedWithdrawal',
  outputs: [{
    internalType: 'uint256',
    name: 'totalQueuedShares',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'addedValue',
    type: 'uint256'
  }],
  name: 'increaseAllowance',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'string',
    name: 'name',
    type: 'string'
  }, {
    internalType: 'string',
    name: 'symbol',
    type: 'string'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'isDepositsPaused',
  outputs: [{
    internalType: 'bool',
    name: 'paused',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'isWhitelisted',
  outputs: [{
    internalType: 'bool',
    name: 'whitelisted',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'isWhitelistedOnly',
  outputs: [{
    internalType: 'bool',
    name: 'whitelist',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pauseDeposits',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }],
  name: 'previewAmounts',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'previewShares',
  outputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'effectiveX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'effectiveY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'shares',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }],
  name: 'queueWithdrawal',
  outputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'recoverERC20',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }],
  name: 'redeemQueuedWithdrawal',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'round',
    type: 'uint256'
  }, {
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }],
  name: 'redeemQueuedWithdrawalNative',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'addresses',
    type: 'address[]'
  }],
  name: 'removeFromWhitelist',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'resumeDeposits',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'setEmergencyMode',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IStrategy',
    name: 'newStrategy',
    type: 'address'
  }],
  name: 'setStrategy',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: 'state',
    type: 'bool'
  }],
  name: 'setWhitelistState',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  stateMutability: 'payable',
  type: 'receive'
}];

var VaultFactoryABI = [{
  inputs: [{
    internalType: 'address',
    name: 'wnative',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidDecimals',
  type: 'error'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidFeeRecipient',
  type: 'error'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidLength',
  type: 'error'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidOraclePrice',
  type: 'error'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidStrategy',
  type: 'error'
}, {
  inputs: [],
  name: 'VaultFactory__InvalidType',
  type: 'error'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }],
  name: 'VaultFactory__StrategyImplementationNotSet',
  type: 'error'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }],
  name: 'VaultFactory__VaultImplementationNotSet',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'defaultOperator',
    type: 'address'
  }],
  name: 'DefaultOperatorSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }],
  name: 'FeeRecipientSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint8',
    name: 'version',
    type: 'uint8'
  }],
  name: 'Initialized',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferStarted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'strategy',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'strategyIndex',
    type: 'uint256'
  }],
  name: 'StrategyCreated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'strategyImplementation',
    type: 'address'
  }],
  name: 'StrategyImplementationSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'vaultIndex',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'tokenX',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'tokenY',
    type: 'address'
  }],
  name: 'VaultCreated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'vaultImplementation',
    type: 'address'
  }],
  name: 'VaultImplementationSet',
  type: 'event'
}, {
  inputs: [],
  name: 'acceptOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'address[]',
    name: 'addresses',
    type: 'address[]'
  }],
  name: 'addToWhitelist',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'vaults',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: 'rounds',
    type: 'uint256[]'
  }, {
    internalType: 'bool[]',
    name: 'withdrawNative',
    type: 'bool[]'
  }],
  name: 'batchRedeemQueuedWithdrawals',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }],
  name: 'createDefaultStrategy',
  outputs: [{
    internalType: 'address',
    name: 'strategy',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    internalType: 'contract IAggregatorV3',
    name: 'dataFeedX',
    type: 'address'
  }, {
    internalType: 'contract IAggregatorV3',
    name: 'dataFeedY',
    type: 'address'
  }],
  name: 'createOracleVault',
  outputs: [{
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    internalType: 'contract IAggregatorV3',
    name: 'dataFeedX',
    type: 'address'
  }, {
    internalType: 'contract IAggregatorV3',
    name: 'dataFeedY',
    type: 'address'
  }],
  name: 'createOracleVaultAndDefaultStrategy',
  outputs: [{
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'strategy',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }],
  name: 'createSimpleVault',
  outputs: [{
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }],
  name: 'createSimpleVaultAndDefaultStrategy',
  outputs: [{
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'strategy',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getDefaultOperator',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFeeRecipient',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }],
  name: 'getNumberOfStrategies',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }],
  name: 'getNumberOfVaults',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }, {
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getStrategyAt',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }],
  name: 'getStrategyImplementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'strategy',
    type: 'address'
  }],
  name: 'getStrategyType',
  outputs: [{
    internalType: 'enum IVaultFactory.StrategyType',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }, {
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getVaultAt',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }],
  name: 'getVaultImplementation',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'vault',
    type: 'address'
  }],
  name: 'getVaultType',
  outputs: [{
    internalType: 'enum IVaultFactory.VaultType',
    name: '',
    type: 'uint8'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getWNative',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'strategy',
    type: 'address'
  }],
  name: 'linkVaultToStrategy',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }],
  name: 'pauseDeposits',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'pendingOwner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'contract IERC20Upgradeable',
    name: 'token',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'recipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'recoverERC20',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'address[]',
    name: 'addresses',
    type: 'address[]'
  }],
  name: 'removeFromWhitelist',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }],
  name: 'resetPendingAumAnnualFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }],
  name: 'resumeDeposits',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'defaultOperator',
    type: 'address'
  }],
  name: 'setDefaultOperator',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }],
  name: 'setEmergencyMode',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }],
  name: 'setFeeRecipient',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IStrategy',
    name: 'strategy',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'operator',
    type: 'address'
  }],
  name: 'setOperator',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'pendingAumAnnualFee',
    type: 'uint16'
  }],
  name: 'setPendingAumAnnualFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.StrategyType',
    name: 'sType',
    type: 'uint8'
  }, {
    internalType: 'address',
    name: 'strategyImplementation',
    type: 'address'
  }],
  name: 'setStrategyImplementation',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'enum IVaultFactory.VaultType',
    name: 'vType',
    type: 'uint8'
  }, {
    internalType: 'address',
    name: 'vaultImplementation',
    type: 'address'
  }],
  name: 'setVaultImplementation',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IBaseVault',
    name: 'vault',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'isWhitelisted',
    type: 'bool'
  }],
  name: 'setWhitelistState',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'transferOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];

var LBFactoryV21ABI = [{
  inputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'flashLoanFee',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'LBFactory__AddressZero',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__BinStepHasNoPreset',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__BinStepTooLow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'fees',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'maxFees',
    type: 'uint256'
  }],
  name: 'LBFactory__FlashLoanFeeAboveMax',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'token',
    type: 'address'
  }],
  name: 'LBFactory__IdenticalAddresses',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__ImplementationNotSet',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__LBPairAlreadyExists',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__LBPairDoesNotExist',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__LBPairIgnoredIsAlreadyInTheSameState',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__LBPairNotCreated',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'LBPairImplementation',
    type: 'address'
  }],
  name: 'LBFactory__LBPairSafetyCheckFailed',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'LBFactory__PresetIsLockedForUsers',
  type: 'error'
}, {
  inputs: [],
  name: 'LBFactory__PresetOpenStateIsAlreadyInTheSameState',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'LBFactory__QuoteAssetAlreadyWhitelisted',
  type: 'error'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'LBFactory__QuoteAssetNotWhitelisted',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }],
  name: 'LBFactory__SameFeeRecipient',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'flashLoanFee',
    type: 'uint256'
  }],
  name: 'LBFactory__SameFlashLoanFee',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'LBPairImplementation',
    type: 'address'
  }],
  name: 'LBFactory__SameImplementation',
  type: 'error'
}, {
  inputs: [],
  name: 'PairParametersHelper__InvalidParameter',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__AddressZero',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__NoPendingOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__NotOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__NotPendingOwner',
  type: 'error'
}, {
  inputs: [],
  name: 'PendingOwnable__PendingOwnerAlreadySet',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeCast__Exceeds16Bits',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Uint128x128Math__PowUnderflow',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldRecipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'newRecipient',
    type: 'address'
  }],
  name: 'FeeRecipientSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'uint256',
    name: 'oldFlashLoanFee',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'newFlashLoanFee',
    type: 'uint256'
  }],
  name: 'FlashLoanFeeSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'contract ILBPair',
    name: 'LBPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'pid',
    type: 'uint256'
  }],
  name: 'LBPairCreated',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'LBPair',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'ignored',
    type: 'bool'
  }],
  name: 'LBPairIgnoredStateChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: false,
    internalType: 'address',
    name: 'oldLBPairImplementation',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'address',
    name: 'LBPairImplementation',
    type: 'address'
  }],
  name: 'LBPairImplementationSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'previousOwner',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'newOwner',
    type: 'address'
  }],
  name: 'OwnershipTransferred',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'pendingOwner',
    type: 'address'
  }],
  name: 'PendingOwnerSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }, {
    indexed: true,
    internalType: 'bool',
    name: 'isOpen',
    type: 'bool'
  }],
  name: 'PresetOpenStateChanged',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'PresetRemoved',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'baseFactor',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'filterPeriod',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'decayPeriod',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'reductionFactor',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'variableFeeControl',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'protocolShare',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'maxVolatilityAccumulator',
    type: 'uint256'
  }],
  name: 'PresetSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'QuoteAssetAdded',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'QuoteAssetRemoved',
  type: 'event'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'addQuoteAsset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'becomeOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint24',
    name: 'activeId',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }],
  name: 'createLBPair',
  outputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBPair',
    name: 'pair',
    type: 'address'
  }],
  name: 'forceDecay',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getAllBinSteps',
  outputs: [{
    internalType: 'uint256[]',
    name: 'binStepWithPreset',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }],
  name: 'getAllLBPairs',
  outputs: [{
    components: [{
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'contract ILBPair',
      name: 'LBPair',
      type: 'address'
    }, {
      internalType: 'bool',
      name: 'createdByOwner',
      type: 'bool'
    }, {
      internalType: 'bool',
      name: 'ignoredForRouting',
      type: 'bool'
    }],
    internalType: 'struct ILBFactory.LBPairInformation[]',
    name: 'lbPairsAvailable',
    type: 'tuple[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFeeRecipient',
  outputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFlashLoanFee',
  outputs: [{
    internalType: 'uint256',
    name: 'flashLoanFee',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getLBPairAtIndex',
  outputs: [{
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getLBPairImplementation',
  outputs: [{
    internalType: 'address',
    name: 'lbPairImplementation',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenA',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenB',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'getLBPairInformation',
  outputs: [{
    components: [{
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'contract ILBPair',
      name: 'LBPair',
      type: 'address'
    }, {
      internalType: 'bool',
      name: 'createdByOwner',
      type: 'bool'
    }, {
      internalType: 'bool',
      name: 'ignoredForRouting',
      type: 'bool'
    }],
    internalType: 'struct ILBFactory.LBPairInformation',
    name: 'lbPairInformation',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getMaxFlashLoanFee',
  outputs: [{
    internalType: 'uint256',
    name: 'maxFee',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getMinBinStep',
  outputs: [{
    internalType: 'uint256',
    name: 'minBinStep',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getNumberOfLBPairs',
  outputs: [{
    internalType: 'uint256',
    name: 'lbPairNumber',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getNumberOfQuoteAssets',
  outputs: [{
    internalType: 'uint256',
    name: 'numberOfQuoteAssets',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getOpenBinSteps',
  outputs: [{
    internalType: 'uint256[]',
    name: 'openBinStep',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'binStep',
    type: 'uint256'
  }],
  name: 'getPreset',
  outputs: [{
    internalType: 'uint256',
    name: 'baseFactor',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'filterPeriod',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'decayPeriod',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'reductionFactor',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'variableFeeControl',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'protocolShare',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'maxVolatilityAccumulator',
    type: 'uint256'
  }, {
    internalType: 'bool',
    name: 'isOpen',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'index',
    type: 'uint256'
  }],
  name: 'getQuoteAssetAtIndex',
  outputs: [{
    internalType: 'contract IERC20',
    name: 'asset',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'token',
    type: 'address'
  }],
  name: 'isQuoteAsset',
  outputs: [{
    internalType: 'bool',
    name: 'isQuote',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'owner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'pendingOwner',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }],
  name: 'removePreset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'quoteAsset',
    type: 'address'
  }],
  name: 'removeQuoteAsset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'renounceOwnership',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'revokePendingOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }],
  name: 'setFeeRecipient',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'maxVolatilityAccumulator',
    type: 'uint24'
  }],
  name: 'setFeesParametersOnPair',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'flashLoanFee',
    type: 'uint256'
  }],
  name: 'setFlashLoanFee',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'bool',
    name: 'ignored',
    type: 'bool'
  }],
  name: 'setLBPairIgnored',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'newLBPairImplementation',
    type: 'address'
  }],
  name: 'setLBPairImplementation',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'pendingOwner_',
    type: 'address'
  }],
  name: 'setPendingOwner',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'maxVolatilityAccumulator',
    type: 'uint24'
  }, {
    internalType: 'bool',
    name: 'isOpen',
    type: 'bool'
  }],
  name: 'setPreset',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'bool',
    name: 'isOpen',
    type: 'bool'
  }],
  name: 'setPresetOpenState',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}];

var LBPairV21ABI = [{
  inputs: [{
    internalType: 'contract ILBFactory',
    name: 'factory_',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'AddressHelper__CallFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'AddressHelper__NonContract',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'BinHelper__CompositionFactorFlawed',
  type: 'error'
}, {
  inputs: [],
  name: 'BinHelper__LiquidityOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'FeeHelper__FeeOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__AddressZero',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__AlreadyInitialized',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__EmptyMarketConfigs',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__FlashLoanCallbackFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__FlashLoanInsufficientAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__InsufficientAmountIn',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__InsufficientAmountOut',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__InvalidInput',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__InvalidStaticFeeParameters',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__MaxTotalFeeExceeded',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__OnlyFactory',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__OnlyProtocolFeeRecipient',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__OutOfLiquidity',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__TokenNotSupported',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'LBPair__ZeroAmount',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'LBPair__ZeroAmountsOut',
  type: 'error'
}, {
  inputs: [],
  name: 'LBPair__ZeroBorrowAmount',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'LBPair__ZeroShares',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__AddressThisOrZero',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'LBToken__BurnExceedsBalance',
  type: 'error'
}, {
  inputs: [],
  name: 'LBToken__InvalidLength',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }],
  name: 'LBToken__SelfApproval',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'LBToken__SpenderNotApproved',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'LBToken__TransferExceedsBalance',
  type: 'error'
}, {
  inputs: [],
  name: 'LiquidityConfigurations__InvalidConfig',
  type: 'error'
}, {
  inputs: [],
  name: 'OracleHelper__InvalidOracleId',
  type: 'error'
}, {
  inputs: [],
  name: 'OracleHelper__LookUpTimestampTooOld',
  type: 'error'
}, {
  inputs: [],
  name: 'OracleHelper__NewLengthTooSmall',
  type: 'error'
}, {
  inputs: [],
  name: 'PackedUint128Math__AddOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'PackedUint128Math__MultiplierTooLarge',
  type: 'error'
}, {
  inputs: [],
  name: 'PackedUint128Math__SubUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'PairParametersHelper__InvalidParameter',
  type: 'error'
}, {
  inputs: [],
  name: 'ReentrancyGuard__ReentrantCall',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeCast__Exceeds128Bits',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeCast__Exceeds24Bits',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeCast__Exceeds40Bits',
  type: 'error'
}, {
  inputs: [],
  name: 'TokenHelper__TransferFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint128x128Math__LogUnderflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Uint128x128Math__PowUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulDivOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulShiftOverflow',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bool',
    name: 'approved',
    type: 'bool'
  }],
  name: 'ApprovalForAll',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'feeRecipient',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'protocolFees',
    type: 'bytes32'
  }],
  name: 'CollectedProtocolFees',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'totalFees',
    type: 'bytes32'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'protocolFees',
    type: 'bytes32'
  }],
  name: 'CompositionFees',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'bytes32[]',
    name: 'amounts',
    type: 'bytes32[]'
  }],
  name: 'DepositedToBins',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBFlashLoanCallback',
    name: 'receiver',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'activeId',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'amounts',
    type: 'bytes32'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'totalFees',
    type: 'bytes32'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'protocolFees',
    type: 'bytes32'
  }],
  name: 'FlashLoan',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'idReference',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'volatilityReference',
    type: 'uint24'
  }],
  name: 'ForcedDecay',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint16',
    name: 'oracleLength',
    type: 'uint16'
  }],
  name: 'OracleLengthIncreased',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint16',
    name: 'baseFactor',
    type: 'uint16'
  }, {
    indexed: false,
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    indexed: false,
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }, {
    indexed: false,
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'variableFeeControl',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'maxVolatilityAccumulator',
    type: 'uint24'
  }],
  name: 'StaticFeeParametersSet',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'amountsIn',
    type: 'bytes32'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'amountsOut',
    type: 'bytes32'
  }, {
    indexed: false,
    internalType: 'uint24',
    name: 'volatilityAccumulator',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'totalFees',
    type: 'bytes32'
  }, {
    indexed: false,
    internalType: 'bytes32',
    name: 'protocolFees',
    type: 'bytes32'
  }],
  name: 'Swap',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  name: 'TransferBatch',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    indexed: false,
    internalType: 'bytes32[]',
    name: 'amounts',
    type: 'bytes32[]'
  }],
  name: 'WithdrawnFromBins',
  type: 'event'
}, {
  inputs: [{
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }, {
    internalType: 'bool',
    name: 'approved',
    type: 'bool'
  }],
  name: 'approveForAll',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'account',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address[]',
    name: 'accounts',
    type: 'address[]'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }],
  name: 'balanceOfBatch',
  outputs: [{
    internalType: 'uint256[]',
    name: 'batchBalances',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amounts',
    type: 'uint256[]'
  }],
  name: 'batchTransferFrom',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'from',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amountsToBurn',
    type: 'uint256[]'
  }],
  name: 'burn',
  outputs: [{
    internalType: 'bytes32[]',
    name: 'amounts',
    type: 'bytes32[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'collectProtocolFees',
  outputs: [{
    internalType: 'bytes32',
    name: 'collectedProtocolFees',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract ILBFlashLoanCallback',
    name: 'receiver',
    type: 'address'
  }, {
    internalType: 'bytes32',
    name: 'amounts',
    type: 'bytes32'
  }, {
    internalType: 'bytes',
    name: 'data',
    type: 'bytes'
  }],
  name: 'flashLoan',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'forceDecay',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'getActiveId',
  outputs: [{
    internalType: 'uint24',
    name: 'activeId',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'getBin',
  outputs: [{
    internalType: 'uint128',
    name: 'binReserveX',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'binReserveY',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getBinStep',
  outputs: [{
    internalType: 'uint16',
    name: '',
    type: 'uint16'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactory',
  outputs: [{
    internalType: 'contract ILBFactory',
    name: 'factory',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'price',
    type: 'uint256'
  }],
  name: 'getIdFromPrice',
  outputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }, {
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'getNextNonEmptyBin',
  outputs: [{
    internalType: 'uint24',
    name: 'nextId',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getOracleParameters',
  outputs: [{
    internalType: 'uint8',
    name: 'sampleLifetime',
    type: 'uint8'
  }, {
    internalType: 'uint16',
    name: 'size',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'activeSize',
    type: 'uint16'
  }, {
    internalType: 'uint40',
    name: 'lastUpdated',
    type: 'uint40'
  }, {
    internalType: 'uint40',
    name: 'firstTimestamp',
    type: 'uint40'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint40',
    name: 'lookupTimestamp',
    type: 'uint40'
  }],
  name: 'getOracleSampleAt',
  outputs: [{
    internalType: 'uint64',
    name: 'cumulativeId',
    type: 'uint64'
  }, {
    internalType: 'uint64',
    name: 'cumulativeVolatility',
    type: 'uint64'
  }, {
    internalType: 'uint64',
    name: 'cumulativeBinCrossed',
    type: 'uint64'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint24',
    name: 'id',
    type: 'uint24'
  }],
  name: 'getPriceFromId',
  outputs: [{
    internalType: 'uint256',
    name: 'price',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getProtocolFees',
  outputs: [{
    internalType: 'uint128',
    name: 'protocolFeeX',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'protocolFeeY',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getReserves',
  outputs: [{
    internalType: 'uint128',
    name: 'reserveX',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'reserveY',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getStaticFeeParameters',
  outputs: [{
    internalType: 'uint16',
    name: 'baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'maxVolatilityAccumulator',
    type: 'uint24'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint128',
    name: 'amountOut',
    type: 'uint128'
  }, {
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }],
  name: 'getSwapIn',
  outputs: [{
    internalType: 'uint128',
    name: 'amountIn',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'amountOutLeft',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'fee',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint128',
    name: 'amountIn',
    type: 'uint128'
  }, {
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }],
  name: 'getSwapOut',
  outputs: [{
    internalType: 'uint128',
    name: 'amountInLeft',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'amountOut',
    type: 'uint128'
  }, {
    internalType: 'uint128',
    name: 'fee',
    type: 'uint128'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getTokenX',
  outputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getTokenY',
  outputs: [{
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [],
  name: 'getVariableFeeParameters',
  outputs: [{
    internalType: 'uint24',
    name: 'volatilityAccumulator',
    type: 'uint24'
  }, {
    internalType: 'uint24',
    name: 'volatilityReference',
    type: 'uint24'
  }, {
    internalType: 'uint24',
    name: 'idReference',
    type: 'uint24'
  }, {
    internalType: 'uint40',
    name: 'timeOfLastUpdate',
    type: 'uint40'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'newLength',
    type: 'uint16'
  }],
  name: 'increaseOracleLength',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'maxVolatilityAccumulator',
    type: 'uint24'
  }, {
    internalType: 'uint24',
    name: 'activeId',
    type: 'uint24'
  }],
  name: 'initialize',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'owner',
    type: 'address'
  }, {
    internalType: 'address',
    name: 'spender',
    type: 'address'
  }],
  name: 'isApprovedForAll',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'to',
    type: 'address'
  }, {
    internalType: 'bytes32[]',
    name: 'liquidityConfigs',
    type: 'bytes32[]'
  }, {
    internalType: 'address',
    name: 'refundTo',
    type: 'address'
  }],
  name: 'mint',
  outputs: [{
    internalType: 'bytes32',
    name: 'amountsReceived',
    type: 'bytes32'
  }, {
    internalType: 'bytes32',
    name: 'amountsLeft',
    type: 'bytes32'
  }, {
    internalType: 'uint256[]',
    name: 'liquidityMinted',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint16',
    name: 'baseFactor',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'filterPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'decayPeriod',
    type: 'uint16'
  }, {
    internalType: 'uint16',
    name: 'reductionFactor',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'variableFeeControl',
    type: 'uint24'
  }, {
    internalType: 'uint16',
    name: 'protocolShare',
    type: 'uint16'
  }, {
    internalType: 'uint24',
    name: 'maxVolatilityAccumulator',
    type: 'uint24'
  }],
  name: 'setStaticFeeParameters',
  outputs: [],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'bool',
    name: 'swapForY',
    type: 'bool'
  }, {
    internalType: 'address',
    name: 'to',
    type: 'address'
  }],
  name: 'swap',
  outputs: [{
    internalType: 'bytes32',
    name: 'amountsOut',
    type: 'bytes32'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [],
  name: 'symbol',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'id',
    type: 'uint256'
  }],
  name: 'totalSupply',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}];

var LiquidityAmountsHelperABI = [{
  inputs: [],
  name: 'LiquidityAmounts__LengthMismatch',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeCast__Exceeds24Bits',
  type: 'error'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'x',
    type: 'uint256'
  }, {
    internalType: 'int256',
    name: 'y',
    type: 'int256'
  }],
  name: 'Uint128x128Math__PowUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulDivOverflow',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulShiftOverflow',
  type: 'error'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: 'LBPair',
    type: 'address'
  }],
  name: 'getAmountsAndLiquiditiesOf',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsX',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amountsY',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'liquidities',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256[]',
    name: 'liquidities',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'totalSupplies',
    type: 'uint256[]'
  }, {
    internalType: 'uint112[]',
    name: 'binReservesX',
    type: 'uint112[]'
  }, {
    internalType: 'uint112[]',
    name: 'binReservesY',
    type: 'uint112[]'
  }],
  name: 'getAmountsForLiquidities',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: 'LBPair',
    type: 'address'
  }],
  name: 'getAmountsOf',
  outputs: [{
    internalType: 'uint256[]',
    name: 'amountsX',
    type: 'uint256[]'
  }, {
    internalType: 'uint256[]',
    name: 'amountsY',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: 'LBPair',
    type: 'address'
  }],
  name: 'getBalanceOf',
  outputs: [{
    internalType: 'uint256[]',
    name: 'balances',
    type: 'uint256[]'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'uint112',
    name: 'amountX',
    type: 'uint112'
  }, {
    internalType: 'uint112',
    name: 'amountY',
    type: 'uint112'
  }],
  name: 'getLiquiditiesForAmounts',
  outputs: [{
    internalType: 'uint256[]',
    name: 'liquidities',
    type: 'uint256[]'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    internalType: 'uint256[]',
    name: 'ids',
    type: 'uint256[]'
  }, {
    internalType: 'address',
    name: 'LBPair',
    type: 'address'
  }],
  name: 'getTotalAmountsOf',
  outputs: [{
    internalType: 'uint256',
    name: 'totalAmountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'totalAmountY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}];

var LimitOrderManagerABI = [{
  inputs: [{
    internalType: 'contract ILBFactory',
    name: 'factory',
    type: 'address'
  }, {
    internalType: 'contract IWNATIVE',
    name: 'wNative',
    type: 'address'
  }],
  stateMutability: 'nonpayable',
  type: 'constructor'
}, {
  inputs: [],
  name: 'LimitOrderManager__InvalidBatchLength',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__InvalidNativeAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__InvalidOrder',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__InvalidPair',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__InvalidTokenOrder',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__NoOrdersToExecute',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__OrderAlreadyExecuted',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__OrderNotClaimable',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__OrderNotExecutable',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__OrderNotPlaced',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__OrdersAlreadyExecuted',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__TransferFailed',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__ZeroAddress',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__ZeroAmount',
  type: 'error'
}, {
  inputs: [],
  name: 'LimitOrderManager__ZeroPositionLiquidity',
  type: 'error'
}, {
  inputs: [],
  name: 'PackedUint128Math__SubUnderflow',
  type: 'error'
}, {
  inputs: [],
  name: 'SafeCast__Exceeds128Bits',
  type: 'error'
}, {
  inputs: [],
  name: 'Uint256x256Math__MulDivOverflow',
  type: 'error'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'positionId',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'OrderCancelled',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'positionId',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'OrderClaimed',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'sender',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'positionId',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'OrderExecuted',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    internalType: 'address',
    name: 'user',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'contract ILBPair',
    name: 'lbPair',
    type: 'address'
  }, {
    indexed: true,
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    indexed: false,
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'positionId',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'liquidity',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    indexed: false,
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  name: 'OrderPlaced',
  type: 'event'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }],
    internalType: 'struct ILimitOrderManager.OrderParams[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchCancelOrders',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    components: [{
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }],
    internalType: 'struct ILimitOrderManager.OrderParamsSamePair[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchCancelOrdersSamePair',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }],
    internalType: 'struct ILimitOrderManager.OrderParams[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchClaimOrders',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    components: [{
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }],
    internalType: 'struct ILimitOrderManager.OrderParamsSamePair[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchClaimOrdersSamePair',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }],
    internalType: 'struct ILimitOrderManager.OrderParams[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchExecuteOrders',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    components: [{
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }],
    internalType: 'struct ILimitOrderManager.OrderParamsSamePair[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchExecuteOrdersSamePair',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    components: [{
      internalType: 'contract IERC20',
      name: 'tokenX',
      type: 'address'
    }, {
      internalType: 'contract IERC20',
      name: 'tokenY',
      type: 'address'
    }, {
      internalType: 'uint16',
      name: 'binStep',
      type: 'uint16'
    }, {
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }],
    internalType: 'struct ILimitOrderManager.PlaceOrderParams[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchPlaceOrders',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    components: [{
      internalType: 'enum ILimitOrderManager.OrderType',
      name: 'orderType',
      type: 'uint8'
    }, {
      internalType: 'uint24',
      name: 'binId',
      type: 'uint24'
    }, {
      internalType: 'uint256',
      name: 'amount',
      type: 'uint256'
    }],
    internalType: 'struct ILimitOrderManager.PlaceOrderParamsSamePair[]',
    name: 'orders',
    type: 'tuple[]'
  }],
  name: 'batchPlaceOrdersSamePair',
  outputs: [{
    internalType: 'uint256[]',
    name: 'orderPositionIds',
    type: 'uint256[]'
  }],
  stateMutability: 'payable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }],
  name: 'cancelOrder',
  outputs: [{
    internalType: 'uint256',
    name: 'orderPositionId',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }],
  name: 'claimOrder',
  outputs: [{
    internalType: 'uint256',
    name: 'orderPositionId',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }],
  name: 'executeOrders',
  outputs: [{
    internalType: 'uint256',
    name: 'positionId',
    type: 'uint256'
  }],
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getCurrentAmounts',
  outputs: [{
    internalType: 'uint256',
    name: 'amountX',
    type: 'uint256'
  }, {
    internalType: 'uint256',
    name: 'amountY',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'getFactory',
  outputs: [{
    internalType: 'contract ILBFactory',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }],
  name: 'getLastPositionId',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    internalType: 'address',
    name: 'user',
    type: 'address'
  }],
  name: 'getOrder',
  outputs: [{
    components: [{
      internalType: 'uint256',
      name: 'positionId',
      type: 'uint256'
    }, {
      internalType: 'uint256',
      name: 'liquidity',
      type: 'uint256'
    }],
    internalType: 'struct ILimitOrderManager.Order',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    internalType: 'uint256',
    name: 'positionId',
    type: 'uint256'
  }],
  name: 'getPosition',
  outputs: [{
    components: [{
      internalType: 'uint256',
      name: 'liquidity',
      type: 'uint256'
    }, {
      internalType: 'uint128',
      name: 'amount',
      type: 'uint128'
    }, {
      internalType: 'bool',
      name: 'withdrawn',
      type: 'bool'
    }],
    internalType: 'struct ILimitOrderManager.Position',
    name: '',
    type: 'tuple'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }],
  name: 'isOrderExecutable',
  outputs: [{
    internalType: 'bool',
    name: '',
    type: 'bool'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [],
  name: 'name',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'pure',
  type: 'function'
}, {
  inputs: [{
    internalType: 'contract IERC20',
    name: 'tokenX',
    type: 'address'
  }, {
    internalType: 'contract IERC20',
    name: 'tokenY',
    type: 'address'
  }, {
    internalType: 'uint16',
    name: 'binStep',
    type: 'uint16'
  }, {
    internalType: 'enum ILimitOrderManager.OrderType',
    name: 'orderType',
    type: 'uint8'
  }, {
    internalType: 'uint24',
    name: 'binId',
    type: 'uint24'
  }, {
    internalType: 'uint256',
    name: 'amount',
    type: 'uint256'
  }],
  name: 'placeOrder',
  outputs: [{
    internalType: 'uint256',
    name: 'orderPositionId',
    type: 'uint256'
  }],
  stateMutability: 'payable',
  type: 'function'
}];

/** Class with helper functions related to bin id and price */
var Bin = /*#__PURE__*/function () {
  function Bin() {}
  /**
   * @static
   * Returns the price of bin given its id and the bin step
   *
   * @param {number} id - The bin id
   * @param {number} binStep
   * @returns {number}
   */
  Bin.getPriceFromId = function getPriceFromId(id, binStep) {
    return Math.pow(1 + binStep / 10000, id - 8388608);
  }
  /**
   * @static
   * Returns the bin id given its price and the bin step
   *
   * @param {number} price - The price of the bin
   * @param {number} binStep
   * @returns {number}
   */;
  Bin.getIdFromPrice = function getIdFromPrice(price, binStep) {
    return Math.trunc(Math.log(price) / Math.log(1 + binStep / 10000)) + 8388608;
  }
  /**
   * @static
   * Returns idSlippage given slippage tolerance and the bin step
   *
   * @param {number} priceSlippage
   * @param {number} binStep
   * @returns {number}
   */;
  Bin.getIdSlippageFromPriceSlippage = function getIdSlippageFromPriceSlippage(priceSlippage, binStep) {
    return Math.floor(Math.log(1 + priceSlippage) / Math.log(1 + binStep / 10000));
  };
  return Bin;
}();

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

// warns if addresses are not checksummed
function validateAndParseAddress(address) {
  try {
    var checksummedAddress = getAddress(address);
    process.env.NODE_ENV !== "production" ? warning(address === checksummedAddress, address + " is not checksummed.") : void 0;
    return checksummedAddress;
  } catch (error) {
     process.env.NODE_ENV !== "production" ? invariant(false, address + " is not a valid address.") : invariant(false) ;
  }
}
/**
 * Converts currency amount into hex encoding
 *
 * @param {CurrencyAmount} currencyAmount
 * @returns {string}
 */
function toHex(currencyAmount) {
  return "0x" + currencyAmount.raw.toString(16);
}
/**
 * Returns true if the string value is zero in hex
 *
 * @param {string} hexNumberString
 * @returns {boolean}
 */
function isZero(hexNumberString) {
  return /^0x0*$/.test(hexNumberString);
}

var LiquidityDistribution;
(function (LiquidityDistribution) {
  LiquidityDistribution[LiquidityDistribution["SPOT"] = 0] = "SPOT";
  LiquidityDistribution[LiquidityDistribution["CURVE"] = 1] = "CURVE";
  LiquidityDistribution[LiquidityDistribution["BID_ASK"] = 2] = "BID_ASK";
})(LiquidityDistribution || (LiquidityDistribution = {}));

/**
 * Returns distribution params for on-chain addLiquidity() call
 *
 * @param {LiquidityDistribution} distribution
 * @returns {LiquidityDistributionParams}
}
 */
var getLiquidityConfig = function getLiquidityConfig(distribution) {
  switch (distribution) {
    case LiquidityDistribution.SPOT:
      return spotUniform;
    case LiquidityDistribution.CURVE:
      return curve;
    case LiquidityDistribution.BID_ASK:
      return bidAsk;
  }
};
/**
 * Returns distribution params for on-chain addLiquidity() call when liquidity is focused at a target bin
 * @param {number} activeId
 * @param {number} targetBin
 * @returns {LiquidityDistributionParams}
 */
var getDistributionFromTargetBin = function getDistributionFromTargetBin(activeId, targetBin) {
  return {
    deltaIds: [targetBin - activeId],
    distributionX: targetBin >= activeId ? [parseEther('1')] : [parseEther('0')],
    distributionY: targetBin <= activeId ? [parseEther('1')] : [parseEther('0')]
  };
};
/**
 * Returns normalized array, e.g. normalize so array sums to 1e18 within 1e5 precision
 * @param dist
 * @param sumTo
 * @param precision
 * @returns
 */
var normalizeDist = function normalizeDist(dist, sumTo, precision) {
  var sumDist = dist.reduce(function (sum, cur) {
    return sum + cur;
  }, BigInt(0));
  if (sumDist === BigInt(0)) {
    return dist;
  }
  var factor = sumDist * precision / sumTo;
  var normalized = dist.map(function (d) {
    return d * precision / factor;
  });
  return normalized;
};
/**
 * Returns distribution params for on-chain addLiquidity() call when liquidity is focused at a custom range of bins
 *
 * @param {number} activeId
 * @param {number[]} binRange
 * @param {CurrencyAmount[]} parsedAmounts
 * @returns
 */
var getUniformDistributionFromBinRange = function getUniformDistributionFromBinRange(activeId, binRange, parsedAmounts) {
  var parsedAmountA = parsedAmounts[0],
    parsedAmountB = parsedAmounts[1];
  // init return values
  var deltaIds = [],
    _distributionX = [],
    _distributionY = [];
  // range only includes B tokens (Y tokens)
  if (binRange[1] <= activeId && parsedAmountA.raw.toString() === '0') {
    var negDelta = binRange[1] - binRange[0] + 1;
    var negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map(function (el) {
      return -1 * (el + 1);
    });
    deltaIds = [].concat(negativeDeltaIds);
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [].concat(Array(deltaIds.length).fill(0));
    _distributionY = [].concat(Array(negDelta).fill(1 / negDelta));
  }
  // range only includes A tokens (X tokens)
  else if (activeId <= binRange[0] && parsedAmountB.raw.toString() === '0') {
    var posDelta = binRange[1] - binRange[0] + 1;
    var positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(positiveDeltaIds);
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    _distributionX = [].concat(Array(posDelta).fill(1 / posDelta));
    _distributionY = [].concat(Array(deltaIds.length).fill(0));
  }
  // range includes both X and Y tokens
  else {
    var _negDelta = activeId - binRange[0];
    var _posDelta = binRange[1] - activeId;
    var _negativeDeltaIds = Array.from(Array(_negDelta).keys()).reverse().map(function (el) {
      return -1 * (el + 1);
    });
    var _positiveDeltaIds = Array.from(Array(_posDelta).keys()).map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(_negativeDeltaIds, [0], _positiveDeltaIds);
    var posPctPerBin = 1 / (0.5 + _posDelta);
    var negPctPerBin = 1 / (0.5 + _negDelta);
    _distributionX = [].concat(Array(_negDelta).fill(0), [posPctPerBin / 2], Array(_posDelta).fill(posPctPerBin));
    _distributionY = [].concat(Array(_negDelta).fill(negPctPerBin), [negPctPerBin / 2], Array(_posDelta).fill(0));
  }
  // return
  return {
    deltaIds: deltaIds,
    distributionX: _distributionX.map(function (el) {
      return parseDistributionValue(el, parsedAmountA.currency.decimals);
    }),
    distributionY: _distributionY.map(function (el) {
      return parseDistributionValue(el, parsedAmountB.currency.decimals);
    })
  };
};
/**
 * Returns Bid-Ask distribution params for custom bin range
 *
 * @param {number} activeId
 * @param {number[]} binRange
 * @param {CurrencyAmount[]} parsedAmounts
 * @returns
 */
var getBidAskDistributionFromBinRange = function getBidAskDistributionFromBinRange(activeId, binRange, parsedAmounts) {
  var parsedAmountA = parsedAmounts[0],
    parsedAmountB = parsedAmounts[1];
  // init return values
  var deltaIds = [],
    _distributionX = [],
    _distributionY = [];
  // range only includes B tokens (Y tokens)
  if (binRange[1] <= activeId && parsedAmountA.raw.toString() === '0') {
    var negDelta = binRange[1] - binRange[0] + 1;
    var negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map(function (el) {
      return -1 * (el + 1);
    });
    deltaIds = [].concat(negativeDeltaIds);
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [].concat(Array(deltaIds.length).fill(0));
    // dist = 2/R^2 * r
    var rSquare = Math.pow(deltaIds[0], 2);
    _distributionY = deltaIds.map(function (i) {
      return (i - 1) * -2 / rSquare;
    });
  }
  // range only includes A tokens (X tokens)
  else if (activeId <= binRange[0] && parsedAmountB.raw.toString() === '0') {
    var posDelta = binRange[1] - binRange[0] + 1;
    var positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(positiveDeltaIds);
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    // dist = 2/R^2 * i
    var _rSquare = Math.pow(deltaIds[deltaIds.length - 1], 2);
    _distributionX = deltaIds.map(function (i) {
      return (i + 1) * 2 / _rSquare;
    });
    _distributionY = [].concat(Array(deltaIds.length).fill(0));
  }
  // range includes both X and Y tokens
  else {
    var _negDelta2 = activeId - binRange[0];
    var _posDelta2 = binRange[1] - activeId;
    var _negativeDeltaIds2 = Array.from(Array(_negDelta2).keys()).reverse().map(function (el) {
      return -1 * (el + 1);
    });
    var _positiveDeltaIds2 = Array.from(Array(_posDelta2).keys()).map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(_negativeDeltaIds2, [0], _positiveDeltaIds2);
    // dist = 1/R^2 * i
    var rSquareX = Math.pow(_positiveDeltaIds2[_positiveDeltaIds2.length - 1], 2);
    _distributionX = [].concat(Array(_negDelta2).fill(0), [1 / rSquareX], _positiveDeltaIds2.map(function (i) {
      return (i + 1) / rSquareX;
    }));
    // dist = 1/R^2 * i
    var rSquareY = Math.pow(_negativeDeltaIds2[0], 2);
    _distributionY = [].concat(_negativeDeltaIds2.map(function (i) {
      return -1 * (i - 1) / rSquareY;
    }), [1 / rSquareY], Array(_posDelta2).fill(0));
  }
  // return
  return {
    deltaIds: deltaIds,
    distributionX: _distributionX.map(function (el) {
      return parseDistributionValue(el, parsedAmountA.currency.decimals);
    }),
    distributionY: _distributionY.map(function (el) {
      return parseDistributionValue(el, parsedAmountB.currency.decimals);
    })
  };
};
/**
 * Returns Curve distribution params for custom bin range
 *
 * @param {number} activeId
 * @param {number[]} binRange
 * @param {CurrencyAmount[]} parsedAmounts
 * @returns
 */
var getCurveDistributionFromBinRange = function getCurveDistributionFromBinRange(activeId, binRange, parsedAmounts) {
  var parsedAmountA = parsedAmounts[0],
    parsedAmountB = parsedAmounts[1];
  // init return values
  var deltaIds = [],
    _distributionX = [],
    _distributionY = [];
  // get sigma based on radius R
  var getSigma = function getSigma(_R) {
    var factor = _R >= 20 ? 2.0 : _R >= 15 ? 1.8 : _R >= 10 ? 1.7 : _R >= 8 ? 1.6 : _R >= 6 ? 1.5 : _R >= 5 ? 1.4 : 1.0;
    return _R / factor;
  };
  // range only includes B tokens (Y tokens)
  if (binRange[1] <= activeId && parsedAmountA.raw.toString() === '0') {
    var negDelta = binRange[1] - binRange[0] + 1;
    var negativeDeltaIds = Array.from(Array(activeId - binRange[0]).keys()).reverse().slice(0, negDelta).map(function (el) {
      return -1 * (el + 1);
    });
    deltaIds = [].concat(negativeDeltaIds);
    if (activeId === binRange[1]) {
      deltaIds.push(0);
    }
    _distributionX = [].concat(Array(deltaIds.length).fill(0));
    // radius is num of bins
    var R = deltaIds.length - 1;
    var sigma = getSigma(R);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var A = 1 / (Math.sqrt(Math.PI * 2) * sigma);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from right-most bin
    _distributionY = deltaIds.map(function (_, ind) {
      return 2 * A * Math.exp(-0.5 * Math.pow((R - ind) / sigma, 2));
    });
  }
  // range only includes A tokens (X tokens)
  else if (activeId <= binRange[0] && parsedAmountB.raw.toString() === '0') {
    var posDelta = binRange[1] - binRange[0] + 1;
    var positiveDeltaIds = Array.from(Array(binRange[1] - activeId).keys()).reverse().slice(0, posDelta).reverse().map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(positiveDeltaIds);
    if (activeId === binRange[0]) {
      deltaIds.unshift(0);
    }
    _distributionY = [].concat(Array(deltaIds.length).fill(0));
    // radius is num of bins
    var _R2 = deltaIds.length - 1;
    var _sigma = getSigma(_R2);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var _A = 1 / (Math.sqrt(Math.PI * 2) * _sigma);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from left-most bin
    _distributionX = deltaIds.map(function (_, ind) {
      return 2 * _A * Math.exp(-0.5 * Math.pow(ind / _sigma, 2));
    });
  }
  // range includes both X and Y tokens
  else {
    var _negDelta3 = activeId - binRange[0];
    var _posDelta3 = binRange[1] - activeId;
    var _negativeDeltaIds3 = Array.from(Array(_negDelta3).keys()).reverse().map(function (el) {
      return -1 * (el + 1);
    });
    var _positiveDeltaIds3 = Array.from(Array(_posDelta3).keys()).map(function (el) {
      return el + 1;
    });
    deltaIds = [].concat(_negativeDeltaIds3, [0], _positiveDeltaIds3);
    // radius is num of bins
    var RX = _positiveDeltaIds3.length;
    var sigmaX = getSigma(RX);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var AX = 1 / (Math.sqrt(Math.PI * 2) * sigmaX);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from 0
    _distributionX = [].concat(Array(_negDelta3).fill(0), [AX], _positiveDeltaIds3.map(function (_, ind) {
      return 2 * AX * Math.exp(-0.5 * Math.pow((ind + 1) / sigmaX, 2));
    }));
    // radius is num of bins
    var RY = _negativeDeltaIds3.length;
    var sigmaY = getSigma(RY);
    // A = 1 / (sigma  * sqrt(2 * pi))
    var AY = 1 / (Math.sqrt(Math.PI * 2) * sigmaY);
    // dist = 2 * A * exp(-0.5 * (r /sigma) ^ 2)
    // r is distance from 0
    _distributionY = [].concat(_negativeDeltaIds3.map(function (_, ind) {
      return 2 * AY * Math.exp(-0.5 * Math.pow((RY - ind) / sigmaY, 2));
    }), [AY], Array(_posDelta3).fill(0));
  }
  // return
  return {
    deltaIds: deltaIds,
    distributionX: _distributionX.map(function (el) {
      return parseDistributionValue(el, parsedAmountA.currency.decimals);
    }),
    distributionY: _distributionY.map(function (el) {
      return parseDistributionValue(el, parsedAmountB.currency.decimals);
    })
  };
};
var parseDistributionValue = function parseDistributionValue(value, decimals) {
  return parseEther("" + parseFloat(value.toFixed(decimals)));
};

/** Class representing a pair of tokens. */
var PairV2 = /*#__PURE__*/function () {
  function PairV2(tokenA, tokenB) {
    this.token0 = void 0;
    this.token1 = void 0;
    if (tokenA.sortsBefore(tokenB)) {
      this.token0 = tokenA;
      this.token1 = tokenB;
    } else {
      this.token0 = tokenB;
      this.token1 = tokenA;
    }
  }
  /**
   * Returns all available LBPairs for this pair
   *
   * @param {boolean} isV21
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {Promise<LBPair[]>}
   */
  var _proto = PairV2.prototype;
  _proto.fetchAvailableLBPairs =
  /*#__PURE__*/
  function () {
    var _fetchAvailableLBPairs = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(isV21, publicClient, chainId) {
      var args;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            args = [getAddress(this.token0.address), getAddress(this.token1.address)];
            if (!isV21) {
              _context.next = 7;
              break;
            }
            _context.next = 4;
            return publicClient.readContract({
              abi: LBFactoryV21ABI,
              address: LB_FACTORY_V21_ADDRESS[chainId],
              functionName: 'getAllLBPairs',
              args: args
            });
          case 4:
            _context.t0 = _context.sent;
            _context.next = 10;
            break;
          case 7:
            _context.next = 9;
            return publicClient.readContract({
              abi: LBFactoryABI,
              address: LB_FACTORY_ADDRESS[chainId],
              functionName: 'getAllLBPairs',
              args: args
            });
          case 9:
            _context.t0 = _context.sent;
          case 10:
            return _context.abrupt("return", _context.t0);
          case 11:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function fetchAvailableLBPairs(_x, _x2, _x3) {
      return _fetchAvailableLBPairs.apply(this, arguments);
    }
    return fetchAvailableLBPairs;
  }()
  /**
   * Fetches LBPair for token0, token1, and given binStep
   *
   * @param {number} binStep
   * @param {boolean} isV21
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {Promise<LBPair>}
   */
  ;
  _proto.fetchLBPair =
  /*#__PURE__*/
  function () {
    var _fetchLBPair = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(binStep, isV21, publicClient, chainId) {
      var args, lbPair;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            args = [getAddress(this.token0.address), getAddress(this.token1.address), BigInt(binStep)];
            if (!isV21) {
              _context2.next = 7;
              break;
            }
            _context2.next = 4;
            return publicClient.readContract({
              abi: LBFactoryV21ABI,
              address: LB_FACTORY_V21_ADDRESS[chainId],
              functionName: 'getLBPairInformation',
              args: args
            });
          case 4:
            lbPair = _context2.sent;
            _context2.next = 10;
            break;
          case 7:
            _context2.next = 9;
            return publicClient.readContract({
              abi: LBFactoryABI,
              address: LB_FACTORY_ADDRESS[chainId],
              functionName: 'getLBPairInformation',
              args: args
            });
          case 9:
            lbPair = _context2.sent;
          case 10:
            return _context2.abrupt("return", lbPair);
          case 11:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function fetchLBPair(_x4, _x5, _x6, _x7) {
      return _fetchLBPair.apply(this, arguments);
    }
    return fetchLBPair;
  }()
  /**
   * Checks whether this pair equals to that provided in the param
   *
   * @param {PairV2} pair
   * @returns {boolean} true if equal, otherwise false
   */
  ;
  _proto.equals = function equals(pair) {
    if (this.token0.address === pair.token0.address && this.token1.address === pair.token1.address) {
      return true;
    }
    return false;
  }
  /**
   * @static
   * Returns all possible combination of token pairs
   *
   * @param {Token} inputToken
   * @param {Token} outputToken
   * @param {Token[]} bases
   * @returns {[Token, Token][]}
   */;
  PairV2.createAllTokenPairs = function createAllTokenPairs(inputToken, outputToken, bases) {
    var basePairs = flatMap(bases, function (base) {
      return bases.map(function (otherBase) {
        return [base, otherBase];
      });
    }).filter(function (_ref) {
      var t0 = _ref[0],
        t1 = _ref[1];
      return t0.address !== t1.address;
    });
    var allTokenPairs = [
    // the direct pair
    [inputToken, outputToken]].concat(bases.map(function (base) {
      return [inputToken, base];
    }), bases.map(function (base) {
      return [outputToken, base];
    }), basePairs).filter(function (tokens) {
      return Boolean(tokens[0] && tokens[1]);
    }).filter(function (_ref2) {
      var t0 = _ref2[0],
        t1 = _ref2[1];
      return t0.address !== t1.address;
    });
    return allTokenPairs;
  }
  /**
   * @static
   * Returns the initialized pairs given a list of token pairs
   *
   * @param {[Token, Token][]} tokenPairs
   * @returns {PairV2[]}
   */;
  PairV2.initPairs = function initPairs(tokenPairs) {
    var allPairs = tokenPairs.map(function (tokenPair) {
      return new PairV2(tokenPair[0], tokenPair[1]);
    });
    var uniquePairs = [];
    allPairs.forEach(function (pair) {
      if (!uniquePairs.some(function (pair2) {
        return pair.equals(pair2);
      })) {
        uniquePairs.push(pair);
      }
    });
    return uniquePairs;
  }
  /**
   * Fetches the reserves active bin id for the LBPair
   *
   * @param {Hex} LBPairAddr
   * @param {boolean} isV21
   * @param {PublicClient} publicClient
   * @returns {Promise<LBPairReservesAndId>}
   */;
  PairV2.getLBPairReservesAndId =
  /*#__PURE__*/
  function () {
    var _getLBPairReservesAndId = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(LBPairAddr, isV21, publicClient) {
      var _yield$publicClient$r, _reserveX2, _reserveY2, _activeId, _yield$publicClient$r2, reserveX, reserveY, activeId;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!isV21) {
              _context3.next = 10;
              break;
            }
            _context3.next = 3;
            return publicClient.readContract({
              abi: LBPairV21ABI,
              address: LBPairAddr,
              functionName: 'getReserves'
            });
          case 3:
            _yield$publicClient$r = _context3.sent;
            _reserveX2 = _yield$publicClient$r[0];
            _reserveY2 = _yield$publicClient$r[1];
            _context3.next = 8;
            return publicClient.readContract({
              abi: LBPairV21ABI,
              address: LBPairAddr,
              functionName: 'getActiveId'
            });
          case 8:
            _activeId = _context3.sent;
            return _context3.abrupt("return", {
              reserveX: _reserveX2,
              reserveY: _reserveY2,
              activeId: _activeId
            });
          case 10:
            _context3.next = 12;
            return publicClient.readContract({
              abi: LBPairABI,
              address: LBPairAddr,
              functionName: 'getReservesAndId'
            });
          case 12:
            _yield$publicClient$r2 = _context3.sent;
            reserveX = _yield$publicClient$r2[0];
            reserveY = _yield$publicClient$r2[1];
            activeId = _yield$publicClient$r2[2];
            return _context3.abrupt("return", {
              reserveX: reserveX,
              reserveY: reserveY,
              activeId: Number(activeId)
            });
          case 17:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }));
    function getLBPairReservesAndId(_x8, _x9, _x10) {
      return _getLBPairReservesAndId.apply(this, arguments);
    }
    return getLBPairReservesAndId;
  }()
  /**
   * Fetches the fee parameters for the LBPair
   *
   * @param {Hex} LBPairAddr
   * @param {PublicClient} publicClient
   * @returns {Promise<LBPairFeeParameters>}
   */
  ;
  PairV2.getFeeParameters =
  /*#__PURE__*/
  function () {
    var _getFeeParameters = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(LBPairAddr, publicClient) {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            return _context4.abrupt("return", publicClient.readContract({
              abi: LBPairABI,
              address: LBPairAddr,
              functionName: 'feeParameters'
            }));
          case 1:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }));
    function getFeeParameters(_x11, _x12) {
      return _getFeeParameters.apply(this, arguments);
    }
    return getFeeParameters;
  }()
  /**
   * Calculate amountX and amountY
   *
   * @param {number[]} binIds
   * @param {number[]} activeBin
   * @param {BinReserves[]} bins
   * @param {bigint[]} totalSupplies
   * @param {string[]} liquidity
   * @returns
   */
  ;
  PairV2.calculateAmounts = function calculateAmounts(binIds, activeBin, bins, totalSupplies, liquidity) {
    // calculate expected total to remove for X and Y
    var totalAmountX = JSBI.BigInt(0);
    var totalAmountY = JSBI.BigInt(0);
    binIds.forEach(function (binId, i) {
      // get totalSupply, reserveX, and reserveY for the bin
      var _bins$i = bins[i],
        _reserveX = _bins$i.reserveX,
        _reserveY = _bins$i.reserveY;
      var reserveX = JSBI.BigInt(_reserveX.toString());
      var reserveY = JSBI.BigInt(_reserveY.toString());
      var totalSupply = JSBI.BigInt(totalSupplies[i].toString());
      var liquidityAmount = JSBI.BigInt(liquidity[i]);
      // increment totalAmountX and/or totalAmountY
      if (binId <= activeBin) {
        var amountY = JSBI.divide(JSBI.multiply(liquidityAmount, reserveY), totalSupply);
        totalAmountY = JSBI.add(amountY, totalAmountY);
      }
      if (binId >= activeBin) {
        var amountX = JSBI.divide(JSBI.multiply(liquidityAmount, reserveX), totalSupply);
        totalAmountX = JSBI.add(amountX, totalAmountX);
      }
    });
    return {
      amountX: totalAmountX,
      amountY: totalAmountY
    };
  }
  /**
   * Returns the amount and distribution args for on-chain addLiquidity() method
   *
   * @param binStep
   * @param token0Amount
   * @param token1Amount
   * @param amountSlippage
   * @param priceSlippage
   * @param liquidityDistribution
   * @returns
   */;
  _proto.addLiquidityParameters = function addLiquidityParameters(binStep, token0Amount, token1Amount, amountSlippage, priceSlippage, liquidityDistribution) {
    var token0isX = token0Amount.token.sortsBefore(token1Amount.token);
    var tokenX = token0isX ? token0Amount.token : token1Amount.token;
    var tokenY = token0isX ? token1Amount.token : token0Amount.token;
    var _amountX = token0isX ? token0Amount.raw : token1Amount.raw;
    var _amountY = token0isX ? token1Amount.raw : token0Amount.raw;
    var amountX = _amountX.toString();
    var amountY = _amountY.toString();
    var amountXMin = new Fraction(ONE).add(amountSlippage).invert().multiply(_amountX).quotient.toString();
    var amountYMin = new Fraction(ONE).add(amountSlippage).invert().multiply(_amountY).quotient.toString();
    var _priceSlippage = Number(priceSlippage.toSignificant()) / 100;
    var idSlippage = Bin.getIdSlippageFromPriceSlippage(_priceSlippage, binStep);
    var _getLiquidityConfig = getLiquidityConfig(liquidityDistribution),
      deltaIds = _getLiquidityConfig.deltaIds,
      distributionX = _getLiquidityConfig.distributionX,
      distributionY = _getLiquidityConfig.distributionY;
    return {
      tokenX: tokenX,
      tokenY: tokenY,
      amountX: amountX,
      amountY: amountY,
      amountXMin: amountXMin,
      amountYMin: amountYMin,
      idSlippage: idSlippage,
      deltaIds: deltaIds,
      distributionX: distributionX,
      distributionY: distributionY
    };
  }
  /**
   * Calculates amountX, amountY, amountXMin, and amountYMin needed for on-chain removeLiquidity() method
   *
   * @param {number[]} userPositionIds - List of binIds that user has position
   * @param {number} activeBin - The active bin id for the LBPair
   * @param {Bin[]} bins - List of bins whose indices match those of userPositionIds
   * @param {BigNumber[]} totalSupplies - List of bin's total supplies whose indices match those of userPositionIds
   * @param {string[]} amountsToRemove - List of amounts specified by the user to remove in each of their position
   * @param {Percent} amountSlippage - The amounts slippage used to calculate amountXMin and amountYMin
   * @returns
   */;
  _proto.calculateAmountsToRemove = function calculateAmountsToRemove(userPositionIds, activeBin, bins, totalSupplies, amountsToRemove, amountSlippage) {
    // calculate expected total to remove for X and Y
    var _PairV2$calculateAmou = PairV2.calculateAmounts(userPositionIds, activeBin, bins, totalSupplies, amountsToRemove),
      amountX = _PairV2$calculateAmou.amountX,
      amountY = _PairV2$calculateAmou.amountY;
    // compute min amounts taking into consideration slippage
    var amountXMin = new Fraction(ONE).add(amountSlippage).invert().multiply(amountX).quotient;
    var amountYMin = new Fraction(ONE).add(amountSlippage).invert().multiply(amountY).quotient;
    // return
    return {
      amountX: amountX,
      amountY: amountY,
      amountXMin: amountXMin,
      amountYMin: amountYMin
    };
  };
  return PairV2;
}();

/** Class representing a trade route. */
var RouteV2 = /*#__PURE__*/function () {
  function RouteV2(pairs, input, output) {
    this.pairs = void 0;
    this.path = void 0;
    this.input = void 0;
    this.output = void 0;
    var path = [input];
    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
        i = _step$value[0],
        pair = _step$value[1];
      var currentInput = path[i];
      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;
      path.push(_output);
    }
    this.pairs = pairs;
    this.path = path;
    this.input = input;
    this.output = output != null ? output : path[path.length - 1];
  }
  /**
   * Returns the list of token addresses for this route
   *
   * @returns {Hex[]}
   */
  var _proto = RouteV2.prototype;
  _proto.pathToStrArr = function pathToStrArr() {
    return this.path.map(function (token) {
      return getAddress(token.address);
    });
  }
  /**
   * @static
   * Returns all possible trade routes
   *
   * @param {PairV2[]} pairs - The pairs to consider
   * @param {Token} inputToken - The input token
   * @param {Token} outputToken - The output token
   * @param {number} maxHops - maximum # of hops to allow in the trade route
   * @param {PairV2[]} currentPairs - The current list of pairs forming a route (used in recursion)
   * @param {Token} originalInputToken - The original value of the inputToken param (used in recursion)
   * @param {RouteV2[]} outcome - The current list of routes (used in recursion)
   * @returns {RouteV2[]} An array of constructured routes
   */;
  RouteV2.createAllRoutes = function createAllRoutes(pairs, inputToken, outputToken, maxHops, currentPairs, originalInputToken, outcome) {
    if (maxHops === void 0) {
      maxHops = 3;
    }
    if (currentPairs === void 0) {
      currentPairs = [];
    }
    if (originalInputToken === void 0) {
      originalInputToken = inputToken;
    }
    if (outcome === void 0) {
      outcome = [];
    }
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      // pair irrelevant
      if (!pair.token0.equals(inputToken) && !pair.token1.equals(inputToken)) continue;
      // next token to consider
      var nextToken = pair.token0.equals(inputToken) ? pair.token1 : pair.token0;
      // arrived at the output token
      if (nextToken.equals(outputToken)) {
        outcome.push(new RouteV2([].concat(currentPairs, [pair]), originalInputToken, outputToken));
      } else if (maxHops > 1) {
        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length));
        // otherwise, consider all the other paths that lead from this token
        RouteV2.createAllRoutes(pairsExcludingThisPair, nextToken, outputToken, maxHops - 1, [].concat(currentPairs, [pair]), originalInputToken, outcome);
      }
    }
    return outcome;
  };
  return RouteV2;
}();

/** Class representing a trade */
var TradeV2 = /*#__PURE__*/function () {
  function TradeV2(route, tokenIn, tokenOut, quote, isExactIn, isNativeIn, isNativeOut) {
    this.quote = void 0;
    // quote returned by the LBQuoter contract
    this.route = void 0;
    // The route of the trade, i.e. which pairs the trade goes through.
    this.tradeType = void 0;
    // The type of the trade, either exact in or exact out.
    this.inputAmount = void 0;
    // The input amount for the trade returned by the quote
    this.outputAmount = void 0;
    // The output amount for the trade returned by the quote
    this.executionPrice = void 0;
    // The price expressed in terms of output amount/input amount.
    this.exactQuote = void 0;
    // The exact amount if there was not slippage
    this.priceImpact = void 0;
    // The percent difference between the executionPrice and the midPrice due to trade size
    this.isNativeIn = void 0;
    this.isNativeOut = void 0;
    var inputAmount = new TokenAmount(tokenIn, JSBI.BigInt(quote.amounts[0].toString()));
    var outputAmount = new TokenAmount(tokenOut, JSBI.BigInt(quote.amounts[quote.amounts.length - 1].toString()));
    this.route = route;
    this.tradeType = isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT;
    this.quote = quote;
    this.isNativeIn = isNativeIn;
    this.isNativeOut = isNativeOut;
    this.inputAmount = inputAmount;
    this.outputAmount = outputAmount;
    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);
    // compute exactQuote and priceImpact
    if (isExactIn) {
      var exactQuoteStr = quote.virtualAmountsWithoutSlippage[quote.virtualAmountsWithoutSlippage.length - 1].toString();
      this.exactQuote = new TokenAmount(tokenOut, JSBI.BigInt(exactQuoteStr));
      var slippage = this.exactQuote.subtract(outputAmount).divide(this.exactQuote);
      this.priceImpact = new Percent(slippage.numerator, slippage.denominator);
    } else {
      var _exactQuoteStr = quote.virtualAmountsWithoutSlippage[0].toString();
      this.exactQuote = new TokenAmount(tokenIn, JSBI.BigInt(_exactQuoteStr));
      var _slippage = inputAmount.subtract(this.exactQuote).divide(inputAmount);
      this.priceImpact = new Percent(_slippage.numerator, _slippage.denominator);
    }
  }
  /**
   * Get the minimum amount that must be received from this trade for the given slippage tolerance
   *
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   * @returns {CurrencyAmount}
   */
  var _proto = TradeV2.prototype;
  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {
    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== "production" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;
    if (this.tradeType === TradeType.EXACT_OUTPUT) {
      return this.outputAmount;
    } else {
      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;
      var chainId = this.outputAmount.token.chainId;
      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(chainId, slippageAdjustedAmountOut);
    }
  }
  /**
   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance
   *
   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade
   * @returns {CurrencyAmount}
   */;
  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {
    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== "production" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;
    if (this.tradeType === TradeType.EXACT_INPUT) {
      return this.inputAmount;
    } else {
      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;
      var chainId = this.outputAmount.token.chainId;
      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(chainId, slippageAdjustedAmountIn);
    }
  }
  /**
   * Returns the on-chain method name and args for this trade
   *
   * @param {TradeOptions | TradeOptionsDeadline} options
   * @returns {SwapParameters}
   */;
  _proto.swapCallParameters = function swapCallParameters(options) {
    var nativeIn = this.isNativeIn;
    var nativeOut = this.isNativeOut;
    // the router does not support both avax in and out
    !!(nativeIn && nativeOut) ? process.env.NODE_ENV !== "production" ? invariant(false, 'AVAX_IN_OUT') : invariant(false) : void 0;
    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== "production" ? invariant(false, 'TTL') : invariant(false) : void 0;
    var to = validateAndParseAddress(options.recipient);
    var amountIn = toHex(this.maximumAmountIn(options.allowedSlippage));
    var amountOut = toHex(this.minimumAmountOut(options.allowedSlippage));
    var binSteps = this.quote.binSteps.map(function (bin) {
      return '0x' + bin.toString(16);
    });
    var path = {
      pairBinSteps: binSteps,
      versions: this.quote.versions,
      tokenPath: this.quote.route
    };
    var deadline = 'ttl' in options ? "0x" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : "0x" + options.deadline.toString(16);
    var useFeeOnTransfer = Boolean(options.feeOnTransfer);
    var methodName;
    var args;
    var value;
    switch (this.tradeType) {
      case TradeType.EXACT_INPUT:
        if (nativeIn) {
          methodName = useFeeOnTransfer ? 'swapExactNATIVEForTokensSupportingFeeOnTransferTokens' : 'swapExactNATIVEForTokens';
          args = [amountOut, path, to, deadline];
          value = amountIn;
        } else if (nativeOut) {
          methodName = useFeeOnTransfer ? 'swapExactTokensForNATIVESupportingFeeOnTransferTokens' : 'swapExactTokensForNATIVE';
          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
        } else {
          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens';
          args = [amountIn, amountOut, path, to, deadline];
          value = ZERO_HEX;
        }
        break;
      case TradeType.EXACT_OUTPUT:
        !!useFeeOnTransfer ? process.env.NODE_ENV !== "production" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;
        if (nativeIn) {
          methodName = 'swapNATIVEForExactTokens';
          args = [amountOut, path, to, deadline];
          value = amountIn;
        } else if (nativeOut) {
          methodName = 'swapTokensForExactNATIVE';
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
        } else {
          methodName = 'swapTokensForExactTokens';
          args = [amountOut, amountIn, path, to, deadline];
          value = ZERO_HEX;
        }
        break;
    }
    return {
      methodName: methodName,
      args: args,
      value: value
    };
  }
  /**
   * Calculates trade fee in terms of inputToken
   *
   * @returns {TradeFee}
   */;
  _proto.getTradeFee =
  /*#__PURE__*/
  function () {
    var _getTradeFee = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var amounts, feesPct, fees, feesTokenIn, totalFee, feeAmountIn, totalFeePct;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            // amounts for each step of the swap returned from quoter contract
            // e.g. [10 WAVAX, 20 USDC, 19.9 USDT ] when inputAmount is 10 WAVAX and resulting outputToken is USDT
            amounts = this.quote.amounts; // pool fee % for each step of the swap from quoter contract
            // e.g. [WAVAX-USDC pool 0.05%, USDC-USDT pool 0.01%]
            feesPct = this.quote.fees.map(function (bn) {
              return new Percent(JSBI.BigInt(bn.toString()), JSBI.BigInt(1e18));
            }); // actual fee amounts paid at each step of the swap; e.g. [0.005 WAVAX, 0.002 USDC]
            fees = feesPct.map(function (pct, i) {
              var amount = amounts[i].toString();
              return pct.multiply(JSBI.BigInt(amount)).quotient;
            }); // change each fees in terms of the inputToken; e.g. [0.005 WAVAX, 0.0001 WAVAX]
            feesTokenIn = fees.map(function (fee, i) {
              // first fee will always be in terms of inputToken
              if (i === 0) {
                return fee;
              }
              var midPrice = new Fraction(JSBI.BigInt(amounts[0].toString()), JSBI.BigInt(amounts[i].toString()));
              return midPrice.multiply(fee).quotient;
            }); // sum of all fees; e.g. 0.0051 WAVAX
            totalFee = feesTokenIn.reduce(function (a, b) {
              return JSBI.add(a, b);
            }, JSBI.BigInt('0')); // get total fee in TokenAmount
            feeAmountIn = new TokenAmount(this.inputAmount.token, totalFee); // get total fee pct; e.g. 0.0051 / 10 * 100 = 0.051%
            totalFeePct = new Percent(totalFee, JSBI.BigInt(this.inputAmount.raw));
            return _context.abrupt("return", {
              totalFeePct: totalFeePct,
              feeAmountIn: feeAmountIn
            });
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function getTradeFee() {
      return _getTradeFee.apply(this, arguments);
    }
    return getTradeFee;
  }()
  /**
   * Returns an estimate of the gas cost for the trade
   *
   * @param {PublicClient} publicClient - The public client
   * @param {ChainId} chainId - The network chain id
   * @param {Percent} slippageTolerance - The slippage tolerance
   * @returns {Promise<BigNumber>}
   */
  ;
  _proto.estimateGas =
  /*#__PURE__*/
  function () {
    var _estimateGas = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(publicClient, account, chainId, slippageTolerance) {
      var currentBlockTimestamp, options, _this$swapCallParamet, methodName, args, value, gasEstimate;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return publicClient.getBlock({
              blockTag: 'latest'
            });
          case 2:
            currentBlockTimestamp = _context2.sent.timestamp;
            options = {
              allowedSlippage: slippageTolerance,
              recipient: account,
              deadline: Number(currentBlockTimestamp) + 120
            };
            _this$swapCallParamet = this.swapCallParameters(options), methodName = _this$swapCallParamet.methodName, args = _this$swapCallParamet.args, value = _this$swapCallParamet.value;
            _context2.next = 7;
            return publicClient.estimateGas({
              blockTag: 'latest',
              account: account,
              to: LB_ROUTER_V21_ADDRESS[chainId],
              data: encodeFunctionData({
                abi: LBRouterV21ABI,
                functionName: methodName,
                args: args
              }),
              value: value && !isZero(value) ? BigInt(value) : undefined
            });
          case 7:
            gasEstimate = _context2.sent;
            return _context2.abrupt("return", gasEstimate);
          case 9:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function estimateGas(_x, _x2, _x3, _x4) {
      return _estimateGas.apply(this, arguments);
    }
    return estimateGas;
  }()
  /**
   * @static
   * Returns the list of trades, given a list of routes and a fixed amount of the input token
   *
   * @param {RouteV2[]} routes
   * @param {TokenAmount} tokenAmountIn
   * @param {Token} tokenOut
   * @param {boolean} isNativeIn
   * @param {boolean} isNativeOut
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {TradeV2[]}
   */
  ;
  TradeV2.getTradesExactIn =
  /*#__PURE__*/
  function () {
    var _getTradesExactIn = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(routes, tokenAmountIn, tokenOut, isNativeIn, isNativeOut, publicClient, chainId) {
      var isExactIn, isWrapSwap, amountIn, calls, reads, trades;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            isExactIn = true; // handle wavax<->avax wrap swaps
            isWrapSwap = isNativeIn && tokenOut.address === WNATIVE[chainId].address || isNativeOut && tokenAmountIn.token.address === WNATIVE[chainId].address;
            if (!isWrapSwap) {
              _context3.next = 4;
              break;
            }
            return _context3.abrupt("return", []);
          case 4:
            amountIn = BigInt(tokenAmountIn.raw.toString());
            _context3.prev = 5;
            calls = routes.map(function (route) {
              return {
                abi: LBQuoterV21ABI,
                address: LB_QUOTER_V21_ADDRESS[chainId],
                functionName: 'findBestPathFromAmountIn',
                args: [route.pathToStrArr(), amountIn]
              };
            });
            _context3.next = 9;
            return publicClient.multicall({
              contracts: calls,
              allowFailure: true
            });
          case 9:
            reads = _context3.sent;
            trades = reads.map(function (read, i) {
              if (read.status !== 'success') return undefined;
              return new TradeV2(routes[i], tokenAmountIn.token, tokenOut, read.result, isExactIn, isNativeIn, isNativeOut);
            });
            return _context3.abrupt("return", trades.filter(function (trade) {
              return !!trade && JSBI.greaterThan(trade.outputAmount.raw, JSBI.BigInt(0));
            }));
          case 14:
            _context3.prev = 14;
            _context3.t0 = _context3["catch"](5);
            console.debug('Error fetching quotes:', _context3.t0);
            return _context3.abrupt("return", []);
          case 18:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[5, 14]]);
    }));
    function getTradesExactIn(_x5, _x6, _x7, _x8, _x9, _x10, _x11) {
      return _getTradesExactIn.apply(this, arguments);
    }
    return getTradesExactIn;
  }()
  /**
   * @static
   * Returns the list of trades, given a list of routes and a fixed amount of the output token
   *
   * @param {RouteV2[]} routes
   * @param {TokenAmount} tokenAmountOut
   * @param {Token} tokenIn
   * @param {boolean} isNativeIn
   * @param {boolean} isNativeOut
   * @param {PublicClient} publicClient
   * @param {ChainId} chainId
   * @returns {TradeV2[]}
   */
  ;
  TradeV2.getTradesExactOut =
  /*#__PURE__*/
  function () {
    var _getTradesExactOut = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(routes, tokenAmountOut, tokenIn, isNativeIn, isNativeOut, publicClient, chainId) {
      var isExactIn, isWrapSwap, amountOut, calls, reads, trades;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            isExactIn = false; // handle wavax<->avax wrap swaps
            isWrapSwap = isNativeIn && tokenAmountOut.token.address === WNATIVE[chainId].address || isNativeOut && tokenIn.address === WNATIVE[chainId].address;
            if (!isWrapSwap) {
              _context4.next = 4;
              break;
            }
            return _context4.abrupt("return", []);
          case 4:
            amountOut = BigInt(tokenAmountOut.raw.toString());
            _context4.prev = 5;
            calls = routes.map(function (route) {
              return {
                abi: LBQuoterV21ABI,
                address: LB_QUOTER_V21_ADDRESS[chainId],
                functionName: 'findBestPathFromAmountOut',
                args: [route.pathToStrArr(), amountOut]
              };
            });
            _context4.next = 9;
            return publicClient.multicall({
              contracts: calls,
              allowFailure: true
            });
          case 9:
            reads = _context4.sent;
            trades = reads.map(function (read, i) {
              if (read.status !== 'success') return undefined;
              return new TradeV2(routes[i], tokenIn, tokenAmountOut.token, read.result, isExactIn, isNativeIn, isNativeOut);
            });
            return _context4.abrupt("return", trades.filter(function (trade) {
              return !!trade && JSBI.greaterThan(trade.inputAmount.raw, JSBI.BigInt(0));
            }));
          case 14:
            _context4.prev = 14;
            _context4.t0 = _context4["catch"](5);
            console.debug('Error fetching quotes:', _context4.t0);
            return _context4.abrupt("return", []);
          case 18:
          case "end":
            return _context4.stop();
        }
      }, _callee4, null, [[5, 14]]);
    }));
    function getTradesExactOut(_x12, _x13, _x14, _x15, _x16, _x17, _x18) {
      return _getTradesExactOut.apply(this, arguments);
    }
    return getTradesExactOut;
  }()
  /**
   * @static
   * Returns the best trade
   *
   * @param {TradeV2[]} trades
   * @param {boolean} isExactIn
   * @returns {TradeV2}
   */
  ;
  TradeV2.chooseBestTrade = function chooseBestTrade(trades, isExactIn) {
    if (trades.length === 0) {
      return undefined;
    }
    var bestTrade = trades[0];
    trades.forEach(function (trade) {
      if (isExactIn) {
        if (JSBI.greaterThan(trade.outputAmount.raw, bestTrade.outputAmount.raw)) {
          bestTrade = trade;
        }
      } else {
        if (JSBI.greaterThan(trade.inputAmount.raw, JSBI.BigInt(0)) && JSBI.lessThan(trade.inputAmount.raw, bestTrade.inputAmount.raw)) {
          bestTrade = trade;
        }
      }
    });
    return bestTrade;
  }
  /**
   * Selects the best trade given trades and gas
   *
   * @param {TradeV2[]} trades
   * @param {bigint[]} estimatedGas
   * @returns {bestTrade: TradeV2, estimatedGas: bigint}
   */;
  TradeV2.chooseBestTradeWithGas = function chooseBestTradeWithGas(trades, estimatedGas) {
    var tradeType = trades[0].tradeType;
    // The biggest tradeValueAVAX will be the most accurate
    // If we haven't found any equivalent of the trade in AVAX, we won't take gas cost into account
    var tradeValueAVAX = BigInt(0);
    var tradesWithGas = trades.map(function (trade, index) {
      return {
        trade: trade,
        estimatedGas: estimatedGas[index],
        swapOutcome: trade.tradeType === TradeType.EXACT_INPUT ? new Fraction(trade.outputAmount.numerator, trade.outputAmount.denominator).subtract(tradeValueAVAX === BigInt(0) ? BigInt(0) :
        // Cross product to get the gas price against the output token
        trade.outputAmount.multiply(estimatedGas[index].toString()).divide(tradeValueAVAX)) : new Fraction(trade.inputAmount.numerator, trade.inputAmount.denominator).add(tradeValueAVAX === BigInt(0) ? BigInt(0) : trade.inputAmount.multiply(estimatedGas[index].toString()).divide(tradeValueAVAX))
      };
    });
    var bestTrade = tradesWithGas.reduce(function (previousTrade, currentTrade) {
      return tradeType === TradeType.EXACT_INPUT ? currentTrade.swapOutcome.greaterThan(previousTrade.swapOutcome) ? currentTrade : previousTrade : currentTrade.trade.inputAmount.greaterThan('0') && currentTrade.swapOutcome.lessThan(previousTrade.swapOutcome) ? currentTrade : previousTrade;
    });
    return {
      bestTrade: bestTrade.trade,
      estimatedGas: bestTrade.estimatedGas
    };
  }
  /**
   * Returns an object representing this trade for a readable cosole.log
   *
   * @returns {Object}
   */;
  _proto.toLog = function toLog() {
    return {
      route: {
        path: this.route.path.map(function (token) {
          return token.name + "(" + token.address + ")";
        }).join(', ')
      },
      tradeType: this.tradeType === TradeType.EXACT_INPUT ? 'EXACT_INPUT' : 'EXACT_OUTPUT',
      inputAmount: this.inputAmount.toSignificant(6) + " " + this.inputAmount.currency.symbol,
      outputAmount: this.outputAmount.toSignificant(6) + " " + this.outputAmount.currency.symbol,
      executionPrice: this.executionPrice.toSignificant(6) + " " + this.outputAmount.currency.symbol + " / " + this.inputAmount.currency.symbol,
      exactQuote: this.exactQuote.toSignificant(6) + " " + this.exactQuote.currency.symbol,
      priceImpact: this.priceImpact.toSignificant(6) + "%",
      quote: {
        route: this.quote.route.join(', '),
        pairs: this.quote.pairs.join(', '),
        binSteps: this.quote.binSteps.map(function (el) {
          return el.toString();
        }).join(', '),
        versions: this.quote.versions.join(', '),
        amounts: this.quote.amounts.map(function (el) {
          return el.toString();
        }).join(', '),
        fees: this.quote.fees.map(function (el) {
          return el.toString();
        }).join(', '),
        virtualAmountsWithoutSlippage: this.quote.virtualAmountsWithoutSlippage.map(function (el) {
          return el.toString();
        }).join(', ')
      }
    };
  };
  return TradeV2;
}();

var PoolVersion;
(function (PoolVersion) {
  PoolVersion[PoolVersion["V1"] = 0] = "V1";
  PoolVersion[PoolVersion["V2"] = 1] = "V2";
  PoolVersion[PoolVersion["V2_1"] = 2] = "V2_1";
})(PoolVersion || (PoolVersion = {}));

export { Bin, DEXCANDLES_SUBGRAPH_V2, DEXLENS_ADDRESS, DEX_V2_SUBGRAPH, DexLensABI, LBFactoryABI, LBFactoryV21ABI, LBPairABI, LBPairV21ABI, LBQuoterABI, LBQuoterV21ABI, LBRewarderABI, LBRouterABI, LBRouterV21ABI, LB_FACTORY_ADDRESS, LB_FACTORY_V21_ADDRESS, LB_QUOTER_ADDRESS, LB_QUOTER_V21_ADDRESS, LB_REWARDER_ADDRESS, LB_ROUTER_ADDRESS, LB_ROUTER_V21_ADDRESS, LIMIT_ORDER_MANAGER_ADDRESS, LIQUIDITY_AMOUNTS_HELPER_ADDRESS, LimitOrderManagerABI, LiquidityAmountsHelperABI, LiquidityDistribution, PairV2, PoolVersion, RouteV2, TradeV2, VAULT_FACTORY_ADDRESS, VaultABI, VaultFactoryABI, getBidAskDistributionFromBinRange, getCurveDistributionFromBinRange, getDistributionFromTargetBin, getLiquidityConfig, getUniformDistributionFromBinRange, isZero, index as jsonAbis, normalizeDist, toHex, validateAndParseAddress };
//# sourceMappingURL=sdk-v2.esm.js.map
