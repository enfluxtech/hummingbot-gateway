{"version":3,"file":"LiquidityDraft.js","sources":["../../../../src/core/liquidity/LiquidityDraft.ts"],"sourcesContent":["import Big from \"big.js\"\nimport { constants } from \"ethers\"\n\nimport { BIG_ZERO } from \"../../constants\"\nimport { tickToPrice, toSqrtX96 } from \"../../utils\"\nimport { bigNumber2BigAndScaleDown } from \"../../utils/formatters\"\nimport { PerpetualProtocol } from \"../PerpetualProtocol\"\nimport { LiquidityBase, LiquidityBaseConstructorData, RangeType } from \"./LiquidityBase\"\n\nconst AMOUNT_MAX = bigNumber2BigAndScaleDown(constants.MaxUint256, 1)\n\nexport interface EventPayloadLiquidityAmountUpdated {\n    quoteAmount?: Big\n    baseAmount?: Big\n    isLastEditBase: boolean\n    isUpdatedFromTickPrice: boolean\n}\n\nexport interface LiquidityDraftLiquidityAmountUpdatable {\n    amount: Big\n    isBaseToken: boolean\n    isUpdatedFromTickPrice?: boolean\n}\n\nexport interface LiquidityDraftTickUpdatable {\n    lowerRawPrice?: Big\n    upperRawPrice?: Big\n    isLastEditBase: boolean\n    isFullRange?: boolean\n}\n\nexport interface LiquidityDraftConstructorData extends LiquidityBaseConstructorData {\n    perp: PerpetualProtocol\n    lowerTick: number\n    upperTick: number\n    rawBaseAmount?: Big\n    rawQuoteAmount?: Big\n}\n\nexport class LiquidityDraft extends LiquidityBase {\n    private readonly _perp: PerpetualProtocol\n\n    readonly rawBaseAmount?: Big\n    readonly rawQuoteAmount?: Big\n\n    constructor({ perp, market, lowerTick, upperTick, rawBaseAmount, rawQuoteAmount }: LiquidityDraftConstructorData) {\n        super({ market }, perp.channelRegistry)\n\n        this._perp = perp\n        this._lowerTick = lowerTick\n        this._upperTick = upperTick\n        this.rawBaseAmount = rawBaseAmount\n        this.rawQuoteAmount = rawQuoteAmount\n    }\n\n    async getLiquidity({ cache = true } = {}) {\n        const [{ markPrice }, rangeType] = await Promise.all([\n            this.market.getPrices({ cache }),\n            this.getRangeType({ cache }),\n        ])\n        const markPriceSqrtX96 = toSqrtX96(markPrice)\n        const lowerTickPrice = tickToPrice(this._lowerTick)\n        const upperTickPrice = tickToPrice(this._upperTick)\n        const lowerPriceSqrtX96 = toSqrtX96(lowerTickPrice)\n        const upperPriceSqrtX96 = toSqrtX96(upperTickPrice)\n\n        switch (rangeType) {\n            case RangeType.RANGE_AT_LEFT: {\n                // NOTE: calc with max baseAmount, ignore rawBaseAmount\n                // NOTE: rawQuoteAmount: should have value, if not => 0 liquidity\n                return this.rawQuoteAmount\n                    ? LiquidityDraft.maxLiquidityForAmounts(\n                          markPriceSqrtX96,\n                          lowerPriceSqrtX96,\n                          upperPriceSqrtX96,\n                          AMOUNT_MAX,\n                          this.rawQuoteAmount,\n                      )\n                    : BIG_ZERO\n            }\n            case RangeType.RANGE_AT_RIGHT: {\n                // NOTE: calc with max quoteAmount, ignore rawQuoteAmount\n                // NOTE: rawBaseAmount: should have value, if not => 0 liquidity\n                return this.rawBaseAmount\n                    ? LiquidityDraft.maxLiquidityForAmounts(\n                          markPriceSqrtX96,\n                          lowerPriceSqrtX96,\n                          upperPriceSqrtX96,\n                          this.rawBaseAmount,\n                          AMOUNT_MAX,\n                      )\n                    : BIG_ZERO\n            }\n            case RangeType.RANGE_INSIDE: {\n                // NOTE: at least one of rawBaseAmount & rawQuoteAmount should have value, if not => 0 liquidity\n                if (!this.rawBaseAmount && !this.rawQuoteAmount) {\n                    return BIG_ZERO\n                }\n                return LiquidityDraft.maxLiquidityForAmounts(\n                    markPriceSqrtX96,\n                    lowerPriceSqrtX96,\n                    upperPriceSqrtX96,\n                    this.rawBaseAmount || AMOUNT_MAX,\n                    this.rawQuoteAmount || AMOUNT_MAX,\n                )\n            }\n            default: {\n                return BIG_ZERO\n            }\n        }\n    }\n\n    async getBaseAmount({ cache = true } = {}) {\n        const rangeType = await this.getRangeType({ cache })\n        // NOTE: if cache = false, below async methods' `market.getPrices` already get fetched\n        const liquidity = await this.getLiquidity()\n        const { markPrice } = await this.market.getPrices()\n        const markPriceSqrtX96 = toSqrtX96(markPrice)\n        const lowerTickPrice = tickToPrice(this._lowerTick)\n        const lowerPriceSqrtX96 = toSqrtX96(lowerTickPrice)\n        const upperTickPrice = tickToPrice(this._upperTick)\n        const upperPriceSqrtX96 = toSqrtX96(upperTickPrice)\n\n        let amount = BIG_ZERO\n\n        switch (rangeType) {\n            case RangeType.RANGE_AT_RIGHT: {\n                amount = LiquidityDraft.getBaseTokenAmountFromLiquidity(lowerPriceSqrtX96, upperPriceSqrtX96, liquidity)\n                break\n            }\n            case RangeType.RANGE_INSIDE: {\n                amount = LiquidityDraft.getBaseTokenAmountFromLiquidity(markPriceSqrtX96, upperPriceSqrtX96, liquidity)\n                break\n            }\n            case RangeType.RANGE_AT_LEFT: {\n                amount = BIG_ZERO\n                break\n            }\n        }\n\n        return amount\n    }\n\n    async getQuoteAmount({ cache = true } = {}) {\n        const rangeType = await this.getRangeType({ cache })\n        // NOTE: if cache = false, below async methods' `market.getPrices` already get fetched\n        const liquidity = await this.getLiquidity()\n        const { markPrice } = await this.market.getPrices()\n        const markPriceSqrtX96 = toSqrtX96(markPrice)\n        const lowerTickPrice = tickToPrice(this._lowerTick)\n        const lowerPriceSqrtX96 = toSqrtX96(lowerTickPrice)\n        const upperTickPrice = tickToPrice(this._upperTick)\n        const upperPriceSqrtX96 = toSqrtX96(upperTickPrice)\n\n        let amount = BIG_ZERO\n\n        switch (rangeType) {\n            case RangeType.RANGE_AT_LEFT: {\n                amount = LiquidityDraft.getQuoteTokenAmountFromLiquidity(\n                    lowerPriceSqrtX96,\n                    upperPriceSqrtX96,\n                    liquidity,\n                )\n                break\n            }\n            case RangeType.RANGE_INSIDE: {\n                amount = LiquidityDraft.getQuoteTokenAmountFromLiquidity(markPriceSqrtX96, lowerPriceSqrtX96, liquidity)\n                break\n            }\n            case RangeType.RANGE_AT_RIGHT: {\n                amount = BIG_ZERO\n                break\n            }\n        }\n\n        return amount\n    }\n\n    getTickPrices() {\n        const lowerTickPrice = tickToPrice(this._lowerTick)\n        const upperTickPrice = tickToPrice(this._upperTick)\n\n        return {\n            lowerTickPrice,\n            upperTickPrice,\n        }\n    }\n}\n"],"names":["AMOUNT_MAX","bigNumber2BigAndScaleDown","constants","MaxUint256","LiquidityDraft","LiquidityBase","constructor","perp","market","lowerTick","upperTick","rawBaseAmount","rawQuoteAmount","super","channelRegistry","this","_perp","_lowerTick","_upperTick","async","cache","markPrice","rangeType","Promise","all","getPrices","getRangeType","markPriceSqrtX96","toSqrtX96","lowerTickPrice","tickToPrice","upperTickPrice","lowerPriceSqrtX96","upperPriceSqrtX96","RangeType","RANGE_AT_LEFT","maxLiquidityForAmounts","BIG_ZERO","RANGE_AT_RIGHT","RANGE_INSIDE","liquidity","getLiquidity","amount","getBaseTokenAmountFromLiquidity","getQuoteTokenAmountFromLiquidity","getTickPrices"],"mappings":"yVASA,MAAMA,EAAaC,EAA0BC,EAAUC,WAAY,GA8B7D,MAAOC,UAAuBC,EAMhCC,aAAYC,KAAEA,EAAIC,OAAEA,EAAMC,UAAEA,EAASC,UAAEA,EAASC,cAAEA,EAAaC,eAAEA,IAC7DC,MAAM,CAAEL,UAAUD,EAAKO,iBAEvBC,KAAKC,MAAQT,EACbQ,KAAKE,WAAaR,EAClBM,KAAKG,WAAaR,EAClBK,KAAKJ,cAAgBA,EACrBI,KAAKH,eAAiBA,CACzB,CAEDO,oBAAmBC,MAAEA,GAAQ,GAAS,CAAA,GAClC,OAAOC,UAAEA,GAAaC,SAAmBC,QAAQC,IAAI,CACjDT,KAAKP,OAAOiB,UAAU,CAAEL,UACxBL,KAAKW,aAAa,CAAEN,YAElBO,EAAmBC,EAAUP,GAC7BQ,EAAiBC,EAAYf,KAAKE,YAClCc,EAAiBD,EAAYf,KAAKG,YAClCc,EAAoBJ,EAAUC,GAC9BI,EAAoBL,EAAUG,GAEpC,OAAQT,GACJ,KAAKY,EAAUC,cAGX,OAAOpB,KAAKH,eACNR,EAAegC,uBACXT,EACAK,EACAC,EACAjC,EACAe,KAAKH,gBAETyB,EAEV,KAAKH,EAAUI,eAGX,OAAOvB,KAAKJ,cACNP,EAAegC,uBACXT,EACAK,EACAC,EACAlB,KAAKJ,cACLX,GAEJqC,EAEV,KAAKH,EAAUK,aAEX,OAAKxB,KAAKJ,eAAkBI,KAAKH,eAG1BR,EAAegC,uBAClBT,EACAK,EACAC,EACAlB,KAAKJ,eAAiBX,EACtBe,KAAKH,gBAAkBZ,GAPhBqC,EAUf,QACI,OAAOA,EAGlB,CAEDlB,qBAAoBC,MAAEA,GAAQ,GAAS,CAAA,GACnC,MAAME,QAAkBP,KAAKW,aAAa,CAAEN,UAEtCoB,QAAkBzB,KAAK0B,gBACvBpB,UAAEA,SAAoBN,KAAKP,OAAOiB,YAClCE,EAAmBC,EAAUP,GAC7BQ,EAAiBC,EAAYf,KAAKE,YAClCe,EAAoBJ,EAAUC,GAC9BE,EAAiBD,EAAYf,KAAKG,YAClCe,EAAoBL,EAAUG,GAEpC,IAAIW,EAASL,EAEb,OAAQf,GACJ,KAAKY,EAAUI,eACXI,EAAStC,EAAeuC,gCAAgCX,EAAmBC,EAAmBO,GAC9F,MAEJ,KAAKN,EAAUK,aACXG,EAAStC,EAAeuC,gCAAgChB,EAAkBM,EAAmBO,GAC7F,MAEJ,KAAKN,EAAUC,cACXO,EAASL,EAKjB,OAAOK,CACV,CAEDvB,sBAAqBC,MAAEA,GAAQ,GAAS,CAAA,GACpC,MAAME,QAAkBP,KAAKW,aAAa,CAAEN,UAEtCoB,QAAkBzB,KAAK0B,gBACvBpB,UAAEA,SAAoBN,KAAKP,OAAOiB,YAClCE,EAAmBC,EAAUP,GAC7BQ,EAAiBC,EAAYf,KAAKE,YAClCe,EAAoBJ,EAAUC,GAC9BE,EAAiBD,EAAYf,KAAKG,YAClCe,EAAoBL,EAAUG,GAEpC,IAAIW,EAASL,EAEb,OAAQf,GACJ,KAAKY,EAAUC,cACXO,EAAStC,EAAewC,iCACpBZ,EACAC,EACAO,GAEJ,MAEJ,KAAKN,EAAUK,aACXG,EAAStC,EAAewC,iCAAiCjB,EAAkBK,EAAmBQ,GAC9F,MAEJ,KAAKN,EAAUI,eACXI,EAASL,EAKjB,OAAOK,CACV,CAEDG,gBAII,MAAO,CACHhB,eAJmBC,EAAYf,KAAKE,YAKpCc,eAJmBD,EAAYf,KAAKG,YAM3C"}