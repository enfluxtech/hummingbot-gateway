// source: injective/oracle/v1beta1/query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var injective_oracle_v1beta1_oracle_pb = require('../../../injective/oracle/v1beta1/oracle_pb.js');
goog.object.extend(proto, injective_oracle_v1beta1_oracle_pb);
var injective_oracle_v1beta1_genesis_pb = require('../../../injective/oracle/v1beta1/genesis_pb.js');
goog.object.extend(proto, injective_oracle_v1beta1_genesis_pb);
var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.injective.oracle.v1beta1.OracleHistoryOptions', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.PricePairState', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryBandRelayersRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryBandRelayersResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryModuleStateRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryModuleStateResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOraclePriceRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOraclePriceResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryParamsRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryParamsResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest', null, global);
goog.exportSymbol('proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryParamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryParamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryParamsRequest.displayName = 'proto.injective.oracle.v1beta1.QueryParamsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryParamsResponse.displayName = 'proto.injective.oracle.v1beta1.QueryParamsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryBandRelayersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryBandRelayersRequest.displayName = 'proto.injective.oracle.v1beta1.QueryBandRelayersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryBandRelayersResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryBandRelayersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryBandRelayersResponse.displayName = 'proto.injective.oracle.v1beta1.QueryBandRelayersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.displayName = 'proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.displayName = 'proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.displayName = 'proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.displayName = 'proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.displayName = 'proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.displayName = 'proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.displayName = 'proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.displayName = 'proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.displayName = 'proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.displayName = 'proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryModuleStateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryModuleStateRequest.displayName = 'proto.injective.oracle.v1beta1.QueryModuleStateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryModuleStateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryModuleStateResponse.displayName = 'proto.injective.oracle.v1beta1.QueryModuleStateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.displayName = 'proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.displayName = 'proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.OracleHistoryOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.OracleHistoryOptions.displayName = 'proto.injective.oracle.v1beta1.OracleHistoryOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.displayName = 'proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.displayName = 'proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.displayName = 'proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.displayName = 'proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.displayName = 'proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.repeatedFields_, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.displayName = 'proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOraclePriceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOraclePriceRequest.displayName = 'proto.injective.oracle.v1beta1.QueryOraclePriceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.PricePairState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.PricePairState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.PricePairState.displayName = 'proto.injective.oracle.v1beta1.PricePairState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.injective.oracle.v1beta1.QueryOraclePriceResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.injective.oracle.v1beta1.QueryOraclePriceResponse.displayName = 'proto.injective.oracle.v1beta1.QueryOraclePriceResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryParamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryParamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryParamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryParamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryParamsRequest}
 */
proto.injective.oracle.v1beta1.QueryParamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryParamsRequest;
  return proto.injective.oracle.v1beta1.QueryParamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryParamsRequest}
 */
proto.injective.oracle.v1beta1.QueryParamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryParamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryParamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryParamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && injective_oracle_v1beta1_oracle_pb.Params.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryParamsResponse}
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryParamsResponse;
  return proto.injective.oracle.v1beta1.QueryParamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryParamsResponse}
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.Params;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.Params.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.injective.oracle.v1beta1.Params}
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.prototype.getParams = function() {
  return /** @type{?proto.injective.oracle.v1beta1.Params} */ (
    jspb.Message.getWrapperField(this, injective_oracle_v1beta1_oracle_pb.Params, 1));
};


/**
 * @param {?proto.injective.oracle.v1beta1.Params|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryParamsResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryParamsResponse.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryParamsResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryParamsResponse.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryBandRelayersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryBandRelayersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersRequest}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryBandRelayersRequest;
  return proto.injective.oracle.v1beta1.QueryBandRelayersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryBandRelayersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersRequest}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryBandRelayersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryBandRelayersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandRelayersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryBandRelayersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    relayersList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryBandRelayersResponse;
  return proto.injective.oracle.v1beta1.QueryBandRelayersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addRelayers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryBandRelayersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelayersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string relayers = 1;
 * @return {!Array<string>}
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.prototype.getRelayersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.prototype.setRelayersList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.prototype.addRelayers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryBandRelayersResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryBandRelayersResponse.prototype.clearRelayersList = function() {
  return this.setRelayersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest;
  return proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatesList: jspb.Message.toObjectList(msg.getPriceStatesList(),
    injective_oracle_v1beta1_oracle_pb.BandPriceState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse;
  return proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.BandPriceState;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.BandPriceState.deserializeBinaryFromReader);
      msg.addPriceStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.BandPriceState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BandPriceState price_states = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.BandPriceState>}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.prototype.getPriceStatesList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.BandPriceState>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.BandPriceState, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.BandPriceState>} value
 * @return {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.prototype.setPriceStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.BandPriceState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.BandPriceState}
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.prototype.addPriceStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.BandPriceState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryBandPriceStatesResponse.prototype.clearPriceStatesList = function() {
  return this.setPriceStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest;
  return proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatesList: jspb.Message.toObjectList(msg.getPriceStatesList(),
    injective_oracle_v1beta1_oracle_pb.BandPriceState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse;
  return proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.BandPriceState;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.BandPriceState.deserializeBinaryFromReader);
      msg.addPriceStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.BandPriceState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BandPriceState price_states = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.BandPriceState>}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.prototype.getPriceStatesList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.BandPriceState>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.BandPriceState, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.BandPriceState>} value
 * @return {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.prototype.setPriceStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.BandPriceState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.BandPriceState}
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.prototype.addPriceStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.BandPriceState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryBandIBCPriceStatesResponse.prototype.clearPriceStatesList = function() {
  return this.setPriceStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest;
  return proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatesList: jspb.Message.toObjectList(msg.getPriceStatesList(),
    injective_oracle_v1beta1_oracle_pb.PriceFeedState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse;
  return proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.PriceFeedState;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.PriceFeedState.deserializeBinaryFromReader);
      msg.addPriceStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.PriceFeedState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PriceFeedState price_states = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.PriceFeedState>}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.prototype.getPriceStatesList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.PriceFeedState>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.PriceFeedState, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.PriceFeedState>} value
 * @return {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.prototype.setPriceStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.PriceFeedState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.PriceFeedState}
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.prototype.addPriceStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.PriceFeedState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryPriceFeedPriceStatesResponse.prototype.clearPriceStatesList = function() {
  return this.setPriceStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest;
  return proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceStatesList: jspb.Message.toObjectList(msg.getPriceStatesList(),
    injective_oracle_v1beta1_oracle_pb.CoinbasePriceState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse;
  return proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.CoinbasePriceState;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.CoinbasePriceState.deserializeBinaryFromReader);
      msg.addPriceStates(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.CoinbasePriceState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CoinbasePriceState price_states = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.CoinbasePriceState>}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.prototype.getPriceStatesList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.CoinbasePriceState>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.CoinbasePriceState, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.CoinbasePriceState>} value
 * @return {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.prototype.setPriceStatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.CoinbasePriceState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.CoinbasePriceState}
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.prototype.addPriceStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.CoinbasePriceState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryCoinbasePriceStatesResponse.prototype.clearPriceStatesList = function() {
  return this.setPriceStatesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest;
  return proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateRequest.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceState: (f = msg.getPriceState()) && injective_oracle_v1beta1_oracle_pb.PriceState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse;
  return proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.PriceState;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.PriceState.deserializeBinaryFromReader);
      msg.setPriceState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.PriceState.serializeBinaryToWriter
    );
  }
};


/**
 * optional PriceState price_state = 1;
 * @return {?proto.injective.oracle.v1beta1.PriceState}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.prototype.getPriceState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PriceState} */ (
    jspb.Message.getWrapperField(this, injective_oracle_v1beta1_oracle_pb.PriceState, 1));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PriceState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.prototype.setPriceState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.prototype.clearPriceState = function() {
  return this.setPriceState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryProviderPriceStateResponse.prototype.hasPriceState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryModuleStateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryModuleStateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryModuleStateRequest}
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryModuleStateRequest;
  return proto.injective.oracle.v1beta1.QueryModuleStateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryModuleStateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryModuleStateRequest}
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryModuleStateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryModuleStateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryModuleStateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryModuleStateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryModuleStateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && injective_oracle_v1beta1_genesis_pb.GenesisState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryModuleStateResponse}
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryModuleStateResponse;
  return proto.injective.oracle.v1beta1.QueryModuleStateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryModuleStateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryModuleStateResponse}
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_genesis_pb.GenesisState;
      reader.readMessage(value,injective_oracle_v1beta1_genesis_pb.GenesisState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryModuleStateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryModuleStateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_oracle_v1beta1_genesis_pb.GenesisState.serializeBinaryToWriter
    );
  }
};


/**
 * optional GenesisState state = 1;
 * @return {?proto.injective.oracle.v1beta1.GenesisState}
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.prototype.getState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.GenesisState} */ (
    jspb.Message.getWrapperField(this, injective_oracle_v1beta1_genesis_pb.GenesisState, 1));
};


/**
 * @param {?proto.injective.oracle.v1beta1.GenesisState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryModuleStateResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryModuleStateResponse.prototype.setState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryModuleStateResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.prototype.clearState = function() {
  return this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryModuleStateResponse.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracle: jspb.Message.getFieldWithDefault(msg, 1, 0),
    symbolId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest;
  return proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbolId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracle();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSymbolId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional OracleType oracle = 1;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.prototype.getOracle = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.prototype.setOracle = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string symbol_id = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.prototype.getSymbolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsRequest.prototype.setSymbolId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceRecordsList: jspb.Message.toObjectList(msg.getPriceRecordsList(),
    injective_oracle_v1beta1_oracle_pb.PriceRecords.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse;
  return proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.PriceRecords;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.PriceRecords.deserializeBinaryFromReader);
      msg.addPriceRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceRecordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.PriceRecords.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PriceRecords price_records = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.PriceRecords>}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.prototype.getPriceRecordsList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.PriceRecords>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.PriceRecords, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.PriceRecords>} value
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.prototype.setPriceRecordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.PriceRecords=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.PriceRecords}
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.prototype.addPriceRecords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.PriceRecords, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryHistoricalPriceRecordsResponse.prototype.clearPriceRecordsList = function() {
  return this.setPriceRecordsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.OracleHistoryOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.OracleHistoryOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxAge: jspb.Message.getFieldWithDefault(msg, 1, 0),
    includeRawHistory: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    includeMetadata: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.OracleHistoryOptions}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.OracleHistoryOptions;
  return proto.injective.oracle.v1beta1.OracleHistoryOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.OracleHistoryOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.OracleHistoryOptions}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaxAge(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeRawHistory(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludeMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.OracleHistoryOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.OracleHistoryOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxAge();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getIncludeRawHistory();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIncludeMetadata();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint64 max_age = 1;
 * @return {number}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.getMaxAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.OracleHistoryOptions} returns this
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.setMaxAge = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool include_raw_history = 2;
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.getIncludeRawHistory = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.oracle.v1beta1.OracleHistoryOptions} returns this
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.setIncludeRawHistory = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool include_metadata = 3;
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.getIncludeMetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.injective.oracle.v1beta1.OracleHistoryOptions} returns this
 */
proto.injective.oracle.v1beta1.OracleHistoryOptions.prototype.setIncludeMetadata = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseInfo: (f = msg.getBaseInfo()) && injective_oracle_v1beta1_oracle_pb.OracleInfo.toObject(includeInstance, f),
    quoteInfo: (f = msg.getQuoteInfo()) && injective_oracle_v1beta1_oracle_pb.OracleInfo.toObject(includeInstance, f),
    oracleHistoryOptions: (f = msg.getOracleHistoryOptions()) && proto.injective.oracle.v1beta1.OracleHistoryOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest;
  return proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.OracleInfo;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.OracleInfo.deserializeBinaryFromReader);
      msg.setBaseInfo(value);
      break;
    case 2:
      var value = new injective_oracle_v1beta1_oracle_pb.OracleInfo;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.OracleInfo.deserializeBinaryFromReader);
      msg.setQuoteInfo(value);
      break;
    case 3:
      var value = new proto.injective.oracle.v1beta1.OracleHistoryOptions;
      reader.readMessage(value,proto.injective.oracle.v1beta1.OracleHistoryOptions.deserializeBinaryFromReader);
      msg.setOracleHistoryOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.OracleInfo.serializeBinaryToWriter
    );
  }
  f = message.getQuoteInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      injective_oracle_v1beta1_oracle_pb.OracleInfo.serializeBinaryToWriter
    );
  }
  f = message.getOracleHistoryOptions();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.injective.oracle.v1beta1.OracleHistoryOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional OracleInfo base_info = 1;
 * @return {?proto.injective.oracle.v1beta1.OracleInfo}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.getBaseInfo = function() {
  return /** @type{?proto.injective.oracle.v1beta1.OracleInfo} */ (
    jspb.Message.getWrapperField(this, injective_oracle_v1beta1_oracle_pb.OracleInfo, 1));
};


/**
 * @param {?proto.injective.oracle.v1beta1.OracleInfo|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.setBaseInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.clearBaseInfo = function() {
  return this.setBaseInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.hasBaseInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OracleInfo quote_info = 2;
 * @return {?proto.injective.oracle.v1beta1.OracleInfo}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.getQuoteInfo = function() {
  return /** @type{?proto.injective.oracle.v1beta1.OracleInfo} */ (
    jspb.Message.getWrapperField(this, injective_oracle_v1beta1_oracle_pb.OracleInfo, 2));
};


/**
 * @param {?proto.injective.oracle.v1beta1.OracleInfo|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.setQuoteInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.clearQuoteInfo = function() {
  return this.setQuoteInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.hasQuoteInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OracleHistoryOptions oracle_history_options = 3;
 * @return {?proto.injective.oracle.v1beta1.OracleHistoryOptions}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.getOracleHistoryOptions = function() {
  return /** @type{?proto.injective.oracle.v1beta1.OracleHistoryOptions} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.OracleHistoryOptions, 3));
};


/**
 * @param {?proto.injective.oracle.v1beta1.OracleHistoryOptions|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.setOracleHistoryOptions = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.clearOracleHistoryOptions = function() {
  return this.setOracleHistoryOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityRequest.prototype.hasOracleHistoryOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    volatility: jspb.Message.getFieldWithDefault(msg, 1, ""),
    historyMetadata: (f = msg.getHistoryMetadata()) && injective_oracle_v1beta1_oracle_pb.MetadataStatistics.toObject(includeInstance, f),
    rawHistoryList: jspb.Message.toObjectList(msg.getRawHistoryList(),
    injective_oracle_v1beta1_oracle_pb.PriceRecord.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse;
  return proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVolatility(value);
      break;
    case 2:
      var value = new injective_oracle_v1beta1_oracle_pb.MetadataStatistics;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.MetadataStatistics.deserializeBinaryFromReader);
      msg.setHistoryMetadata(value);
      break;
    case 3:
      var value = new injective_oracle_v1beta1_oracle_pb.PriceRecord;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.PriceRecord.deserializeBinaryFromReader);
      msg.addRawHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolatility();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHistoryMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      injective_oracle_v1beta1_oracle_pb.MetadataStatistics.serializeBinaryToWriter
    );
  }
  f = message.getRawHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      injective_oracle_v1beta1_oracle_pb.PriceRecord.serializeBinaryToWriter
    );
  }
};


/**
 * optional string volatility = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.getVolatility = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.setVolatility = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional MetadataStatistics history_metadata = 2;
 * @return {?proto.injective.oracle.v1beta1.MetadataStatistics}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.getHistoryMetadata = function() {
  return /** @type{?proto.injective.oracle.v1beta1.MetadataStatistics} */ (
    jspb.Message.getWrapperField(this, injective_oracle_v1beta1_oracle_pb.MetadataStatistics, 2));
};


/**
 * @param {?proto.injective.oracle.v1beta1.MetadataStatistics|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.setHistoryMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.clearHistoryMetadata = function() {
  return this.setHistoryMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.hasHistoryMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PriceRecord raw_history = 3;
 * @return {!Array<!proto.injective.oracle.v1beta1.PriceRecord>}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.getRawHistoryList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.PriceRecord>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.PriceRecord, 3));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.PriceRecord>} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.setRawHistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.PriceRecord=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.PriceRecord}
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.addRawHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.injective.oracle.v1beta1.PriceRecord, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleVolatilityResponse.prototype.clearRawHistoryList = function() {
  return this.setRawHistoryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest;
  return proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    providersList: jspb.Message.toObjectList(msg.getProvidersList(),
    injective_oracle_v1beta1_oracle_pb.ProviderInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse;
  return proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.ProviderInfo;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.ProviderInfo.deserializeBinaryFromReader);
      msg.addProviders(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvidersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.ProviderInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProviderInfo providers = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.ProviderInfo>}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.prototype.getProvidersList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.ProviderInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.ProviderInfo, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.ProviderInfo>} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.prototype.setProvidersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.ProviderInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.ProviderInfo}
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.prototype.addProviders = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.ProviderInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleProvidersInfoResponse.prototype.clearProvidersList = function() {
  return this.setProvidersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    provider: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest;
  return proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProvider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProvider();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string provider = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.prototype.getProvider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesRequest.prototype.setProvider = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    providerstateList: jspb.Message.toObjectList(msg.getProviderstateList(),
    injective_oracle_v1beta1_oracle_pb.ProviderState.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse;
  return proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new injective_oracle_v1beta1_oracle_pb.ProviderState;
      reader.readMessage(value,injective_oracle_v1beta1_oracle_pb.ProviderState.deserializeBinaryFromReader);
      msg.addProviderstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProviderstateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      injective_oracle_v1beta1_oracle_pb.ProviderState.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProviderState providerState = 1;
 * @return {!Array<!proto.injective.oracle.v1beta1.ProviderState>}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.prototype.getProviderstateList = function() {
  return /** @type{!Array<!proto.injective.oracle.v1beta1.ProviderState>} */ (
    jspb.Message.getRepeatedWrapperField(this, injective_oracle_v1beta1_oracle_pb.ProviderState, 1));
};


/**
 * @param {!Array<!proto.injective.oracle.v1beta1.ProviderState>} value
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.prototype.setProviderstateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.injective.oracle.v1beta1.ProviderState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.injective.oracle.v1beta1.ProviderState}
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.prototype.addProviderstate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.injective.oracle.v1beta1.ProviderState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryOracleProviderPricesResponse.prototype.clearProviderstateList = function() {
  return this.setProviderstateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOraclePriceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    oracleType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    base: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quote: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOraclePriceRequest;
  return proto.injective.oracle.v1beta1.QueryOraclePriceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (reader.readEnum());
      msg.setOracleType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOraclePriceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOracleType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getBase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional OracleType oracle_type = 1;
 * @return {!proto.injective.oracle.v1beta1.OracleType}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.getOracleType = function() {
  return /** @type {!proto.injective.oracle.v1beta1.OracleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.injective.oracle.v1beta1.OracleType} value
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.setOracleType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string base = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.getBase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.setBase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quote = 3;
 * @return {string}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceRequest} returns this
 */
proto.injective.oracle.v1beta1.QueryOraclePriceRequest.prototype.setQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.PricePairState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.PricePairState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PricePairState.toObject = function(includeInstance, msg) {
  var f, obj = {
    pairPrice: jspb.Message.getFieldWithDefault(msg, 1, ""),
    basePrice: jspb.Message.getFieldWithDefault(msg, 2, ""),
    quotePrice: jspb.Message.getFieldWithDefault(msg, 3, ""),
    baseCumulativePrice: jspb.Message.getFieldWithDefault(msg, 4, ""),
    quoteCumulativePrice: jspb.Message.getFieldWithDefault(msg, 5, ""),
    baseTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    quoteTimestamp: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.PricePairState}
 */
proto.injective.oracle.v1beta1.PricePairState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.PricePairState;
  return proto.injective.oracle.v1beta1.PricePairState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.PricePairState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.PricePairState}
 */
proto.injective.oracle.v1beta1.PricePairState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPairPrice(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBasePrice(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuotePrice(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBaseCumulativePrice(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuoteCumulativePrice(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBaseTimestamp(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuoteTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.PricePairState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.PricePairState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.PricePairState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPairPrice();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBasePrice();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuotePrice();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBaseCumulativePrice();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getQuoteCumulativePrice();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBaseTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getQuoteTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * optional string pair_price = 1;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getPairPrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setPairPrice = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string base_price = 2;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getBasePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setBasePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string quote_price = 3;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getQuotePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setQuotePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string base_cumulative_price = 4;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getBaseCumulativePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setBaseCumulativePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string quote_cumulative_price = 5;
 * @return {string}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getQuoteCumulativePrice = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setQuoteCumulativePrice = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 base_timestamp = 6;
 * @return {number}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getBaseTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setBaseTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 quote_timestamp = 7;
 * @return {number}
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.getQuoteTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.injective.oracle.v1beta1.PricePairState} returns this
 */
proto.injective.oracle.v1beta1.PricePairState.prototype.setQuoteTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.injective.oracle.v1beta1.QueryOraclePriceResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pricePairState: (f = msg.getPricePairState()) && proto.injective.oracle.v1beta1.PricePairState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.injective.oracle.v1beta1.QueryOraclePriceResponse;
  return proto.injective.oracle.v1beta1.QueryOraclePriceResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.injective.oracle.v1beta1.PricePairState;
      reader.readMessage(value,proto.injective.oracle.v1beta1.PricePairState.deserializeBinaryFromReader);
      msg.setPricePairState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.injective.oracle.v1beta1.QueryOraclePriceResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPricePairState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.injective.oracle.v1beta1.PricePairState.serializeBinaryToWriter
    );
  }
};


/**
 * optional PricePairState price_pair_state = 1;
 * @return {?proto.injective.oracle.v1beta1.PricePairState}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.prototype.getPricePairState = function() {
  return /** @type{?proto.injective.oracle.v1beta1.PricePairState} */ (
    jspb.Message.getWrapperField(this, proto.injective.oracle.v1beta1.PricePairState, 1));
};


/**
 * @param {?proto.injective.oracle.v1beta1.PricePairState|undefined} value
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse} returns this
*/
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.prototype.setPricePairState = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.injective.oracle.v1beta1.QueryOraclePriceResponse} returns this
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.prototype.clearPricePairState = function() {
  return this.setPricePairState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.injective.oracle.v1beta1.QueryOraclePriceResponse.prototype.hasPricePairState = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.injective.oracle.v1beta1);
