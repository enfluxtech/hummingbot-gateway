import Big from "big.js";
import { Channel, ChannelEventSource } from "../../internal";
import { PerpetualProtocolConnected } from "../PerpetualProtocol";
import { Liquidity } from "./Liquidity";
export interface UpdatedDataReturn {
    openLiquiditiesFromMarkets: {
        [marketBaseAddress: string]: Liquidity[];
    };
    totalPendingFees: {
        [marketBaseAddress: string]: Big;
    };
}
declare type LiquiditiesEventName = "updateError" | "updated" | "updatedLiquidityDataAll";
declare class Liquidities extends Channel<LiquiditiesEventName> {
    private readonly _perp;
    private _cache;
    private readonly _fetchAndEmitUpdated;
    constructor(_perp: PerpetualProtocolConnected);
    private _compareUpdatedData;
    protected _getEventSourceMap(): {
        updated: ChannelEventSource<LiquiditiesEventName>;
        updatedLiquidityDataAll: ChannelEventSource<string>;
    };
    private _fetchUpdateData;
    getTotalLiquidities({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<{
        [marketBaseAddress: string]: Big;
    }>;
    getTotalLiquidityByMarket(baseAddress: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getTotalPendingFees({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<{
        [marketBaseAddress: string]: Big;
    }>;
    getTotalPendingFeeByMarket(baseAddress: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Big>;
    getOpenLiquiditiesFromMarkets({ cache }?: {
        cache?: boolean | undefined;
    }): Promise<{
        [marketBaseAddress: string]: Liquidity[];
    }>;
    getOpenLiquiditiesByMarket(baseAddress: string, { cache }?: {
        cache?: boolean | undefined;
    }): Promise<Liquidity[]>;
    private _fetch;
    protected getLiquidityDataAll(): Promise<void>;
}
export { Liquidities };
export interface LiquidityData {
    totalPendingFee: Big;
    totalLiquidityValue: Big;
    openOrderIds: number[];
    openLiquidities: Liquidity[];
    markPrice: Big;
}
export declare type LiquidityDataAll = Record<string, LiquidityData>;
