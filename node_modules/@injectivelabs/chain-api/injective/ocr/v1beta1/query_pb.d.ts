// package: injective.ocr.v1beta1
// file: injective/ocr/v1beta1/query.proto

import * as jspb from "google-protobuf";
import * as google_api_annotations_pb from "../../../google/api/annotations_pb";
import * as injective_ocr_v1beta1_ocr_pb from "../../../injective/ocr/v1beta1/ocr_pb";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../../cosmos/base/v1beta1/coin_pb";
import * as injective_ocr_v1beta1_genesis_pb from "../../../injective/ocr/v1beta1/genesis_pb";

export class QueryParamsRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryParamsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryParamsRequest): QueryParamsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryParamsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryParamsRequest;
  static deserializeBinaryFromReader(message: QueryParamsRequest, reader: jspb.BinaryReader): QueryParamsRequest;
}

export namespace QueryParamsRequest {
  export type AsObject = {
  }
}

export class QueryParamsResponse extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_ocr_v1beta1_ocr_pb.Params | undefined;
  setParams(value?: injective_ocr_v1beta1_ocr_pb.Params): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryParamsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryParamsResponse): QueryParamsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryParamsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryParamsResponse;
  static deserializeBinaryFromReader(message: QueryParamsResponse, reader: jspb.BinaryReader): QueryParamsResponse;
}

export namespace QueryParamsResponse {
  export type AsObject = {
    params?: injective_ocr_v1beta1_ocr_pb.Params.AsObject,
  }
}

export class QueryFeedConfigRequest extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeedConfigRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeedConfigRequest): QueryFeedConfigRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeedConfigRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeedConfigRequest;
  static deserializeBinaryFromReader(message: QueryFeedConfigRequest, reader: jspb.BinaryReader): QueryFeedConfigRequest;
}

export namespace QueryFeedConfigRequest {
  export type AsObject = {
    feedId: string,
  }
}

export class QueryFeedConfigResponse extends jspb.Message {
  hasFeedConfigInfo(): boolean;
  clearFeedConfigInfo(): void;
  getFeedConfigInfo(): injective_ocr_v1beta1_ocr_pb.FeedConfigInfo | undefined;
  setFeedConfigInfo(value?: injective_ocr_v1beta1_ocr_pb.FeedConfigInfo): void;

  hasFeedConfig(): boolean;
  clearFeedConfig(): void;
  getFeedConfig(): injective_ocr_v1beta1_ocr_pb.FeedConfig | undefined;
  setFeedConfig(value?: injective_ocr_v1beta1_ocr_pb.FeedConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeedConfigResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeedConfigResponse): QueryFeedConfigResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeedConfigResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeedConfigResponse;
  static deserializeBinaryFromReader(message: QueryFeedConfigResponse, reader: jspb.BinaryReader): QueryFeedConfigResponse;
}

export namespace QueryFeedConfigResponse {
  export type AsObject = {
    feedConfigInfo?: injective_ocr_v1beta1_ocr_pb.FeedConfigInfo.AsObject,
    feedConfig?: injective_ocr_v1beta1_ocr_pb.FeedConfig.AsObject,
  }
}

export class QueryFeedConfigInfoRequest extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeedConfigInfoRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeedConfigInfoRequest): QueryFeedConfigInfoRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeedConfigInfoRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeedConfigInfoRequest;
  static deserializeBinaryFromReader(message: QueryFeedConfigInfoRequest, reader: jspb.BinaryReader): QueryFeedConfigInfoRequest;
}

export namespace QueryFeedConfigInfoRequest {
  export type AsObject = {
    feedId: string,
  }
}

export class QueryFeedConfigInfoResponse extends jspb.Message {
  hasFeedConfigInfo(): boolean;
  clearFeedConfigInfo(): void;
  getFeedConfigInfo(): injective_ocr_v1beta1_ocr_pb.FeedConfigInfo | undefined;
  setFeedConfigInfo(value?: injective_ocr_v1beta1_ocr_pb.FeedConfigInfo): void;

  hasEpochAndRound(): boolean;
  clearEpochAndRound(): void;
  getEpochAndRound(): injective_ocr_v1beta1_ocr_pb.EpochAndRound | undefined;
  setEpochAndRound(value?: injective_ocr_v1beta1_ocr_pb.EpochAndRound): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryFeedConfigInfoResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryFeedConfigInfoResponse): QueryFeedConfigInfoResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryFeedConfigInfoResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryFeedConfigInfoResponse;
  static deserializeBinaryFromReader(message: QueryFeedConfigInfoResponse, reader: jspb.BinaryReader): QueryFeedConfigInfoResponse;
}

export namespace QueryFeedConfigInfoResponse {
  export type AsObject = {
    feedConfigInfo?: injective_ocr_v1beta1_ocr_pb.FeedConfigInfo.AsObject,
    epochAndRound?: injective_ocr_v1beta1_ocr_pb.EpochAndRound.AsObject,
  }
}

export class QueryLatestRoundRequest extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryLatestRoundRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryLatestRoundRequest): QueryLatestRoundRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryLatestRoundRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryLatestRoundRequest;
  static deserializeBinaryFromReader(message: QueryLatestRoundRequest, reader: jspb.BinaryReader): QueryLatestRoundRequest;
}

export namespace QueryLatestRoundRequest {
  export type AsObject = {
    feedId: string,
  }
}

export class QueryLatestRoundResponse extends jspb.Message {
  getLatestRoundId(): number;
  setLatestRoundId(value: number): void;

  hasData(): boolean;
  clearData(): void;
  getData(): injective_ocr_v1beta1_ocr_pb.Transmission | undefined;
  setData(value?: injective_ocr_v1beta1_ocr_pb.Transmission): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryLatestRoundResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryLatestRoundResponse): QueryLatestRoundResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryLatestRoundResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryLatestRoundResponse;
  static deserializeBinaryFromReader(message: QueryLatestRoundResponse, reader: jspb.BinaryReader): QueryLatestRoundResponse;
}

export namespace QueryLatestRoundResponse {
  export type AsObject = {
    latestRoundId: number,
    data?: injective_ocr_v1beta1_ocr_pb.Transmission.AsObject,
  }
}

export class QueryLatestTransmissionDetailsRequest extends jspb.Message {
  getFeedId(): string;
  setFeedId(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryLatestTransmissionDetailsRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryLatestTransmissionDetailsRequest): QueryLatestTransmissionDetailsRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryLatestTransmissionDetailsRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryLatestTransmissionDetailsRequest;
  static deserializeBinaryFromReader(message: QueryLatestTransmissionDetailsRequest, reader: jspb.BinaryReader): QueryLatestTransmissionDetailsRequest;
}

export namespace QueryLatestTransmissionDetailsRequest {
  export type AsObject = {
    feedId: string,
  }
}

export class QueryLatestTransmissionDetailsResponse extends jspb.Message {
  getConfigDigest(): Uint8Array | string;
  getConfigDigest_asU8(): Uint8Array;
  getConfigDigest_asB64(): string;
  setConfigDigest(value: Uint8Array | string): void;

  hasEpochAndRound(): boolean;
  clearEpochAndRound(): void;
  getEpochAndRound(): injective_ocr_v1beta1_ocr_pb.EpochAndRound | undefined;
  setEpochAndRound(value?: injective_ocr_v1beta1_ocr_pb.EpochAndRound): void;

  hasData(): boolean;
  clearData(): void;
  getData(): injective_ocr_v1beta1_ocr_pb.Transmission | undefined;
  setData(value?: injective_ocr_v1beta1_ocr_pb.Transmission): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryLatestTransmissionDetailsResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryLatestTransmissionDetailsResponse): QueryLatestTransmissionDetailsResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryLatestTransmissionDetailsResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryLatestTransmissionDetailsResponse;
  static deserializeBinaryFromReader(message: QueryLatestTransmissionDetailsResponse, reader: jspb.BinaryReader): QueryLatestTransmissionDetailsResponse;
}

export namespace QueryLatestTransmissionDetailsResponse {
  export type AsObject = {
    configDigest: Uint8Array | string,
    epochAndRound?: injective_ocr_v1beta1_ocr_pb.EpochAndRound.AsObject,
    data?: injective_ocr_v1beta1_ocr_pb.Transmission.AsObject,
  }
}

export class QueryOwedAmountRequest extends jspb.Message {
  getTransmitter(): string;
  setTransmitter(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOwedAmountRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOwedAmountRequest): QueryOwedAmountRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOwedAmountRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOwedAmountRequest;
  static deserializeBinaryFromReader(message: QueryOwedAmountRequest, reader: jspb.BinaryReader): QueryOwedAmountRequest;
}

export namespace QueryOwedAmountRequest {
  export type AsObject = {
    transmitter: string,
  }
}

export class QueryOwedAmountResponse extends jspb.Message {
  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setAmount(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryOwedAmountResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryOwedAmountResponse): QueryOwedAmountResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryOwedAmountResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryOwedAmountResponse;
  static deserializeBinaryFromReader(message: QueryOwedAmountResponse, reader: jspb.BinaryReader): QueryOwedAmountResponse;
}

export namespace QueryOwedAmountResponse {
  export type AsObject = {
    amount?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
  }
}

export class QueryModuleStateRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateRequest.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateRequest): QueryModuleStateRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateRequest;
  static deserializeBinaryFromReader(message: QueryModuleStateRequest, reader: jspb.BinaryReader): QueryModuleStateRequest;
}

export namespace QueryModuleStateRequest {
  export type AsObject = {
  }
}

export class QueryModuleStateResponse extends jspb.Message {
  hasState(): boolean;
  clearState(): void;
  getState(): injective_ocr_v1beta1_genesis_pb.GenesisState | undefined;
  setState(value?: injective_ocr_v1beta1_genesis_pb.GenesisState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): QueryModuleStateResponse.AsObject;
  static toObject(includeInstance: boolean, msg: QueryModuleStateResponse): QueryModuleStateResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: QueryModuleStateResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): QueryModuleStateResponse;
  static deserializeBinaryFromReader(message: QueryModuleStateResponse, reader: jspb.BinaryReader): QueryModuleStateResponse;
}

export namespace QueryModuleStateResponse {
  export type AsObject = {
    state?: injective_ocr_v1beta1_genesis_pb.GenesisState.AsObject,
  }
}

