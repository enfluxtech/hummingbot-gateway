import{ContractName as r}from"../../contracts/Contracts.js";import{UnauthorizedError as t}from"../../errors/errors.js";import{getTransaction as e}from"../../transactionSender/index.js";import"big.js";import{invariant as o}from"../../utils/errorChecker.js";import{big2BigNumberAndScaleUp as n}from"../../utils/formatters.js";import"../../utils/tick.js";import"../../constants/envVariables.js";import"../../constants/numbers.js";class a{constructor(r){this._perp=r}async cancelLimitOrder(a){return o(this._perp.hasConnected(),(()=>new t({functionName:"cancelLimitOrder"}))),e({account:this._perp.wallet.account,contract:this._perp.contracts.limitOrderBook,contractName:r.CLEARINGHOUSE,contractFunctionName:"cancelLimitOrder",args:[{orderType:a.orderType,salt:Number(a.salt),trader:a.trader,baseToken:a.baseToken,isBaseToQuote:a.isBaseToQuote,isExactInput:a.isExactInput,amount:n(a.amount,0),oppositeAmountBound:n(a.oppositeAmountBound,0),deadline:n(a.deadline,0),sqrtPriceLimitX96:n(a.sqrtPriceLimitX96,0),referralCode:a.referralCode,reduceOnly:a.reduceOnly,roundIdWhenCreated:n(a.roundIdWhenCreated,0),triggerPrice:n(a.triggerPrice,0)}]})}async getPriceFeedLatestRound({tickerSymbol:r}){const t=this._perp.markets.getMarket({tickerSymbol:r});try{const{contract:r}=await t.getPriceFeedAggregator(),{roundId:e}=await r.latestRoundData();return e.toString()}catch(r){return}}}export{a as LimitOrderBook};
//# sourceMappingURL=LimitOrderBook.js.map
