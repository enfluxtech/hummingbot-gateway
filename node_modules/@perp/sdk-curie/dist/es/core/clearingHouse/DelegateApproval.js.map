{"version":3,"file":"DelegateApproval.js","sources":["../../../../src/core/clearingHouse/DelegateApproval.ts"],"sourcesContent":["import { invariant, poll } from \"../../utils\"\nimport { DelegateApproval as ContractDelegateApproval } from \"../../contracts/type\"\nimport { ContractName } from \"../../contracts\"\nimport type { PerpetualProtocol, PerpetualProtocolConnected } from \"../PerpetualProtocol\"\nimport { UnauthorizedError } from \"../../errors\"\nimport { ContractReader } from \"../contractReader\"\nimport { getTransaction } from \"../../transactionSender\"\nimport { Channel, ChannelEventSource, DEFAULT_PERIOD, MemoizedFetcher, createMemoizedFetcher } from \"../../internal\"\n\ntype DelegateApprovalEventName = \"delegateApprovalUpdated\" | \"updateError\"\n\ntype CacheKey = \"openPosition\"\ntype CacheValue = boolean\n\nexport interface DelegateApprovalConfigs {\n    delegate: string\n    period: number\n}\n\nexport class DelegateApproval extends Channel<DelegateApprovalEventName> {\n    private readonly _contractReader: ContractReader\n    private _cache: Map<CacheKey, CacheValue> = new Map()\n    private readonly _account: string\n    public delegate: string\n\n    constructor(protected readonly _perp: PerpetualProtocolConnected, configs?: DelegateApprovalConfigs) {\n        super(_perp.channelRegistry)\n        this._contractReader = _perp.contractReader\n        this._account = _perp.wallet.account\n        this.delegate = configs ? configs.delegate : _perp.metadata.contracts.LimitOrderBook.address\n    }\n\n    async approveOpenPosition() {\n        const openPositionAction = await this._perp.contractReader.getClearingHouseOpenPositionAction()\n        return this.approve(openPositionAction)\n    }\n\n    async revokeOpenPosition() {\n        const openPositionAction = await this._perp.contractReader.getClearingHouseOpenPositionAction()\n        return this.revoke(openPositionAction)\n    }\n\n    async approve(actions: number) {\n        invariant(this._perp.hasConnected(), () => new UnauthorizedError({ functionName: \"approve\" }))\n\n        return getTransaction<ContractDelegateApproval, \"approve\">({\n            account: this._perp.wallet.account,\n            contract: this._perp.contracts.delegateApproval,\n            contractName: ContractName.DelegateApproval,\n            contractFunctionName: \"approve\",\n            args: [this.delegate, actions],\n        })\n    }\n\n    async revoke(actions: number) {\n        invariant(this._perp.hasConnected(), () => new UnauthorizedError({ functionName: \"revoke\" }))\n\n        return getTransaction<ContractDelegateApproval, \"revoke\">({\n            account: this._perp.wallet.account,\n            contract: this._perp.contracts.delegateApproval,\n            contractName: ContractName.DelegateApproval,\n            contractFunctionName: \"revoke\",\n            args: [this.delegate, actions],\n        })\n    }\n\n    async delegateApprovalForOpenPosition({ cache = true } = {}) {\n        return await this._fetch(\"openPosition\", { cache })\n    }\n\n    protected _getEventSourceMap() {\n        const fetchAndEmitDelegateApprovalUpdated = this._createFetchAndEmitDelegateApprovalUpdated()\n        const delegateApprovalUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(\n                    fetchAndEmitDelegateApprovalUpdated,\n                    this._perp.moduleConfigs?.delegateApproval?.period || DEFAULT_PERIOD,\n                ).cancel,\n            initEventEmitter: () => fetchAndEmitDelegateApprovalUpdated(true, true),\n        })\n\n        return {\n            delegateApprovalUpdated,\n        }\n    }\n\n    // NOTE: private methods\n    private async _fetchUpdateData<T>(fetcher: () => Promise<T>) {\n        try {\n            return await fetcher()\n        } catch (error) {\n            this.emit(\"updateError\", { error })\n        }\n    }\n\n    private async _fetch(key: \"openPosition\", obj?: { cache: boolean }): Promise<boolean>\n    private async _fetch(key: CacheKey, { cache = true } = {}) {\n        if (this._cache.has(key) && cache) {\n            return this._cache.get(key) as CacheValue\n        }\n\n        let result\n        switch (key) {\n            case \"openPosition\": {\n                result = await this._contractReader.canOpenPositionFor(this._account, this.delegate)\n                break\n            }\n        }\n        this._cache.set(key, result)\n\n        return result\n    }\n\n    private _createFetchAndEmitDelegateApprovalUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this._fetch(\"openPosition\", { cache: false })),\n            () => this.emit(\"delegateApprovalUpdated\", this),\n            (a, b) => a !== b,\n        )\n    }\n}\n"],"names":["DelegateApproval","Channel","constructor","_perp","configs","super","channelRegistry","this","_cache","Map","_contractReader","contractReader","_account","wallet","account","delegate","metadata","contracts","LimitOrderBook","address","async","openPositionAction","getClearingHouseOpenPositionAction","approve","revoke","actions","invariant","hasConnected","UnauthorizedError","functionName","getTransaction","contract","delegateApproval","contractName","ContractName","contractFunctionName","args","cache","_fetch","_getEventSourceMap","fetchAndEmitDelegateApprovalUpdated","_createFetchAndEmitDelegateApprovalUpdated","delegateApprovalUpdated","ChannelEventSource","eventSourceStarter","poll","_b","_a","moduleConfigs","period","DEFAULT_PERIOD","cancel","initEventEmitter","fetcher","error","emit","key","has","get","result","canOpenPositionFor","set","createMemoizedFetcher","_fetchUpdateData","a","b"],"mappings":"yqBAmBM,MAAOA,UAAyBC,EAMlCC,YAA+BC,EAAmCC,GAC9DC,MAAMF,EAAMG,iBADeC,KAAKJ,MAALA,EAJvBI,KAAAC,OAAoC,IAAIC,IAM5CF,KAAKG,gBAAkBP,EAAMQ,eAC7BJ,KAAKK,SAAWT,EAAMU,OAAOC,QAC7BP,KAAKQ,SAAWX,EAAUA,EAAQW,SAAWZ,EAAMa,SAASC,UAAUC,eAAeC,OACxF,CAEDC,4BACI,MAAMC,QAA2Bd,KAAKJ,MAAMQ,eAAeW,qCAC3D,OAAOf,KAAKgB,QAAQF,EACvB,CAEDD,2BACI,MAAMC,QAA2Bd,KAAKJ,MAAMQ,eAAeW,qCAC3D,OAAOf,KAAKiB,OAAOH,EACtB,CAEDD,cAAcK,GAGV,OAFAC,EAAUnB,KAAKJ,MAAMwB,gBAAgB,IAAM,IAAIC,EAAkB,CAAEC,aAAc,cAE1EC,EAAoD,CACvDhB,QAASP,KAAKJ,MAAMU,OAAOC,QAC3BiB,SAAUxB,KAAKJ,MAAMc,UAAUe,iBAC/BC,aAAcC,EAAalC,iBAC3BmC,qBAAsB,UACtBC,KAAM,CAAC7B,KAAKQ,SAAUU,IAE7B,CAEDL,aAAaK,GAGT,OAFAC,EAAUnB,KAAKJ,MAAMwB,gBAAgB,IAAM,IAAIC,EAAkB,CAAEC,aAAc,aAE1EC,EAAmD,CACtDhB,QAASP,KAAKJ,MAAMU,OAAOC,QAC3BiB,SAAUxB,KAAKJ,MAAMc,UAAUe,iBAC/BC,aAAcC,EAAalC,iBAC3BmC,qBAAsB,SACtBC,KAAM,CAAC7B,KAAKQ,SAAUU,IAE7B,CAEDL,uCAAsCiB,MAAEA,GAAQ,GAAS,CAAA,GACrD,aAAa9B,KAAK+B,OAAO,eAAgB,CAAED,SAC9C,CAESE,qBACN,MAAMC,EAAsCjC,KAAKkC,6CAUjD,MAAO,CACHC,wBAV4B,IAAIC,EAAmB,CACnDC,mBAAoB,aAChB,OAAAC,EACIL,GAC4C,QAA5CM,EAAwB,QAAxBC,EAAAxC,KAAKJ,MAAM6C,qBAAa,IAAAD,OAAA,EAAAA,EAAEf,wBAAkB,IAAAc,OAAA,EAAAA,EAAAG,SAAUC,GACxDC,MAAM,EACZC,iBAAkB,IAAMZ,GAAoC,GAAM,KAMzE,CAGOpB,uBAA0BiC,GAC9B,IACI,aAAaA,GAGhB,CAFC,MAAOC,GACL/C,KAAKgD,KAAK,cAAe,CAAED,SAC9B,CACJ,CAGOlC,aAAaoC,GAAenB,MAAEA,GAAQ,GAAS,CAAA,GACnD,GAAI9B,KAAKC,OAAOiD,IAAID,IAAQnB,EACxB,OAAO9B,KAAKC,OAAOkD,IAAIF,GAG3B,IAAIG,EACJ,GACS,iBADDH,EAEAG,QAAepD,KAAKG,gBAAgBkD,mBAAmBrD,KAAKK,SAAUL,KAAKQ,UAMnF,OAFAR,KAAKC,OAAOqD,IAAIL,EAAKG,GAEdA,CACV,CAEOlB,6CACJ,OAAOqB,GACH,IAAMvD,KAAKwD,kBAAiB,IAAMxD,KAAK+B,OAAO,eAAgB,CAAED,OAAO,QACvE,IAAM9B,KAAKgD,KAAK,0BAA2BhD,QAC3C,CAACyD,EAAGC,IAAMD,IAAMC,GAEvB"}