"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("../../internal/Channel.js"),t=require("../../internal/ChannelEventSource.js"),r=require("../../internal/createMemoizedFetcher.js"),a=require("../../internal/config.js"),n=require("../position/PositionDraft.js");require("big.js");var i=require("../../utils/errorChecker.js"),c=require("../../utils/formatters.js");require("../../utils/tick.js");var o=require("../../utils/poll.js");require("../../constants/envVariables.js");var s=require("../../constants/numbers.js"),u=require("ethers"),p=require("../../contracts/Contracts.js"),l=require("../liquidity/LiquidityDraft.js"),d=require("../../errors/errors.js"),m=require("../../transactionSender/index.js");class h extends e.Channel{constructor(e){super(e.channelRegistry),this._perp=e,this._cache=new Map}createPositionDraft({tickerSymbol:e,amountInput:t,isAmountInputBase:r,side:a}){const i=this._perp.markets.getMarket({tickerSymbol:e});return new n.PositionDraft(this._perp,{market:i,amountInput:t,isAmountInputBase:r,side:a})}createLiquidityDraft({tickerSymbol:e,lowerTick:t,upperTick:r,rawQuoteAmount:a,rawBaseAmount:n}){const i=this._perp.markets.getMarket({tickerSymbol:e});return new l.LiquidityDraft({perp:this._perp,market:i,lowerTick:t,upperTick:r,rawQuoteAmount:a,rawBaseAmount:n})}async openPosition(e,t,r){i.invariant(this._perp.hasConnected(),(()=>new d.UnauthorizedError({functionName:"openPosition"})));const a=await e.getOppositeAmountBound(t),n=r?u.utils.formatBytes32String(r):u.constants.HashZero;return m.getTransaction({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:p.ContractName.CLEARINGHOUSE,contractFunctionName:"openPosition",args:[{baseToken:e.market.baseAddress,isBaseToQuote:e.isBaseToQuote,isExactInput:e.isExactInput,amount:c.big2BigNumberAndScaleUp(e.amountInput),oppositeAmountBound:c.big2BigNumberAndScaleUp(a),sqrtPriceLimitX96:0,deadline:u.constants.MaxUint256,referralCode:n}]})}async closePosition(e,t,r){i.invariant(this._perp.hasConnected(),(()=>new d.UnauthorizedError({functionName:"closePosition"})));const a=await e.getOppositeAmountBound(t),n=r?u.utils.formatBytes32String(r):u.constants.HashZero;return m.getTransaction({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:p.ContractName.CLEARINGHOUSE,contractFunctionName:"closePosition",args:[{baseToken:e.market.baseAddress,oppositeAmountBound:c.big2BigNumberAndScaleUp(a),sqrtPriceLimitX96:0,deadline:u.constants.MaxUint256,referralCode:n}]})}async addLiquidity(e,t){i.invariant(this._perp.hasConnected(),(()=>new d.UnauthorizedError({functionName:"addLiquidity"})));const r=await e.getBaseAmount(),a=await e.getQuoteAmount(),n=c.big2BigNumberAndScaleUp(r),o=c.big2BigNumberAndScaleUp(a),l=c.big2BigNumberAndScaleUp(r.mul(s.BIG_ONE.sub(t))),h=c.big2BigNumberAndScaleUp(a.mul(s.BIG_ONE.sub(t)));return m.getTransaction({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:p.ContractName.CLEARINGHOUSE,contractFunctionName:"addLiquidity",args:[{baseToken:e.market.baseAddress,base:n,quote:o,lowerTick:e.lowerTick,upperTick:e.upperTick,minBase:l,minQuote:h,deadline:u.constants.MaxUint256,useTakerBalance:!1}]})}async removeLiquidity(e,t,r){i.invariant(this._perp.hasConnected(),(()=>new d.UnauthorizedError({functionName:"removeLiquidity"})));const{amountBase:a,amountQuote:n}=await e.getLiquidityAmounts(),o=c.big2BigNumberAndScaleUp(a.mul(t).mul(s.BIG_ONE.sub(r))),l=c.big2BigNumberAndScaleUp(n.mul(t).mul(s.BIG_ONE.sub(r)));return m.getTransaction({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:p.ContractName.CLEARINGHOUSE,contractFunctionName:"removeLiquidity",args:[{baseToken:e.market.baseAddress,lowerTick:e.lowerTick,upperTick:e.upperTick,liquidity:c.big2BigNumberAndScaleUp(e.liquidity.mul(t),0),minBase:o,minQuote:l,deadline:u.constants.MaxUint256}]})}async quitMarket(e){i.invariant(this._perp.hasConnected(),(()=>new d.UnauthorizedError({functionName:"quitMarket"})));const t=this._perp.markets.getMarket({tickerSymbol:e}).baseAddress,r=this._perp.wallet.account;return m.getTransaction({account:this._perp.wallet.account,contract:this._perp.contracts.clearingHouse,contractName:p.ContractName.CLEARINGHOUSE,contractFunctionName:"quitMarket",args:[r,t]})}_getEventSourceMap(){const e=this._createFetchAndEmitAccountValueUpdated();return{updated:new t.ChannelEventSource({eventSourceStarter:()=>{var t,r;return o.poll(e,(null===(r=null===(t=this._perp.moduleConfigs)||void 0===t?void 0:t.clearingHouse)||void 0===r?void 0:r.period)||a.DEFAULT_PERIOD).cancel},initEventEmitter:()=>e(!0,!0)})}}async _fetchUpdateData(e){try{return await e()}catch(e){this.emit("updateError",{error:e})}}_createFetchAndEmitAccountValueUpdated(){return r.createMemoizedFetcher((()=>this._fetchUpdateData((()=>this._fetch("accountValue",{cache:!1})))),(()=>this.emit("updated",this)),((e,t)=>!e||!t||r.hasNumberChange(e,t)))}async getAccountValue({cache:e=!0}={}){return this._fetch("accountValue",{cache:e})}async _fetch(e,{cache:t=!0}={}){if(this._cache.has(e)&&t)return this._cache.get(e);let r;if("accountValue"===e)i.invariant(this._perp.hasConnected(),(()=>new d.UnauthorizedError({functionName:"getAccountValue"}))),r=await this._perp.contractReader.getAccountValue(this._perp.wallet.account);return this._cache.set(e,r),r}}exports.ClearingHouse=h;
//# sourceMappingURL=ClearingHouse.js.map
