{"version":3,"file":"NonSettlementCollateralToken.js","sources":["../../../../src/core/wallet/NonSettlementCollateralToken.ts"],"sourcesContent":["import { Big } from \"big.js\"\nimport { Contract, constants } from \"ethers\"\n\nimport { ContractName } from \"../../contracts\"\nimport { IERC20Metadata } from \"../../contracts/type\"\nimport { Channel, ChannelEventSource } from \"../../internal\"\nimport { Collateral } from \"../../metadata\"\nimport { getTransaction } from \"../../transactionSender\"\nimport { big2BigNumberAndScaleUp, bigNumber2BigAndScaleDown } from \"../../utils\"\nimport { ContractReader } from \"../contractReader\"\nimport { PerpetualProtocol } from \"../PerpetualProtocol\"\n\ntype CollateralEventName = \"Approval\" | \"Transfer\"\n\ntype CacheKey = \"symbol\" | \"decimals\" | \"weight\" | \"cap\" | \"name\" | \"price\"\ntype CacheValue = number | string | Big\n\nexport class NonSettlementCollateralToken extends Channel<CollateralEventName> {\n    private _cache: Map<CacheKey, CacheValue> = new Map()\n    private _contract: IERC20Metadata\n    private _contractReader: ContractReader\n    private _priceFeedContract: Contract\n    private _metadataInfo?: Collateral\n\n    constructor(private readonly _perp: PerpetualProtocol, contract: IERC20Metadata, priceFeedContract: Contract) {\n        super(_perp.channelRegistry)\n        this._contract = contract\n        this._priceFeedContract = priceFeedContract\n        this._contractReader = _perp.contractReader\n        this._metadataInfo = _perp.metadata.findCollateralByAddress(contract.address)\n    }\n\n    get contract() {\n        return this._contract\n    }\n\n    get priceFeedContract() {\n        return this._priceFeedContract\n    }\n\n    get address() {\n        return this._contract.address\n    }\n\n    // NOTE: should be a static value\n    async symbol({ cache = true } = {}) {\n        return this._fetch(\"symbol\", { cache })\n    }\n\n    // NOTE: should be a static value\n    async name({ cache = true } = {}) {\n        return this._fetch(\"name\", { cache })\n    }\n\n    // NOTE: should be a static value\n    async decimals({ cache = true } = {}) {\n        return this._fetch(\"decimals\", { cache })\n    }\n\n    // NOTE: should be a static value\n    async weight({ cache = true } = {}) {\n        return this._fetch(\"weight\", { cache })\n    }\n\n    // NOTE: should be a static value\n    async cap({ cache = true } = {}) {\n        return this._fetch(\"cap\", { cache })\n    }\n\n    async price({ cache = true } = {}) {\n        return this._fetch(\"price\", { cache })\n    }\n\n    async balanceOf(account: string) {\n        const decimals = await this.decimals()\n        return this._contractReader.getBalanceByToken(account, this.address, decimals)\n    }\n\n    async allowance(account: string, spender: string) {\n        return this._contractReader.getAllowanceByToken(account, spender, this.address)\n    }\n\n    async approve(account: string, spender: string, amount?: Big) {\n        const decimals = await this.decimals()\n        return getTransaction<IERC20Metadata, \"approve\">({\n            account,\n            contract: this._contract,\n            contractName: ContractName.COLLATERAL_TOKENS,\n            contractFunctionName: \"approve\",\n            args: [spender, amount ? big2BigNumberAndScaleUp(amount, decimals) : constants.MaxUint256],\n        })\n    }\n    protected _getEventSourceMap() {\n        const approvalEventSource = new ChannelEventSource<CollateralEventName>({\n            eventSourceStarter: eventName => {\n                const handler = (...args: any[]) => this.emit(\"Approval\", ...args)\n                this._contract.on(\"Approval\", handler)\n                return () => this._contract.off(\"Approval\", handler)\n            },\n        })\n        const transferEventSource = new ChannelEventSource<CollateralEventName>({\n            eventSourceStarter: eventName => {\n                const handler = (...args: any[]) => this.emit(\"Transfer\", ...args)\n                this._contract.on(\"Transfer\", handler)\n                return () => this._contract.off(\"Transfer\", handler)\n            },\n        })\n        return {\n            Approval: approvalEventSource,\n            Transfer: transferEventSource,\n        }\n    }\n\n    private async _fetch(key: \"name\", obj?: { cache: boolean }): Promise<string>\n    private async _fetch(key: \"symbol\", obj?: { cache: boolean }): Promise<string>\n    private async _fetch(key: \"decimals\", obj?: { cache: boolean }): Promise<number>\n    private async _fetch(key: \"weight\", obj?: { cache: boolean }): Promise<number>\n    private async _fetch(key: \"cap\", obj?: { cache: boolean }): Promise<Big>\n    private async _fetch(key: \"price\", obj?: { cache: boolean }): Promise<number>\n    private async _fetch(key: CacheKey, { cache = true } = {}) {\n        if (this._cache.has(key) && cache) {\n            return this._cache.get(key) as CacheValue\n        }\n\n        let result\n        switch (key) {\n            case \"symbol\": {\n                const symbol = this._metadataInfo?.symbol\n                result = symbol ? symbol : await this._contract.symbol()\n                break\n            }\n            case \"name\": {\n                const name = this._metadataInfo?.name\n                result = name ? name : await this._contract.name()\n                break\n            }\n            case \"decimals\": {\n                const decimals = this._metadataInfo?.decimals\n                result = decimals ? decimals : await this._contract.decimals()\n                break\n            }\n            case \"weight\": {\n                result = (await this._contractReader.getCollateralConfig(this.address)).collateralRatio\n                break\n            }\n            case \"cap\": {\n                result = (await this._contractReader.getCollateralConfig(this.address)).depositCap\n                break\n            }\n            case \"price\": {\n                const [price, decimals] = await Promise.all([\n                    this._priceFeedContract.getPrice(0),\n                    this._priceFeedContract.decimals(),\n                ])\n                result = bigNumber2BigAndScaleDown(price, decimals).toNumber()\n                break\n            }\n        }\n        this._cache.set(key, result)\n\n        return result\n    }\n}\n"],"names":["NonSettlementCollateralToken","Channel","constructor","_perp","contract","priceFeedContract","super","channelRegistry","this","_cache","Map","_contract","_priceFeedContract","_contractReader","contractReader","_metadataInfo","metadata","findCollateralByAddress","address","async","cache","_fetch","account","decimals","getBalanceByToken","spender","getAllowanceByToken","amount","getTransaction","contractName","ContractName","COLLATERAL_TOKENS","contractFunctionName","args","big2BigNumberAndScaleUp","constants","MaxUint256","_getEventSourceMap","Approval","ChannelEventSource","eventSourceStarter","eventName","handler","emit","on","off","Transfer","key","has","get","result","symbol","_a","name","_b","_c","getCollateralConfig","collateralRatio","depositCap","price","Promise","all","getPrice","bigNumber2BigAndScaleDown","toNumber","set"],"mappings":"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"}