export declare const LBRouterV21ABI: readonly [{
    readonly inputs: readonly [{
        readonly internalType: "contract ILBFactory";
        readonly name: "factory";
        readonly type: "address";
    }, {
        readonly internalType: "contract IJoeFactory";
        readonly name: "factoryV1";
        readonly type: "address";
    }, {
        readonly internalType: "contract ILBLegacyFactory";
        readonly name: "legacyFactory";
        readonly type: "address";
    }, {
        readonly internalType: "contract ILBLegacyRouter";
        readonly name: "legacyRouter";
        readonly type: "address";
    }, {
        readonly internalType: "contract IWNATIVE";
        readonly name: "wnative";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "constructor";
}, {
    readonly inputs: readonly [];
    readonly name: "AddressHelper__CallFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "AddressHelper__NonContract";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__InsufficientAmount";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "JoeLibrary__InsufficientLiquidity";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountSlippage";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__AmountSlippageBPTooBig";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountXMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__AmountSlippageCaught";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "id";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__BinReserveOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__BrokenSwapSafetyCheck";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "currentTimestamp";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__DeadlineExceeded";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "recipient";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__FailedToSendNATIVE";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "idDesired";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "idSlippage";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__IdDesiredOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "int256";
        readonly name: "id";
        readonly type: "int256";
    }];
    readonly name: "LBRouter__IdOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "activeIdDesired";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "idSlippage";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "activeId";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__IdSlippageCaught";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOutMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__InsufficientAmountOut";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "wrongToken";
        readonly type: "address";
    }];
    readonly name: "LBRouter__InvalidTokenPath";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "version";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__InvalidVersion";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__LengthsMismatch";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountInMax";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__MaxAmountInExceeded";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__NotFactoryOwner";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "binStep";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__PairNotCreated";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__SenderIsNotWNATIVE";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "id";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__SwapOverflows";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "excess";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__TooMuchTokensIn";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "reserve";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__WrongAmounts";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "msgValue";
        readonly type: "uint256";
    }];
    readonly name: "LBRouter__WrongNativeLiquidityParameters";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "LBRouter__WrongTokenOrder";
    readonly type: "error";
}, {
    readonly inputs: readonly [];
    readonly name: "TokenHelper__TransferFailed";
    readonly type: "error";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "binStep";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountX";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountY";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountXMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountYMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "activeIdDesired";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "idSlippage";
            readonly type: "uint256";
        }, {
            readonly internalType: "int256[]";
            readonly name: "deltaIds";
            readonly type: "int256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionX";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionY";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "refundTo";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILBRouter.LiquidityParameters";
        readonly name: "liquidityParameters";
        readonly type: "tuple";
    }];
    readonly name: "addLiquidity";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountXAdded";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYAdded";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountXLeft";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYLeft";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "depositIds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "liquidityMinted";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "contract IERC20";
            readonly name: "tokenX";
            readonly type: "address";
        }, {
            readonly internalType: "contract IERC20";
            readonly name: "tokenY";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "binStep";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountX";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountY";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountXMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "amountYMin";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "activeIdDesired";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "idSlippage";
            readonly type: "uint256";
        }, {
            readonly internalType: "int256[]";
            readonly name: "deltaIds";
            readonly type: "int256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionX";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "distributionY";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "refundTo";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "deadline";
            readonly type: "uint256";
        }];
        readonly internalType: "struct ILBRouter.LiquidityParameters";
        readonly name: "liquidityParameters";
        readonly type: "tuple";
    }];
    readonly name: "addLiquidityNATIVE";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountXAdded";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYAdded";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountXLeft";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYLeft";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "depositIds";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "liquidityMinted";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint24";
        readonly name: "activeId";
        readonly type: "uint24";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }];
    readonly name: "createLBPair";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "pair";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getFactory";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBFactory";
        readonly name: "lbFactory";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "pair";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "price";
        readonly type: "uint256";
    }];
    readonly name: "getIdFromPrice";
    readonly outputs: readonly [{
        readonly internalType: "uint24";
        readonly name: "";
        readonly type: "uint24";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getLegacyFactory";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBLegacyFactory";
        readonly name: "legacyLBfactory";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getLegacyRouter";
    readonly outputs: readonly [{
        readonly internalType: "contract ILBLegacyRouter";
        readonly name: "legacyRouter";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "pair";
        readonly type: "address";
    }, {
        readonly internalType: "uint24";
        readonly name: "id";
        readonly type: "uint24";
    }];
    readonly name: "getPriceFromId";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "pair";
        readonly type: "address";
    }, {
        readonly internalType: "uint128";
        readonly name: "amountOut";
        readonly type: "uint128";
    }, {
        readonly internalType: "bool";
        readonly name: "swapForY";
        readonly type: "bool";
    }];
    readonly name: "getSwapIn";
    readonly outputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "amountIn";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint128";
        readonly name: "amountOutLeft";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint128";
        readonly name: "fee";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBPair";
        readonly name: "pair";
        readonly type: "address";
    }, {
        readonly internalType: "uint128";
        readonly name: "amountIn";
        readonly type: "uint128";
    }, {
        readonly internalType: "bool";
        readonly name: "swapForY";
        readonly type: "bool";
    }];
    readonly name: "getSwapOut";
    readonly outputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "amountInLeft";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint128";
        readonly name: "amountOut";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint128";
        readonly name: "fee";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getV1Factory";
    readonly outputs: readonly [{
        readonly internalType: "contract IJoeFactory";
        readonly name: "factoryV1";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getWNATIVE";
    readonly outputs: readonly [{
        readonly internalType: "contract IWNATIVE";
        readonly name: "wnative";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "tokenX";
        readonly type: "address";
    }, {
        readonly internalType: "contract IERC20";
        readonly name: "tokenY";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountXMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountYMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "amounts";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "removeLiquidity";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountX";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountY";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "uint16";
        readonly name: "binStep";
        readonly type: "uint16";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountTokenMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountNATIVEMin";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "amounts";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "address payable";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "removeLiquidityNATIVE";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountToken";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountNATIVE";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOutMin";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactNATIVEForTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOutMin";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountOutMinNATIVE";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address payable";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForNATIVE";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountOutMinNATIVE";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address payable";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForNATIVESupportingFeeOnTransferTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountOutMin";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountIn";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountOutMin";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapExactTokensForTokensSupportingFeeOnTransferTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapNATIVEForExactTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsIn";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountNATIVEOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountInMax";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address payable";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapTokensForExactNATIVE";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsIn";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amountOut";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "amountInMax";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "pairBinSteps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "enum ILBRouter.Version[]";
            readonly name: "versions";
            readonly type: "uint8[]";
        }, {
            readonly internalType: "contract IERC20[]";
            readonly name: "tokenPath";
            readonly type: "address[]";
        }];
        readonly internalType: "struct ILBRouter.Path";
        readonly name: "path";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "deadline";
        readonly type: "uint256";
    }];
    readonly name: "swapTokensForExactTokens";
    readonly outputs: readonly [{
        readonly internalType: "uint256[]";
        readonly name: "amountsIn";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract IERC20";
        readonly name: "token";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "sweep";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "contract ILBToken";
        readonly name: "lbToken";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "ids";
        readonly type: "uint256[]";
    }, {
        readonly internalType: "uint256[]";
        readonly name: "amounts";
        readonly type: "uint256[]";
    }];
    readonly name: "sweepLBToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly stateMutability: "payable";
    readonly type: "receive";
}];
