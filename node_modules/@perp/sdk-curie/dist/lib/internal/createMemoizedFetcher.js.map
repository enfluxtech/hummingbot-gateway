{"version":3,"file":"createMemoizedFetcher.js","sources":["../../../src/internal/createMemoizedFetcher.ts"],"sourcesContent":["import Big from \"big.js\"\n\nimport { getLeastSignificantDigit } from \"../utils/formatters\"\n\nexport function hasNumberChange(a: Big, b: Big) {\n    return a.toFixed(getLeastSignificantDigit(a)) !== b.toFixed(getLeastSignificantDigit(b))\n}\n\nexport function hasNumbersChange(prev: Record<string, Big>, next: Record<string, Big>): boolean {\n    const prevKeyArr = Object.keys(prev || {})\n    const nextKeyArr = Object.keys(next || {})\n    if (prevKeyArr.length !== nextKeyArr.length) {\n        return true\n    }\n    return prevKeyArr.some(key => hasNumberChange(prev[key], next[key]))\n}\n\nexport function hasNumberArrChange(prev: Big[], next: Big[]): boolean {\n    if (prev.length !== next.length) {\n        return true\n    }\n    for (let i = 0; i < prev.length; i++) {\n        if (!prev[i].eq(next[i])) {\n            return true\n        }\n    }\n    return false\n}\n\nexport type MemoizedFetcher = (ignoreChangeCheck?: boolean, prevResultFirst?: boolean) => Promise<void>\n\n/** FIXME:\n * Add the `prevResultFirst` option as a temp solution for performance.\n * When `prevResultFirst` is true and result has been fetched it will skip fetch.\n * When `prevResultFirst` is true and the fetcher has been called(no result yet),\n * the second call is going to check the previous result per second, until the result is fetched or hit the timeout(10s).\n */\nexport function createMemoizedFetcher<T>(\n    fetcher: () => Promise<T>,\n    handler: (args: T) => void,\n    compareFn: (a: T, b: T) => boolean,\n) {\n    let prevResults: T\n    let isFetching = false\n\n    // FIXME: when prevResultFirst is true and fetched fail, the isFetching will not be reset. (use try/catch)\n    return async function (ignoreChangeCheck = false, prevResultFirst = false) {\n        if (prevResultFirst && prevResults) {\n            handler(prevResults)\n            return\n        }\n\n        if (prevResultFirst && isFetching) {\n            for (let i = 0; i < 10; i++) {\n                await new Promise(resolve => setTimeout(resolve, 1000))\n                if (prevResults) {\n                    handler(prevResults)\n                    return\n                }\n            }\n        }\n\n        isFetching = true\n        const nextResults = await fetcher()\n\n        if (!nextResults) {\n            isFetching = false\n            return\n        }\n\n        if (ignoreChangeCheck) {\n            handler(nextResults)\n            prevResults = nextResults\n            isFetching = false\n            return\n        }\n\n        const hasChanged = compareFn(prevResults, nextResults)\n        if (hasChanged) {\n            handler(nextResults)\n            prevResults = nextResults\n            isFetching = false\n            return\n        }\n\n        isFetching = false\n    }\n}\n"],"names":["hasNumberChange","a","b","toFixed","getLeastSignificantDigit","fetcher","handler","compareFn","prevResults","isFetching","async","ignoreChangeCheck","prevResultFirst","i","Promise","resolve","setTimeout","nextResults","prev","next","length","eq","prevKeyArr","Object","keys","nextKeyArr","some","key"],"mappings":"4GAIgB,SAAAA,EAAgBC,EAAQC,GACpC,OAAOD,EAAEE,QAAQC,EAAwBA,yBAACH,MAAQC,EAAEC,QAAQC,EAAAA,yBAAyBF,GACzF,wCAgCIG,EACAC,EACAC,GAEA,IAAIC,EACAC,GAAa,EAGjB,OAAOC,eAAgBC,GAAoB,EAAOC,GAAkB,GAChE,GAAIA,GAAmBJ,EAEnB,YADAF,EAAQE,GAIZ,GAAII,GAAmBH,EACnB,IAAK,IAAII,EAAI,EAAGA,EAAI,GAAIA,IAEpB,SADM,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OAC7CP,EAEA,YADAF,EAAQE,GAMpBC,GAAa,EACb,MAAMQ,QAAoBZ,IAE1B,IAAKY,EAED,YADAR,GAAa,GAIjB,GAAIE,EAIA,OAHAL,EAAQW,GACRT,EAAcS,OACdR,GAAa,GAKjB,GADmBF,EAAUC,EAAaS,GAKtC,OAHAX,EAAQW,GACRT,EAAcS,OACdR,GAAa,GAIjBA,GAAa,CACjB,CACJ,6BAtEgB,SAAmBS,EAAaC,GAC5C,GAAID,EAAKE,SAAWD,EAAKC,OACrB,OAAO,EAEX,IAAK,IAAIP,EAAI,EAAGA,EAAIK,EAAKE,OAAQP,IAC7B,IAAKK,EAAKL,GAAGQ,GAAGF,EAAKN,IACjB,OAAO,EAGf,OAAO,CACX,qDAnBgB,SAAiBK,EAA2BC,GACxD,MAAMG,EAAaC,OAAOC,KAAKN,GAAQ,CAAE,GACnCO,EAAaF,OAAOC,KAAKL,GAAQ,CAAE,GACzC,OAAIG,EAAWF,SAAWK,EAAWL,QAG9BE,EAAWI,MAAKC,GAAO3B,EAAgBkB,EAAKS,GAAMR,EAAKQ,KAClE"}