{"version":3,"file":"coinalpha-ref-sdk.umd.development.js","sources":["../src/constant.ts","../src/error.ts","../src/utils.ts","../src/near.ts","../src/ref.ts","../src/instantSwap.ts","../src/pool.ts","../src/stable-swap.ts","../src/parallelSwapLogic.ts","../src/smartRoutingLogic.js","../src/swap.ts"],"sourcesContent":["export const FEE_DIVISOR = 10000;\n\nexport const STABLE_LP_TOKEN_DECIMALS = 18;\nexport const RATED_POOL_LP_TOKEN_DECIMALS = 24;\n\nexport function getConfig(env: string | undefined = process.env.NEAR_ENV) {\n  switch (env) {\n    case 'mainnet':\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        walletUrl: 'https://wallet.near.org',\n        WRAP_NEAR_CONTRACT_ID: 'wrap.near',\n        REF_FI_CONTRACT_ID: 'v2.ref-finance.near',\n      };\n    case 'testnet':\n      return {\n        networkId: 'testnet',\n        nodeUrl: 'https://rpc.testnet.near.org',\n        walletUrl: 'https://wallet.testnet.near.org',\n        WRAP_NEAR_CONTRACT_ID: 'wrap.testnet',\n        REF_FI_CONTRACT_ID: 'ref-finance-101.testnet',\n      };\n    default:\n      return {\n        networkId: 'mainnet',\n        nodeUrl: 'https://rpc.mainnet.near.org',\n        walletUrl: 'https://wallet.near.org',\n        REF_FI_CONTRACT_ID: 'v2.ref-finance.near',\n        WRAP_NEAR_CONTRACT_ID: 'wrap.near',\n      };\n  }\n}\n\nexport const config = getConfig();\n\nexport const REF_FI_CONTRACT_ID = config.REF_FI_CONTRACT_ID;\n\nexport const STORAGE_TO_REGISTER_WITH_MFT = '0.1';\n\nexport const ONE_YOCTO_NEAR = '0.000000000000000000000001';\n","import { getConfig } from './constant';\n\nexport const formatError = (msg: string) => {\n  return new Error(msg);\n};\n\nexport const unNamedError = formatError('Something wrong happened');\n\nexport const SameInputTokenError = formatError(\n  'Input token should be different with output token'\n);\n\nexport const ZeroInputError = formatError(\n  'Input amount should be greater than 0'\n);\n\nexport const NoPoolError = formatError('No pool found for the input tokens');\n\nexport const NotLoginError = formatError('Please login in first');\n\nexport const SwapRouteError = formatError(\n  \"Something wrong happened, we don't get correct routes corrreponding to current input\"\n);\n\nexport const TokenNotExistError = formatError(\n  `This token doesn't exist in ${getConfig().networkId}`\n);\n\nexport const NoPuiblicKeyError = formatError('No public key found');\n\nexport const NoLocalSignerError = formatError('No local signer found');\n\nexport const InValidAccessKeyError = formatError('Invalid access key');\n\nexport const AccountIdMisMatch = formatError(\n  \"Your input account id doesn't match the account id in the credential\"\n);\n\nexport const NoCredential = formatError('No Credential to such path');\n","import {\n  Pool,\n  PoolRPCView,\n  StablePool,\n  SmartRoutingInputPool,\n  Transaction,\n} from './types';\nimport {\n  RATED_POOL_LP_TOKEN_DECIMALS,\n  STABLE_LP_TOKEN_DECIMALS,\n} from './constant';\n\nimport { transactions, utils } from 'near-api-js';\n\nimport BN from 'bn.js';\n\nimport * as math from 'mathjs';\nimport { REF_FI_CONTRACT_ID } from './constant';\n\nexport const parsePool = (pool: PoolRPCView, id?: number): Pool => ({\n  id: Number(typeof id === 'number' ? id : pool.id),\n  tokenIds: pool.token_account_ids,\n  supplies: pool.amounts.reduce(\n    (acc: { [tokenId: string]: string }, amount: string, i: number) => {\n      acc[pool.token_account_ids[i]] = amount;\n      return acc;\n    },\n    {}\n  ),\n  fee: pool.total_fee,\n  shareSupply: pool.shares_total_supply,\n  tvl: pool.tvl,\n  token0_ref_price: pool.token0_ref_price,\n  pool_kind: pool.pool_kind,\n});\n\nexport const poolFormatter = (pool: Pool) => {\n  return {\n    id: pool.id,\n    token1Id: pool.tokenIds[0],\n    token2Id: pool.tokenIds[1],\n    token1Supply: pool.supplies[pool.tokenIds[0]],\n    token2Supply: pool.supplies[pool.tokenIds[1]],\n    fee: pool.fee,\n    shares: pool.shareSupply,\n    token0_price: pool.token0_ref_price || '0',\n  } as SmartRoutingInputPool;\n};\n\nexport const isStablePoolToken = (\n  stablePools: StablePool[],\n  tokenId: string | Number\n) => {\n  return stablePools\n    .map(p => p.token_account_ids)\n    .flat()\n    .includes(tokenId.toString());\n};\n\nexport const isStablePool = (\n  stablePools: StablePool[],\n  poolId: string | number\n) => {\n  return stablePools.map(p => p.id.toString()).includes(poolId.toString());\n};\n\nexport const getStablePoolDecimal = (stablePool: StablePool) => {\n  return stablePool.pool_kind === 'RATED_SWAP'\n    ? RATED_POOL_LP_TOKEN_DECIMALS\n    : STABLE_LP_TOKEN_DECIMALS;\n};\n\nexport const round = (decimals: number, minAmountOut: string) => {\n  return Number.isInteger(Number(minAmountOut))\n    ? minAmountOut\n    : Math.ceil(\n        Math.round(Number(minAmountOut) * Math.pow(10, decimals)) /\n          Math.pow(10, decimals)\n      ).toString();\n};\n\nexport const convertToPercentDecimal = (percent: number) => {\n  return math.divide(percent, 100);\n};\n\nexport const percentOf = (percent: number, num: number | string) => {\n  return math.evaluate(`${convertToPercentDecimal(percent)} * ${num}`);\n};\n\nexport const percentLess = (percent: number, num: number | string) => {\n  return math.format(math.evaluate(`${num} - ${percentOf(percent, num)}`), {\n    notation: 'fixed',\n  });\n};\n\nexport const getGas = (gas: string | undefined) =>\n  gas ? new BN(gas) : new BN('100000000000000');\n\nexport const getAmount = (amount: string) =>\n  amount ? new BN(utils.format.parseNearAmount(amount) || '0') : new BN('0');\n\nexport const ONLY_ZEROS = /^0*\\.?0*$/;\n\nexport const toReadableNumber = (\n  decimals: number,\n  number: string = '0'\n): string => {\n  if (!decimals) return number;\n\n  const wholeStr = number.substring(0, number.length - decimals) || '0';\n  const fractionStr = number\n    .substring(number.length - decimals)\n    .padStart(decimals, '0')\n    .substring(0, decimals);\n\n  return `${wholeStr}.${fractionStr}`.replace(/\\.?0+$/, '');\n};\n\nexport const toNonDivisibleNumber = (\n  decimals: number,\n  number: string\n): string => {\n  if (decimals === null || decimals === undefined) return number;\n  const [wholePart, fracPart = ''] = number.split('.');\n\n  return `${wholePart}${fracPart.padEnd(decimals, '0').slice(0, decimals)}`\n    .replace(/^0+/, '')\n    .padStart(1, '0');\n};\n\nexport const scientificNotationToString = (strParam: string) => {\n  let flag = /e/.test(strParam);\n  if (!flag || !strParam) return strParam;\n\n  let sysbol = true;\n  if (/e-/.test(strParam)) {\n    sysbol = false;\n  }\n\n  const negative = Number(strParam) < 0 ? '-' : '';\n\n  let index = Number(strParam.match(/\\d+$/)?.[0]);\n\n  let basis = strParam.match(/[\\d\\.]+/)?.[0];\n\n  if (!index || !basis) return strParam;\n\n  const ifFraction = basis.includes('.');\n\n  let wholeStr;\n  let fractionStr;\n\n  if (ifFraction) {\n    wholeStr = basis.split('.')[0];\n    fractionStr = basis.split('.')[1];\n  } else {\n    wholeStr = basis;\n    fractionStr = '';\n  }\n\n  if (sysbol) {\n    if (!ifFraction) {\n      return negative + wholeStr.padEnd(index + wholeStr.length, '0');\n    } else {\n      if (fractionStr.length <= index) {\n        return negative + wholeStr + fractionStr.padEnd(index, '0');\n      } else {\n        return (\n          negative +\n          wholeStr +\n          fractionStr.substring(0, index) +\n          '.' +\n          fractionStr.substring(index)\n        );\n      }\n    }\n  } else {\n    if (!ifFraction)\n      return (\n        negative +\n        wholeStr.padStart(index + wholeStr.length, '0').replace(/^0/, '0.')\n      );\n    else {\n      return (\n        negative +\n        wholeStr.padStart(index + wholeStr.length, '0').replace(/^0/, '0.') +\n        fractionStr\n      );\n    }\n  }\n};\n\nexport const formatWithCommas = (value: string) => {\n  const pattern = /(-?\\d+)(\\d{3})/;\n  while (pattern.test(value)) {\n    value = value.replace(pattern, '$1,$2');\n  }\n  return value;\n};\n\nexport const toPrecision = (\n  number: string,\n  precision: number,\n  withCommas: boolean = false,\n  atLeastOne: boolean = true\n): string => {\n  const [whole, decimal = ''] = number.split('.');\n\n  let str = `${withCommas ? formatWithCommas(whole) : whole}.${decimal.slice(\n    0,\n    precision\n  )}`.replace(/\\.$/, '');\n  if (atLeastOne && Number(str) === 0 && str.length > 1) {\n    var n = str.lastIndexOf('0');\n    str = str.slice(0, n) + str.slice(n).replace('0', '1');\n  }\n\n  return str;\n};\n\nexport const transformTransactions = (\n  transactions: Transaction[],\n  AccountId: string\n) => {\n  return transactions.map((t: Transaction) => {\n    return {\n      signerId: AccountId,\n      receiverId: t.receiverId,\n      actions: t.functionCalls.map(fc => {\n        return {\n          type: 'FunctionCall',\n          params: {\n            methodName: fc.methodName,\n            args: fc.args || {},\n            gas: getGas(fc.gas)\n              .toNumber()\n              .toFixed(),\n            deposit: utils.format.parseNearAmount(fc.amount || '0')!,\n          },\n        };\n      }),\n    };\n  });\n};\n","import {\n  keyStores,\n  KeyPair,\n  InMemorySigner,\n  providers,\n  transactions as nearTransactions,\n  utils,\n} from 'near-api-js';\nimport BN from 'bn.js';\nimport { getConfig } from './constant';\nimport fs from 'fs';\nimport os from 'os';\nimport {\n  NoPuiblicKeyError,\n  InValidAccessKeyError,\n  NoCredential,\n} from './error';\nimport { AccessKeyView } from 'near-api-js/lib/providers/provider';\nimport { TransformedTransaction } from './types';\nimport { Transaction } from './types';\nimport { transformTransactions } from './utils';\nimport { AccountIdMisMatch } from './error';\n\nexport const getKeyStore = () => {\n  return typeof window === 'undefined'\n    ? new keyStores.InMemoryKeyStore()\n    : new keyStores.BrowserLocalStorageKeyStore();\n};\n\nexport const provider = new providers.JsonRpcProvider({\n  url: getConfig().nodeUrl,\n});\n\nexport const getMemorySigner = async ({\n  AccountId,\n  keyPath,\n}: {\n  AccountId: string;\n  keyPath: string;\n}) => {\n  try {\n    const homedir = os.homedir();\n    const credentials = JSON.parse(\n      fs.readFileSync(homedir + keyPath).toString()\n    );\n\n    const credentialAccountId = credentials?.account_id;\n\n    if (!credentialAccountId) throw NoCredential;\n\n    if (credentialAccountId !== AccountId) throw AccountIdMisMatch;\n\n    const myKeyStore = new keyStores.InMemoryKeyStore();\n    myKeyStore.setKey(\n      getConfig().networkId,\n      AccountId,\n      KeyPair.fromString(credentials.private_key)\n    );\n\n    const signer = new InMemorySigner(myKeyStore);\n\n    return signer;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst validateAccessKey = (\n  transaction: TransformedTransaction,\n  accessKey: AccessKeyView\n) => {\n  if (accessKey.permission === 'FullAccess') {\n    return accessKey;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { receiver_id, method_names } = accessKey.permission.FunctionCall;\n\n  if (transaction.receiverId !== receiver_id) {\n    return null;\n  }\n\n  return transaction.actions.every(action => {\n    if (action.type !== 'FunctionCall') {\n      return false;\n    }\n\n    const { methodName, deposit } = action.params;\n\n    if (method_names.length && method_names.includes(methodName)) {\n      return false;\n    }\n\n    return parseFloat(deposit) <= 0;\n  });\n};\n\nexport const getSignedTransactionsByMemoryKey = async ({\n  transactionsRef,\n  AccountId,\n  keyPath,\n}: {\n  transactionsRef: Transaction[];\n  AccountId: string;\n  keyPath: string;\n}) => {\n  const transactions = transformTransactions(transactionsRef, AccountId);\n\n  const block = await provider.block({ finality: 'final' });\n\n  const signedTransactions: Array<nearTransactions.SignedTransaction> = [];\n  const signer = await getMemorySigner({\n    AccountId,\n    keyPath,\n  });\n\n  for (let i = 0; i < transactions.length; i += 1) {\n    const transaction = transactions[i];\n\n    const publicKey = await signer.getPublicKey(\n      AccountId,\n      getConfig().networkId\n    );\n    if (!publicKey) {\n      throw NoPuiblicKeyError;\n    }\n\n    const accessKey = await provider.query<AccessKeyView>({\n      request_type: 'view_access_key',\n      finality: 'final',\n      account_id: AccountId,\n      public_key: publicKey.toString(),\n    });\n\n    if (!validateAccessKey(transaction, accessKey)) {\n      throw InValidAccessKeyError;\n    }\n\n    const tx = nearTransactions.createTransaction(\n      AccountId,\n      utils.PublicKey.from(publicKey.toString()),\n      transactions[i].receiverId,\n      accessKey.nonce + i + 1,\n      transaction.actions.map(action => {\n        const { methodName, args, gas, deposit } = action.params;\n        return nearTransactions.functionCall(\n          methodName,\n          args,\n          new BN(gas),\n          new BN(deposit)\n        );\n      }),\n      utils.serialize.base_decode(block.header.hash)\n    );\n\n    const [, signedTx] = await nearTransactions.signTransaction(\n      tx,\n      signer,\n      transactions[i].signerId,\n      getConfig().networkId\n    );\n    signedTransactions.push(signedTx);\n  }\n\n  return signedTransactions;\n};\n\nexport const sendTransactionsByMemoryKey = async ({\n  signedTransactions,\n}: {\n  signedTransactions: nearTransactions.SignedTransaction[];\n}) => {\n  try {\n    const results: Array<providers.FinalExecutionOutcome> = [];\n\n    for (let i = 0; i < signedTransactions.length; i += 1) {\n      results.push(await provider.sendTransaction(signedTransactions[i]));\n    }\n\n    return results;\n  } catch (err) {\n    throw err;\n  }\n};\n","import { REF_FI_CONTRACT_ID, config } from './constant';\nimport { keyStores, Near, WalletConnection } from 'near-api-js';\nimport { TokenNotExistError } from './error';\nimport { getKeyStore } from './near';\n\nimport {\n  TokenMetadata,\n  FTStorageBalance,\n  RefFiViewFunctionOptions,\n} from './types';\n\n// export const keyStore = new keyStores.BrowserLocalStorageKeyStore();\n\nexport const near = new Near({\n  keyStore: getKeyStore(),\n  headers: {},\n  ...config,\n});\n\nexport const refFiViewFunction = async ({\n  methodName,\n  args,\n}: RefFiViewFunctionOptions) => {\n  const nearConnection = await near.account(REF_FI_CONTRACT_ID);\n\n  return nearConnection.viewFunction(REF_FI_CONTRACT_ID, methodName, args);\n};\n\nexport const ftViewFunction = async (\n  tokenId: string,\n  { methodName, args }: RefFiViewFunctionOptions\n) => {\n  const nearConnection = await near.account(REF_FI_CONTRACT_ID);\n\n  return nearConnection.viewFunction(tokenId, methodName, args);\n};\n\nexport const ftGetStorageBalance = (\n  tokenId: string,\n  AccountId: string\n): Promise<FTStorageBalance | null> => {\n  return ftViewFunction(tokenId, {\n    methodName: 'storage_balance_of',\n    args: { account_id: AccountId },\n  });\n};\n\nexport const getTotalPools = async () => {\n  return refFiViewFunction({\n    methodName: 'get_number_of_pools',\n  });\n};\n\nexport const ftGetTokenMetadata = async (\n  id: string\n): Promise<TokenMetadata> => {\n  const metadata = await ftViewFunction(id, {\n    methodName: 'ft_metadata',\n  }).catch(() => {\n    throw TokenNotExistError;\n  });\n\n  return { ...metadata, id };\n};\n\nexport const ftGetTokensMetadata = async (tokenIds: string[]) => {\n  const tokensMetadata = await Promise.all(\n    tokenIds.map((id: string) => ftGetTokenMetadata(id))\n  );\n\n  return tokensMetadata.reduce((pre, cur, i) => {\n    return {\n      ...pre,\n      [tokenIds[i]]: cur,\n    };\n  }, {}) as Record<string, TokenMetadata>;\n};\n","import { TokenMetadata, EstimateSwapView, Transaction } from './types';\nimport { ftGetStorageBalance } from './ref';\nimport {\n  STORAGE_TO_REGISTER_WITH_MFT,\n  REF_FI_CONTRACT_ID,\n  ONE_YOCTO_NEAR,\n} from './constant';\nimport { round, percentLess } from './utils';\nimport { toNonDivisibleNumber } from './utils';\nimport { config } from './constant';\nimport { SwapRouteError } from './error';\n\nexport const instantSwap = async ({\n  tokenIn,\n  tokenOut,\n  amountIn,\n  slippageTolerance,\n  swapTodos,\n  AccountId,\n}: {\n  tokenIn: TokenMetadata;\n  tokenOut: TokenMetadata;\n  amountIn: string;\n  slippageTolerance: number;\n  swapTodos: EstimateSwapView[];\n  AccountId: string;\n}) => {\n  const transactions: Transaction[] = [];\n\n  if (swapTodos?.at(-1)?.outputToken !== tokenOut.id) throw SwapRouteError;\n\n  const registerToken = async (token: TokenMetadata) => {\n    const tokenRegistered = await ftGetStorageBalance(\n      token.id,\n      AccountId\n    ).catch(() => {\n      throw new Error(`${token.id} doesn't exist.`);\n    });\n\n    if (tokenRegistered === null) {\n      transactions.push({\n        receiverId: token.id,\n        functionCalls: [\n          {\n            methodName: 'storage_deposit',\n            args: {\n              registration_only: true,\n              account_id: AccountId,\n            },\n            gas: '30000000000000',\n            amount: STORAGE_TO_REGISTER_WITH_MFT,\n          },\n        ],\n      });\n    }\n  };\n\n  await registerToken(tokenOut);\n  let actionsList: any = [];\n  let allSwapsTokens = swapTodos.map(s => [s.inputToken, s.outputToken]); // to get the hop tokens\n  for (let i in allSwapsTokens) {\n    let swapTokens = allSwapsTokens[i];\n    if (swapTokens[0] === tokenIn.id && swapTokens[1] === tokenOut.id) {\n      // parallel, direct hop route.\n      actionsList.push({\n        pool_id: swapTodos[i].pool.id,\n        token_in: tokenIn.id,\n        token_out: tokenOut.id,\n        amount_in: swapTodos[i].pool.partialAmountIn,\n        min_amount_out: round(\n          tokenOut.decimals,\n          toNonDivisibleNumber(\n            tokenOut.decimals,\n            percentLess(slippageTolerance, swapTodos[i].estimate)\n          )\n        ),\n      });\n    } else if (swapTokens[0] === tokenIn.id) {\n      // first hop in double hop route\n      //TODO -- put in a check to make sure this first hop matches with the next (i+1) hop as a second hop.\n      actionsList.push({\n        pool_id: swapTodos[i].pool.id,\n        token_in: swapTokens[0],\n        token_out: swapTokens[1],\n        amount_in: swapTodos[i].pool.partialAmountIn,\n        min_amount_out: '0',\n      });\n    } else {\n      // second hop in double hop route.\n      //TODO -- put in a check to make sure this second hop matches with the previous (i-1) hop as a first hop.\n      actionsList.push({\n        pool_id: swapTodos[i].pool.id,\n        token_in: swapTokens[0],\n        token_out: swapTokens[1],\n        min_amount_out: round(\n          tokenOut.decimals,\n          toNonDivisibleNumber(\n            tokenOut.decimals,\n            percentLess(slippageTolerance, swapTodos[i].estimate)\n          )\n        ),\n      });\n    }\n  }\n\n  transactions.push({\n    receiverId: tokenIn.id,\n    functionCalls: [\n      {\n        methodName: 'ft_transfer_call',\n        args: {\n          receiver_id: REF_FI_CONTRACT_ID,\n          amount: toNonDivisibleNumber(tokenIn.decimals, amountIn),\n          msg: JSON.stringify({\n            force: 0,\n            actions: actionsList,\n          }),\n        },\n        gas: '180000000000000',\n        amount: ONE_YOCTO_NEAR,\n      },\n    ],\n  });\n\n  if (tokenIn.id === config.WRAP_NEAR_CONTRACT_ID) {\n    const registered = await ftGetStorageBalance(\n      config.WRAP_NEAR_CONTRACT_ID,\n      AccountId\n    );\n    if (registered === null) {\n      await registerToken(tokenIn);\n    }\n  }\n\n  return transactions;\n};\n","import { getTotalPools, refFiViewFunction } from './ref';\nimport { Pool, PoolRPCView } from './types';\nimport { parsePool, toNonDivisibleNumber } from './utils';\nimport { unNamedError } from './error';\nimport { STABLE_LP_TOKEN_DECIMALS } from './constant';\n\nexport const DEFAULT_PAGE_LIMIT = 100;\n\nexport const getRatedPoolDetail = async ({ id }: { id: string | number }) => {\n  return refFiViewFunction({\n    methodName: 'get_rated_pool',\n    args: { pool_id: Number(id) },\n  })\n    .then(pool_info => ({\n      ...pool_info,\n      id: Number(id),\n      pool_kind: 'RATED_SWAP',\n    }))\n    .catch(() => {\n      throw unNamedError;\n    });\n};\n\nexport const getUnRatedPoolDetail = async ({ id }: { id: string | number }) => {\n  return refFiViewFunction({\n    methodName: 'get_stable_pool',\n    args: { pool_id: Number(id) },\n  })\n    .then(pool_info => ({\n      ...pool_info,\n      id: Number(id),\n      pool_kind: 'STABLE_SWAP',\n      rates: pool_info.c_amounts.map((_: any) =>\n        toNonDivisibleNumber(STABLE_LP_TOKEN_DECIMALS, '1')\n      ),\n    }))\n    .catch(() => {\n      throw unNamedError;\n    });\n};\n\nexport const getStablePools = async (stablePools: Pool[]) => {\n  return Promise.all(\n    stablePools.map(pool =>\n      pool.pool_kind === 'RATED_SWAP'\n        ? getRatedPoolDetail({ id: pool.id })\n        : getUnRatedPoolDetail({ id: pool.id })\n    )\n  );\n};\n\nexport const getRefPools = async (\n  page: number = 1,\n  perPage: number = DEFAULT_PAGE_LIMIT\n): Promise<Pool[]> => {\n  const index = (page - 1) * perPage;\n\n  const poolData: PoolRPCView[] = await refFiViewFunction({\n    methodName: 'get_pools',\n    args: { from_index: index, limit: perPage },\n  });\n\n  return poolData.map((rawPool, i) => parsePool(rawPool, i + index));\n};\n\nexport const fetchAllPools = async () => {\n  const totalPools = await getTotalPools();\n  const pages = Math.ceil(totalPools / DEFAULT_PAGE_LIMIT);\n\n  const pools = (\n    await Promise.all(\n      [...Array(pages)].fill(0).map((_, i) => getRefPools(i + 1))\n    )\n  ).flat() as Pool[];\n\n  return {\n    simplePools: pools.filter(\n      p => p.pool_kind && p.pool_kind === 'SIMPLE_POOL'\n    ),\n    unRatedPools: pools.filter(\n      p => p.pool_kind && p.pool_kind === 'STABLE_SWAP'\n    ),\n    ratedPools: pools.filter(p => p.pool_kind && p.pool_kind === 'RATED_SWAP'),\n  };\n};\n","import { StablePool } from './types';\nimport { FEE_DIVISOR } from './constant';\n\nimport {\n  toReadableNumber,\n  toNonDivisibleNumber,\n  scientificNotationToString,\n} from './utils';\n\nimport Big from 'big.js';\n\nimport _ from 'lodash';\n\nconst tradeFee = (amount: number, trade_fee: number) => {\n  return (amount * trade_fee) / FEE_DIVISOR;\n};\n\nexport const calc_d = (amp: number, c_amounts: number[]) => {\n  const token_num = c_amounts.length;\n  const sum_amounts = _.sum(c_amounts);\n  let d_prev = 0;\n  let d = sum_amounts;\n  for (let i = 0; i < 256; i++) {\n    let d_prod = d;\n    for (let c_amount of c_amounts) {\n      d_prod = (d_prod * d) / (c_amount * token_num);\n    }\n    d_prev = d;\n    const ann = amp * token_num ** token_num;\n    const numerator = d_prev * (d_prod * token_num + ann * sum_amounts);\n    const denominator = d_prev * (ann - 1) + d_prod * (token_num + 1);\n    d = numerator / denominator;\n    if (Math.abs(d - d_prev) <= 1) break;\n  }\n  return d;\n};\n\nexport const calc_y = (\n  amp: number,\n  x_c_amount: number,\n  current_c_amounts: number[],\n  index_x: number,\n  index_y: number\n) => {\n  const token_num = current_c_amounts.length;\n  const ann = amp * token_num ** token_num;\n  const d = calc_d(amp, current_c_amounts);\n  let s = x_c_amount;\n  let c = (d * d) / x_c_amount;\n  for (let i = 0; i < token_num; i++) {\n    if (i != index_x && i != index_y) {\n      s += current_c_amounts[i];\n      c = (c * d) / current_c_amounts[i];\n    }\n  }\n  c = (c * d) / (ann * token_num ** token_num);\n  const b = d / ann + s;\n  let y_prev = 0;\n  let y = d;\n  for (let i = 0; i < 256; i++) {\n    y_prev = y;\n    const y_numerator = y ** 2 + c;\n    const y_denominator = 2 * y + b - d;\n    y = y_numerator / y_denominator;\n    if (Math.abs(y - y_prev) <= 1) break;\n  }\n\n  return y;\n};\n\nexport const calc_swap = (\n  amp: number,\n  in_token_idx: number,\n  in_c_amount: number,\n  out_token_idx: number,\n  old_c_amounts: number[],\n  trade_fee: number\n) => {\n  const y = calc_y(\n    amp,\n    in_c_amount + old_c_amounts[in_token_idx],\n    old_c_amounts,\n    in_token_idx,\n    out_token_idx\n  );\n  const dy = old_c_amounts[out_token_idx] - y;\n  const fee = tradeFee(dy, trade_fee);\n  const amount_swapped = dy - fee;\n  return [amount_swapped, fee, dy];\n};\n\nexport const getSwappedAmount = (\n  tokenInId: string,\n  tokenOutId: string,\n  amountIn: string,\n  stablePool: StablePool,\n  STABLE_LP_TOKEN_DECIMALS: number\n) => {\n  const amp = stablePool.amp;\n  const trade_fee = stablePool.total_fee;\n\n  // depended on pools\n  const in_token_idx = stablePool.token_account_ids.findIndex(\n    id => id === tokenInId\n  );\n  const out_token_idx = stablePool.token_account_ids.findIndex(\n    id => id === tokenOutId\n  );\n\n  const rates = stablePool.rates.map(r =>\n    toReadableNumber(STABLE_LP_TOKEN_DECIMALS, r)\n  );\n\n  const base_old_c_amounts = stablePool.c_amounts.map(amount =>\n    toReadableNumber(STABLE_LP_TOKEN_DECIMALS, amount)\n  );\n\n  const old_c_amounts = base_old_c_amounts\n    .map((amount, i) =>\n      toNonDivisibleNumber(\n        STABLE_LP_TOKEN_DECIMALS,\n        scientificNotationToString(\n          new Big(amount || 0).times(new Big(rates[i])).toString()\n        )\n      )\n    )\n    .map(amount => Number(amount));\n\n  const in_c_amount = Number(\n    toNonDivisibleNumber(\n      STABLE_LP_TOKEN_DECIMALS,\n      scientificNotationToString(\n        new Big(amountIn).times(new Big(rates[in_token_idx])).toString()\n      )\n    )\n  );\n\n  const [amount_swapped, fee, dy] = calc_swap(\n    amp,\n    in_token_idx,\n    in_c_amount,\n    out_token_idx,\n    old_c_amounts,\n    trade_fee\n  );\n\n  return [\n    amount_swapped / Number(rates[out_token_idx]),\n    fee,\n    dy / Number(rates[out_token_idx]),\n  ];\n};\n","//@ts-nocheck\nimport Big from 'big.js';\n\nimport { Pool } from './types';\n\nBig.RM = 0;\nBig.DP = 40;\nBig.NE = -40;\nBig.PE = 40;\n\ninterface FormatedPool extends Pool {\n  x?: string;\n  y?: string;\n  gamma_bps?: Big;\n}\n\n///////////////////////////////\n// Parallel Swap Logic Below //\n///////////////////////////////\n\n/** formatPoolNew\n * This function appends to the existing standard Pool struct and adds attributes that simplify the parallel swap algorithms.\n * Adds attributes \"x\" (for input token reserves in pool), \"y\" (for output token reserves in pool), and \"gamma_bps\" (for 1- fee in bps)\n * Our convention for our algorithm has been to use \"x\" as the input token and \"y\" as the output token.\n * @param pool    AMM structure containing reserves of inputToken and outputToken\n * @param inputToken the name of the inputToken being traded in.\n * @param outputToken the name of the outputToken being traded out.\n * @returns newFormatPool\n */\nexport function formatPoolNew(\n  pool: Pool,\n  inputToken: string,\n  outputToken: string\n) {\n  let p: FormatedPool = pool;\n  let x = p.supplies[inputToken];\n  let y = p.supplies[outputToken];\n  p['gamma_bps'] = new Big(10000).minus(p.fee);\n  p['x'] = x;\n  p['y'] = y;\n  return p;\n}\n\n/** solveForMuFloat\n * This function takes the set of token pools, the total input of inputToken, and the names of inputToken and outputToken and\n * solves for the Lagrange Multiplier \"mu\". Note that mu must be allowed to be aritrary precision floating point number. Mu will\n * be used in subsequent function calls to determine the best allocations of intputToken to be made per pool.\n * For more detailed math on how this function was derived, please see the white paper:\n * https://github.com/giddyphysicist/ParallelSwapForRefFinance/blob/main/ParallelSwapWhitePaper.pdf\n * @param pools   list of pools that contain inputToken and outputToken\n * @param totalDeltaX  total allocation (among all pools) being input of inputToken\n * @param inputToken   the name of the inputToken being traded in.\n * @param outputToken   the name of the outputToken being traded out.\n * @returns mu   the lagrange multiplier value calculated for a set of pools and inputToken amount.\n */\nexport function solveForMuFloat(\n  pools: Pool[],\n  totalDeltaX: string,\n  inputToken: string,\n  outputToken: string\n) {\n  if (pools.length > 0) {\n    let numerator = new Big(totalDeltaX);\n    let denominator = new Big(0);\n\n    for (var i = 0; i < pools.length; i++) {\n      let p = formatPoolNew(pools[i], inputToken, outputToken);\n      let numAdd = new Big(p.x).times(10000).div(p.gamma_bps);\n      numerator = numerator.plus(numAdd);\n      let denomAdd = new Big(p.x)\n        .times(p.y)\n        .div(p.gamma_bps)\n        .sqrt()\n        .times(100);\n      denominator = denominator.plus(denomAdd);\n    }\n\n    const mu = new Big(numerator).div(denominator);\n    return mu;\n  } else {\n    // console.log('ERROR - could not find pools that satisfy token pair');\n    const mu = NaN;\n    return mu;\n  }\n}\n\n/** calculate_dx_float\n * Once mu has been calculated for a set of pools and total input amount, the next step is\n * determining the total allocation per pool. This function evaluates the amount of input Token to be\n * allocated to the given pool. Note, in our original algorithmic convention, the 'x' variable was for the input token,\n * and the 'y' variable was for the output token. Here, the value dx is the part of the full amount of input token X.\n * Again, the detailed formulae for these operations can be found in the white paper referenced above.\n * @param mu   the lagrange multiplier value calculated for a set of pools and inputToken amount.\n * @param pool   AMM structure containing reserves of inputToken and outputToken\n * @param inputToken the name of the inputToken being traded in.\n * @param outputToken  the name of the outputToken being traded out.\n * @returns dxFloat   the allocation amount determined for the given pool\n */\nexport function calculate_dx_float(\n  mu: number | Big,\n  pool: FormatedPool,\n  inputToken: string,\n  outputToken: string\n) {\n  let p = formatPoolNew(pool, inputToken, outputToken);\n  let radical = new Big(p.x).times(p.y).div(p.gamma_bps);\n  let dxFloat = new Big(mu)\n    .times(100)\n    .times(radical.sqrt())\n    .minus(new Big(p.x).times(10000).div(p.gamma_bps));\n  return dxFloat;\n}\n\n/** calculate_dy_float\n * Once you have an allocation amount for a given pool, you can use the AMM constant-product formula to determine\n * the expected output amount of output Token.\n * Note, here, as earlier, our algorithmic convention uses \"y\" as the output token, and so \"dy\" is the fraction of\n * the total output of output Token, assuming there could be dy contributions from other parallel pools as well.\n * @param dx_float  input allocation amount of inputToken for the given pool\n * @param pool   a structure representing the reserves and fees for a given pool.\n * @param inputToken  the name of the inputToken being traded in.\n * @param outputToken  the name of the outputToken being traded out.\n * @returns dyFloat  the expected trade out amount out of outputToken\n */\nexport function calculate_dy_float(\n  dx_float: number,\n  pool: FormatedPool,\n  inputToken: string,\n  outputToken: string\n) {\n  if (dx_float <= 0) {\n    return new Big(0);\n  }\n  let p = formatPoolNew(pool, inputToken, outputToken);\n  let dx = new Big(dx_float);\n  let denom = new Big(10000).times(p.x).plus(new Big(p.gamma_bps).times(dx));\n  let numerator = new Big(p.y).times(dx).times(p.gamma_bps);\n  let dyFloat = numerator.div(denom).round();\n  return dyFloat;\n}\n\n/** calculateOptimalOutput\n * This is the main function, which calculates optimal values of inputToken to swap into each pool.\n * @param pools  list of relevant AMM pools containing inputToken and outputToken\n * @param inputAmount   the numeric total amount of inputToken to be traded into the group of swap pools.\n * @param inputToken   the name of the inputToken being traded in.\n * @param outputToken  the name of the outputToken being traded out.\n * @returns normalizedDxArray an array containing the amount allocations of inputToken per pool in the list of pools.\n */\nexport function calculateOptimalOutput(\n  pools: Pool[],\n  inputAmount: string,\n  inputToken: string,\n  outputToken: string\n) {\n  let mu = solveForMuFloat(pools, inputAmount, inputToken, outputToken);\n  let dxArray: Big[] = new Array();\n  let negativeDxValsFlag = false;\n  for (var i = 0; i < pools.length; i++) {\n    let pool = formatPoolNew(pools[i], inputToken, outputToken);\n    let dx = calculate_dx_float(mu, pool, inputToken, outputToken);\n    if (dx.lt(0)) {\n      negativeDxValsFlag = true;\n    }\n    let dxInt = new Big(dx).round();\n    dxArray.push(dxInt);\n  }\n  if (negativeDxValsFlag) {\n    dxArray = reducePools(pools, dxArray, inputAmount, inputToken, outputToken);\n  }\n  let dxArraySum = new Big(0);\n  for (var i = 0; i < dxArray.length; i++) {\n    dxArraySum = dxArraySum.plus(dxArray[i]);\n  }\n  let tempAllocationsArray = [];\n  for (var i = 0; i < dxArray.length; i++) {\n    let ndx = new Big(dxArray[i])\n      .times(inputAmount)\n      .div(dxArraySum)\n      .round();\n    tempAllocationsArray.push(ndx);\n  }\n  let allocationsArray = checkIntegerSumOfAllocations(\n    tempAllocationsArray,\n    inputAmount\n  );\n  let normalizedDxArray = [];\n  for (var i = 0; i < allocationsArray.length; i++) {\n    let ndx = allocationsArray[i];\n    normalizedDxArray.push(BigInt(ndx));\n    pools[i]['partialAmountIn'] = ndx.toString();\n  }\n  return normalizedDxArray;\n}\n\n/** reducePools\n * This function is used to implement part of the non-linear slack variables in the lagrange - multiplier\n * solution for parallel swap. Part of what comes out of the math is that sometimes, the optimal allocation for a pool\n * can be negative, which makes no physical sense. When this occurs, that particular pool needs to be flagged and the\n * lagrange constraint applied to force the allocation to be zero.\n * This function takes an already-solved set of pools, input allocation per pool, the total input amount, and the\n * inputToken name and outputToken name, and determines which, if any, allocations need to be set to zero.\n * However, when this occurs, and a pool is essentially ignored from the list, then the calculation for mu must be re-done.\n * So the calculateOptimalOutput function is then called on the reduced set of pools, and if no negative allocation values remain,\n * then the allocations on the reduced set is determined, and values of zero are put in for the 'failed' pools.\n * @param pools  list of pools that contain inputToken and outputToken\n * @param dxArray  list of input allocation per pool\n * @param inputAmount   total amount of inputToken to be traded among the pools\n * @param inputToken    the name of the inputToken\n * @param outputToken   the name of the outputToken\n * @returns newFullDxVec  the new full list of input allocations the same length as dxArray, containing zeros for failed pools.\n */\nexport function reducePools(\n  pools: Pool[],\n  dxArray: Big[],\n  inputAmount: string,\n  inputToken: string,\n  outputToken: string\n) {\n  let goodIndices = [];\n  for (var i = 0; i < dxArray.length; i++) {\n    let dx = dxArray[i];\n    if (dx.gte(0)) {\n      goodIndices.push(i);\n    }\n  }\n  if (goodIndices.length < 1) {\n    // console.log(\"ERROR OCCURRED -- ALL DX VALUES WERE NEGATIVE\")\n    return dxArray;\n  }\n  let newPools = [];\n  for (var j = 0; j < dxArray.length; j++) {\n    if (goodIndices.includes(j)) {\n      newPools.push(pools[j]);\n    }\n  }\n  let newDxVec = calculateOptimalOutput(\n    newPools,\n    inputAmount,\n    inputToken,\n    outputToken\n  );\n  let goodInd2newdx = {};\n  for (var k = 0; k < newDxVec.length; k++) {\n    goodInd2newdx[goodIndices[k]] = newDxVec[k];\n  }\n  let newFullDxVec = [];\n  for (var ii = 0; ii < pools.length; ii++) {\n    if (goodIndices.includes(ii)) {\n      newFullDxVec.push(goodInd2newdx[ii]);\n    } else {\n      newFullDxVec.push(0);\n    }\n  }\n  return newFullDxVec;\n}\n\nexport function checkIntegerSumOfAllocations(\n  allocations: Big[] | string[] | BigInt[],\n  totalInput: Big | string | BigInt\n) {\n  var totalInput = new Big(totalInput);\n  var allocations:\n    | Big[]\n    | string[]\n    | BigInt[] = allocations.map((item: Big | string | BigInt) =>\n    new Big(item).round()\n  );\n  let alloSum = allocations\n    .map(item => new Big(item))\n    .reduce((a, b) => a.plus(b), new Big(0));\n  let offset = totalInput.minus(alloSum);\n  //get largest allocation.\n  let currMax = new Big(0);\n  let currMaxInd = 0;\n  for (var i = 0; i < allocations.length; i++) {\n    if (allocations[i].gt(currMax)) {\n      currMaxInd = i;\n      currMax = allocations[i];\n    }\n  }\n  let newAllocations = [];\n  for (var j = 0; j < allocations.length; j++) {\n    if (j === currMaxInd) {\n      newAllocations.push(allocations[j].plus(offset).toString());\n    } else {\n      newAllocations.push(allocations[j].toString());\n    }\n  }\n  return newAllocations;\n}\n","/* eslint-disable no-undef */\n////////////////////////////////////////////////////////////////////////////\n// SMART ROUTE SWAP LOGIC\n////////////////////////////////////////////////////////////////////////////\nimport Big from 'big.js';\nimport { checkIntegerSumOfAllocations } from './parallelSwapLogic';\n\nimport { TokenMetadata } from './types';\n\nimport { ftGetTokenMetadata } from './ref';\n\nimport { percentLess, toNonDivisibleNumber } from './utils';\n\nBig.RM = 0;\nBig.DP = 40;\nBig.NE = -40;\nBig.PE = 40;\n\nfunction bisqrt(value) {\n  // For some ridiculous reason, the .sqrt() method for Big decimals is extremely slow (~10-20ms),\n  // which isn't so bad until you need to use it a bunch of times.\n  // Since we're dealing with super large numbers anyway, we can convert the Big decimal number into a BigInt,\n  // then run this BigInt Newton iteration square root function instead, and then convert back into a\n  // Big number. And it speeds up the operation by a crazy factor, ~10x faster.\n  if (value < BigInt(0)) {\n    throw 'square root of negative numbers is not supported';\n  }\n\n  if (value < BigInt(2)) {\n    return value;\n  }\n\n  function newtonIteration(n, x0) {\n    const x1 = (n / x0 + x0) >> BigInt(1);\n    if (x0 === x1 || x0 === x1 - BigInt(1)) {\n      return x0;\n    }\n    return newtonIteration(n, x1);\n  }\n\n  return newtonIteration(value, BigInt(1));\n}\n\nfunction getBetaForRoute(route, path) {\n  if (!route.length) {\n    route = [route];\n  }\n  if (route.length == 1) {\n    let p = route[0];\n    var beta = new Big(p.reserves[path[0]]);\n  } else if (route.length == 2) {\n    let p1 = route[0];\n    let p2 = route[1];\n    var beta = new Big(p1.reserves[path[0]]).times(\n      new Big(p2.reserves[path[1]])\n    );\n  }\n  return beta;\n}\n\nfunction getEpsilonForRoute(route, path) {\n  if (!route.length) {\n    route = [route];\n  }\n  if (route.length == 1) {\n    // Single Hop case\n    let p = route[0];\n    let gamma = new Big(10000).minus(new Big(p.fee)).div(new Big(10000));\n    var epsilon = Big(gamma);\n  } else if (route.length == 2) {\n    //Double Hop Case\n    let p1 = route[0];\n    let p2 = route[1];\n    let gamma1 = new Big(10000).minus(new Big(p1.fee)).div(new Big(10000));\n    let gamma2 = new Big(10000).minus(new Big(p2.fee)).div(Big(10000));\n    var epsilon = new Big(p2.reserves[path[1]])\n      .times(new Big(gamma1))\n      .plus(new Big(p1.reserves[path[1]]).times(gamma1).times(gamma2));\n  }\n  return epsilon;\n}\n\nfunction getAlphaForRoute(route, path) {\n  if (!route.length) {\n    route = [route];\n  }\n  if (route.length == 1) {\n    //console.log('single hop')\n    let p = route[0];\n    let inputToken = path[0];\n    let outputToken = path[1];\n    let gamma = new Big(10000).minus(new Big(p.fee)).div(new Big(10000));\n    let key1 = p.token1Id;\n    let key2 = p.token2Id;\n    let val1 = p.token1Supply;\n    let val2 = p.token2Supply;\n    p['reserves'] = { [key1]: val1, [key2]: val2 };\n    var alpha = new Big(p.reserves[inputToken]).times(\n      new Big(p.reserves[outputToken]).times(new Big(gamma))\n    );\n  } else if (route.length == 2) {\n    //console.log('double hop')\n    let p1 = route[0];\n    let p2 = route[1];\n    let key11 = p1.token1Id;\n    let key12 = p1.token2Id;\n    let val11 = p1.token1Supply;\n    let val12 = p1.token2Supply;\n    p1['reserves'] = { [key11]: val11, [key12]: val12 };\n    let key21 = p2.token1Id;\n    let key22 = p2.token2Id;\n    let val21 = p2.token1Supply;\n    let val22 = p2.token2Supply;\n    p2['reserves'] = { [key21]: val21, [key22]: val22 };\n    let inputToken = path[0];\n    let middleToken = path[1];\n    let outputToken = path[2];\n    let gamma1 = new Big(10000).minus(Big(p1.fee)).div(new Big(10000));\n    let gamma2 = new Big(10000).minus(new Big(p2.fee)).div(new Big(10000));\n    let alpha1 = new Big(p1.reserves[inputToken])\n      .times(new Big(p1.reserves[middleToken]))\n      .times(gamma1);\n    let alpha2 = new Big(p2.reserves[middleToken])\n      .times(new Big(p2.reserves[outputToken]))\n      .times(gamma2);\n    var alpha = alpha1.times(alpha2);\n  }\n  return alpha;\n}\n\nfunction getAlphaSumFromRoutes(routes, nodeRoutes) {\n  let alphaSum = new Big(0);\n  for (var i in routes) {\n    let route = routes[i];\n    let nodeRoute = nodeRoutes[i];\n    let alpha = getAlphaForRoute(route, nodeRoute);\n    // console.log('alpha is...');\n    // console.log(alpha.toString());\n    // below, we are replacing the built-in Big sqrt() method with a\n    // newton-iteration BigInt sqrt function, to speed it up by 10x.\n    let radical = new Big(bisqrt(BigInt(new Big(alpha).round().toFixed())));\n    // let radical = new Big(alpha).sqrt();\n    let epsilon = getEpsilonForRoute(route, nodeRoute);\n    let denom = new Big(epsilon);\n    alphaSum = alphaSum.plus(radical.div(denom));\n  }\n  return alphaSum;\n}\n\nfunction getBetaSumFromRoutes(routes, nodeRoutes) {\n  let betaSum = new Big(0);\n  for (var i in routes) {\n    let route = routes[i];\n    let nodeRoute = nodeRoutes[i];\n    let num = new Big(getBetaForRoute(route, nodeRoute));\n    let denom = new Big(getEpsilonForRoute(route, nodeRoute));\n    betaSum = betaSum.plus(num.div(denom));\n  }\n  return betaSum;\n}\n\nfunction getPhiFromRoutes(routes, nodeRoutes, totalInput) {\n  let alphaSum = getAlphaSumFromRoutes(routes, nodeRoutes);\n  let betaSum = getBetaSumFromRoutes(routes, nodeRoutes);\n  let phi = new Big(totalInput).plus(betaSum).div(alphaSum);\n  return phi;\n}\n\nfunction getAllocationForRoute(phi, route, path) {\n  let alpha = getAlphaForRoute(route, path);\n  let beta = getBetaForRoute(route, path);\n  let epsilon = getEpsilonForRoute(route, path);\n  // below, we are replacing the built-in Big sqrt() method with a\n  // newton-iteration BigInt sqrt function, to speed it up by 10x.\n  let allocation = new Big(phi)\n    .abs()\n    .times(new Big(bisqrt(BigInt(new Big(alpha).round().toFixed()))))\n    .minus(beta)\n    .div(epsilon);\n  return allocation;\n}\n\nfunction getAllocationVectorForRoutes(phi, routes, nodeRoutes) {\n  let allocationVec = [];\n  for (var i in routes) {\n    allocationVec.push(getAllocationForRoute(phi, routes[i], nodeRoutes[i]));\n  }\n  return allocationVec;\n}\n\nfunction getOptimalAllocationForRoutes(routes, nodeRoutes, totalInput) {\n  // console.log(\"CALLING GET OPTIMAL ALLOCATION FOR ROUTES:\")\n  // console.log(routes)\n  var totalInput = new Big(totalInput);\n  let phi = getPhiFromRoutes(routes, nodeRoutes, totalInput);\n  // console.log('PHI CALCULATED TO BE...')\n  // console.log(phi.toString())\n  let allocations = getAllocationVectorForRoutes(phi, routes, nodeRoutes);\n  if (allocations.every(item => item.lt(new Big(0)))) {\n    allocations = allocations.map(item => item.times(new Big(-1.0)));\n  }\n  if (allocations.some(item => item.lt(new Big(0)))) {\n    allocations = reduceRoutes(routes, nodeRoutes, allocations, totalInput);\n  }\n  let sumAllocations = allocations.reduce((a, b) => a.plus(b), new Big(0));\n  let normalizedAllocations = allocations.map(a =>\n    a.div(sumAllocations).times(new Big(totalInput))\n  );\n  return normalizedAllocations;\n}\n\nfunction reduceRoutes(routes, nodeRoutes, allocationVec, totalInput) {\n  // console.log(\"RUNNING REDUCE ROUTES\")\n  var totalInput = new Big(totalInput);\n  let goodIndices = [];\n  for (var i in allocationVec) {\n    let dx = allocationVec[i];\n    // console.log('DX IS...')\n    // console.log(dx.toString())\n    if (dx.gt(new Big(0))) {\n      goodIndices.push(i);\n    }\n  }\n  // console.log('GOOD INDICES ARE...');\n  // console.log(goodIndices);\n  let newRoutes = [];\n  let newNodeRoutes = [];\n  for (var i in goodIndices) {\n    let goodIndex = goodIndices[i];\n    newRoutes.push(routes[goodIndex]);\n    newNodeRoutes.push(nodeRoutes[goodIndex]);\n  }\n  allocationVec = getOptimalAllocationForRoutes(\n    newRoutes,\n    newNodeRoutes,\n    totalInput\n  );\n  let allocationDict = {};\n  for (var i in goodIndices) {\n    allocationDict[goodIndices[i]] = allocationVec[i];\n  }\n  var allocationVecNew = [];\n  for (var i in routes) {\n    if (goodIndices.includes(i)) {\n      allocationVecNew.push(allocationDict[i]);\n    } else {\n      let zeroAllocation = new Big(0);\n      allocationVecNew.push(zeroAllocation);\n    }\n  }\n  return allocationVecNew;\n}\n\nfunction getNodeRoutesFromPathsAndPoolChains(paths, poolChains) {\n  let multiplicity = [];\n  for (var i in poolChains) {\n    let pc = poolChains[i];\n    let mul = pc\n      .map(item => item.length)\n      .reduce((elem1, elem2) => elem1 * elem2, 1);\n    multiplicity.push(mul);\n  }\n  let nodeRoutes = [];\n  for (var j in paths) {\n    let path = paths[j];\n    let m = multiplicity[j];\n    for (var k = 0; k < m; k++) {\n      nodeRoutes.push(path);\n    }\n  }\n  return nodeRoutes;\n}\n\nfunction getPoolChainFromPaths(paths, pools, threshold = 0.001) {\n  let poolChains = [];\n  for (var pathInd in paths) {\n    let path = paths[pathInd];\n    let chain = [];\n    let pairs = [];\n    for (var i = 0; i < path.length - 1; i++) {\n      pairs.push([path[i], path[i + 1]]);\n    }\n    for (var pairInd in pairs) {\n      let pair = pairs[pairInd];\n      // console.log(pair);\n      let tokenPools = getPoolsByToken1ANDToken2(pools, pair[0], pair[1]);\n      chain.push(tokenPools);\n    }\n    poolChains.push(chain);\n  }\n  // return poolChains;\n  let culledPoolChains = getCulledPoolChains(poolChains, threshold);\n\n  return culledPoolChains;\n}\n\nfunction getCulledPoolChains(poolChains, threshold = 0.001) {\n  let newChains = [];\n  for (var pathInd in poolChains) {\n    let path = poolChains[pathInd];\n    let newPath = [];\n    for (var legInd in path) {\n      let leg = path[legInd];\n      let culledPath = cullPoolsWithInsufficientLiquidity(leg, threshold);\n      newPath.push(culledPath);\n    }\n    newChains.push(newPath);\n  }\n  return newChains;\n}\n\nfunction getRoutesFromPoolChain(poolChains) {\n  let routes = [];\n  for (var pci in poolChains) {\n    let poolChain = poolChains[pci];\n    //get cartesian product of each pool chain to get the list of routes.\n    let newRoutes = cartesianProduct(poolChain);\n    routes.push(...newRoutes);\n  }\n  for (var i in routes) {\n    if (!routes[i].length) {\n      routes[i] = [routes[i]];\n    }\n  }\n  return routes;\n}\n\nfunction getOutputSingleHop(pool, inputToken, outputToken, totalInput) {\n  var totalInput = new Big(totalInput);\n  // check if pool is forward or backward for inputToken/outputToken cf. token1Id/token2Id\n  if (inputToken === pool.token1Id && outputToken === pool.token2Id) {\n    // forward Pool\n    var reserves = {\n      [inputToken]: new Big(pool.token1Supply),\n      [outputToken]: new Big(pool.token2Supply),\n    };\n  } else if (inputToken === pool.token2Id && outputToken === pool.token1Id) {\n    // reverse pool\n    var reserves = {\n      [outputToken]: new Big(pool.token1Supply),\n      [inputToken]: new Big(pool.token2Supply),\n    };\n  } else {\n    return new Big(0);\n  }\n  let gamma = new Big(10000).minus(new Big(pool.fee)).div(new Big(10000));\n  // console.log(totalInput)\n  // console.log(gamma)\n  // console.log(reserves)\n  let num = totalInput.times(gamma).times(reserves[outputToken]);\n  let denom = reserves[inputToken].plus(gamma.times(totalInput));\n  return num.div(denom);\n}\n\nfunction getOutputDoubleHop(\n  pools,\n  inputToken,\n  middleToken,\n  outputToken,\n  totalInput\n) {\n  var totalInput = new Big(totalInput);\n  for (var poolIndex in pools) {\n    let p = pools[poolIndex];\n    p['gamma'] = new Big(10000).minus(new Big(p.fee)).div(new Big(10000));\n  }\n  let p1 = pools[0];\n  let p2 = pools[1];\n\n  if (inputToken === p1.token1Id && middleToken === p1.token2Id) {\n    // forward Pool\n    p1['reserves'] = {\n      [inputToken]: new Big(p1.token1Supply),\n      [middleToken]: new Big(p1.token2Supply),\n    };\n  } else if (middleToken === p1.token1Id && inputToken === p1.token2Id) {\n    //reverse pool\n    p1['reserves'] = {\n      [middleToken]: new Big(p1.token1Supply),\n      [inputToken]: new Big(p1.token2Supply),\n    };\n  }\n\n  if (middleToken === p2.token1Id && outputToken === p2.token2Id) {\n    // forward Pool\n    p2['reserves'] = {\n      [middleToken]: new Big(p2.token1Supply),\n      [outputToken]: new Big(p2.token2Supply),\n    };\n  } else if (outputToken === p2.token1Id && middleToken === p2.token2Id) {\n    //reverse pool\n    p2['reserves'] = {\n      [outputToken]: new Big(p2.token1Supply),\n      [middleToken]: new Big(p2.token2Supply),\n    };\n  }\n\n  let c1 = new Big(p1.reserves[middleToken]);\n  let a1 = new Big(p1.reserves[inputToken]);\n  let c2 = new Big(p2.reserves[middleToken]);\n  let b2 = new Big(p2.reserves[outputToken]);\n  let gamma1 = p1.gamma;\n  let gamma2 = p2.gamma;\n  let num = totalInput\n    .times(c1)\n    .times(b2)\n    .times(gamma1)\n    .times(gamma2);\n  let denom = c2\n    .times(a1)\n    .plus(\n      totalInput.times(c2.times(gamma1).plus(c1.times(gamma1).times(gamma2)))\n    );\n  // denom = c2*a1 + totalInput * (c2*gamma1 + c1*gamma1*gamma2)\n\n  return num.div(denom);\n}\n\nfunction getOutputFromRoute(route, nodeRoute, allocation) {\n  if (new Big(allocation).eq(new Big(0))) {\n    return new Big(0);\n  } else {\n    var allocation = new Big(allocation);\n  }\n  if (!route.length) {\n    route = [route];\n  }\n  if (route.length == 1) {\n    // single hop\n    let inputToken = nodeRoute[0];\n    let outputToken = nodeRoute[1];\n    let pool = route[0];\n    var output = getOutputSingleHop(pool, inputToken, outputToken, allocation);\n  } else if (route.length == 2) {\n    // DOUBLE HOP\n    let inputToken = nodeRoute[0];\n    let middleToken = nodeRoute[1];\n    let outputToken = nodeRoute[2];\n    let pools = route;\n    var output = getOutputDoubleHop(\n      pools,\n      inputToken,\n      middleToken,\n      outputToken,\n      allocation\n    );\n  }\n  return output;\n}\n\nfunction getOptOutputVec(routes, nodeRoutes, totalInput) {\n  let allocations = getOptimalAllocationForRoutes(\n    routes,\n    nodeRoutes,\n    totalInput\n  );\n  let result = [];\n  for (var i in routes) {\n    let route = routes[i];\n    let nodeRoute = nodeRoutes[i];\n    let allocation = allocations[i];\n    let output = getOutputFromRoute(route, nodeRoute, allocation);\n    result.push(output);\n  }\n  return {\n    result: result,\n    allocations: allocations,\n  };\n  //NOTE -- I made this return an object instead of the tuple returned in python. need to check the places it is called, and specify\n  // result field instead of tuple 0 position, and allocations field instead of tuple 1 position.\n}\n\nfunction getBestOptInputAndOutputSlower(routes, nodeRoutes, totalInput) {\n  let refDict = getOptOutputVecRefined(routes, nodeRoutes, totalInput);\n  let outputRefined = refDict.result;\n  let inputRefined = refDict.allocations;\n  inputRefined = checkIntegerSumOfAllocations(inputRefined, totalInput);\n  let rawDict = getOptOutputVec(routes, nodeRoutes, totalInput);\n  let outputRaw = rawDict.result;\n  let inputRaw = rawDict.allocations;\n  inputRaw = checkIntegerSumOfAllocations(inputRaw, totalInput);\n  let res1 = new Big(0);\n  let res2 = new Big(0);\n\n  for (var n in outputRefined) {\n    res1 = res1.plus(outputRefined[n]);\n  }\n  for (var nn in outputRaw) {\n    res2 = res2.plus(outputRaw[nn]);\n  }\n  // console.log('COMPARING SINGLE HOPS VS DOUBLE')\n  // console.log(res1.toString())\n  // console.log(res2.toString())\n  if (res1.gt(res2)) {\n    return { input: inputRefined, output: res1 };\n  } else {\n    return { input: inputRaw, output: res2 };\n  }\n}\n\nfunction getBestOptInputAndOutput(routes, nodeRoutes, totalInput) {\n  // let refDict = getOptOutputVecRefined(routes, nodeRoutes, totalInput);\n  // let outputRefined = refDict.result;\n  // let inputRefined = refDict.allocations;\n  // inputRefined = checkIntegerSumOfAllocations(inputRefined, totalInput);\n  let rawDict = getOptOutputVec(routes, nodeRoutes, totalInput);\n  let outputRaw = rawDict.result;\n  let inputRaw = rawDict.allocations;\n  inputRaw = checkIntegerSumOfAllocations(inputRaw, totalInput);\n  let res1 = new Big(0);\n  let res2 = new Big(0);\n\n  let res = outputRaw\n    .map(v => new Big(v))\n    .reduce((bv1, bv2) => bv1.plus(bv2), new Big(0));\n\n  return {\n    input: inputRaw,\n    output: res,\n  };\n}\n\nfunction getBestOptOutput(routes, nodeRoutes, totalInput) {\n  let outputRefined = getOptOutputVecRefined(routes, nodeRoutes, totalInput)\n    .result;\n  let outputRaw = getOptOutputVec(routes, nodeRoutes, totalInput).result;\n  let res1 = new Big(0);\n  let res2 = new Big(0);\n\n  for (var n in outputRefined) {\n    res1 = res1.plus(outputRefined[n]);\n  }\n  for (var nn in outputRaw) {\n    res2 = res2.plus(outputRaw[nn]);\n  }\n  if (res1.gt(res2)) {\n    return res1;\n  } else {\n    return res2;\n  }\n}\n\nfunction getBestOptInput(routes, nodeRoutes, totalInput) {\n  let refDict = getOptOutputVecRefined(routes, nodeRoutes, totalInput);\n  let outputRefined = refDict.result;\n  let inputRefined = refDict.allocations;\n  inputRefined = checkIntegerSumOfAllocations(inputRefined, totalInput);\n  let rawDict = getOptOutputVec(routes, nodeRoutes, totalInput);\n  let outputRaw = rawDict.result;\n  let inputRaw = rawDict.allocations;\n  inputRaw = checkIntegerSumOfAllocations(inputRaw, totalInput);\n  let res1 = new Big(0);\n  let res2 = new Big(0);\n\n  for (var n in outputRefined) {\n    res1 = res1.plus(outputRefined[n]);\n  }\n  for (var nn in outputRaw) {\n    res2 = res2.plus(outputRaw[nn]);\n  }\n  // console.log('COMPARING SINGLE HOPS VS DOUBLE')\n  // console.log(res1.toString())\n  // console.log(res2.toString())\n  if (res1.gt(res2)) {\n    return inputRefined;\n  } else {\n    return inputRaw;\n  }\n}\n\nfunction getOptOutputVecRefined(routes, nodeRoutes, totalInput) {\n  // need to calculate full result.\n  // if direct pools exist, need to calculate parallel result. if not, this portion is set to zero output.\n\n  // need to compare between outputs of the two results above.\n\n  let initLengthRoutes = routes.length;\n  let directRouteInds = [];\n  for (var routeInd in routes) {\n    let route = routes[routeInd];\n    if (!route.length) {\n      route = [route];\n    }\n    if (route.length == 1) {\n      directRouteInds.push(routeInd);\n    }\n  }\n  // console.log('DIRECT ROUTE INDS ARE')\n  // console.log(directRouteInds)\n  // if (directRouteInds.length < 1) {\n  var fullResultAllocations = getOptimalAllocationForRoutes(\n    routes,\n    nodeRoutes,\n    totalInput\n  );\n  var fullResult = [];\n  for (var i in routes) {\n    let r = routes[i];\n    let nr = nodeRoutes[i];\n    let a = fullResultAllocations[i];\n    let output = getOutputFromRoute(r, nr, a);\n    fullResult.push(output);\n  }\n  var fullResultTotal = fullResult.reduce((a, b) => a.plus(b), new Big(0));\n\n  // } else {\n  if (directRouteInds.length > 0) {\n    // console.log('DOING SINGLE HOP ONLY')\n    let droutes = [];\n    let dnodeRoutes = [];\n    for (var dri in directRouteInds) {\n      let ind = directRouteInds[dri];\n      droutes.push(routes[ind]);\n      dnodeRoutes.push(nodeRoutes[ind]);\n    }\n    let dallocations = getOptimalAllocationForRoutes(\n      droutes,\n      dnodeRoutes,\n      totalInput\n    );\n    let dallocDict = {};\n    for (var dd in dallocations) {\n      dallocDict[directRouteInds[dd]] = dallocations[dd];\n    }\n    var pallocations = [];\n\n    for (var ii = 0; ii < initLengthRoutes; ii++) {\n      if (directRouteInds.includes(ii.toString())) {\n        //console.log('ADDING ALLOCATION FOR SINGLE ROUTE')\n        pallocations.push(dallocDict[ii]);\n      } else {\n        pallocations.push(new Big(0));\n      }\n    }\n    var presult = [];\n    for (var j in routes) {\n      let route = routes[j];\n      let nodeRoute = nodeRoutes[j];\n      let allocation = pallocations[j];\n      let output = getOutputFromRoute(route, nodeRoute, allocation);\n      presult.push(output);\n    }\n    var presultTotal = presult.reduce((a, b) => a.plus(b), new Big(0));\n  } else {\n    var presultTotal = new Big(0);\n  }\n  if (presultTotal.gt(fullResultTotal)) {\n    var result = presult;\n    var allocations = pallocations;\n  } else {\n    var result = fullResult;\n    var allocations = fullResultAllocations;\n  }\n  // NEED TO COMPARE BETWEEEN DIRECT AND MULTI HOP TO GET BEST OUTPUT\n  return {\n    result: result,\n    allocations: allocations,\n  };\n}\n\nasync function getBestOptimalAllocationsAndOutputs(\n  pools,\n  inputToken,\n  outputToken,\n  totalInput,\n  maxPathLength = 3,\n  threshold = 0.001\n) {\n  var totalInput = new Big(totalInput);\n  let paths = await getPathsFromPools(\n    pools,\n    inputToken,\n    outputToken,\n    maxPathLength\n  );\n  if (!paths.length) {\n    return {\n      allocations: [],\n      outputs: new Big(0),\n      routes: [],\n      nodeRoutes: [],\n    };\n  }\n  let poolChains = await getPoolChainFromPaths(paths, pools, threshold);\n\n  let routes = await getRoutesFromPoolChain(poolChains);\n  let nodeRoutes = await getNodeRoutesFromPathsAndPoolChains(paths, poolChains);\n  // let allocations = await getBestOptInput(routes, nodeRoutes, totalInput);\n  // // fix integer rounding for allocations:\n  // allocations = checkIntegerSumOfAllocations(allocations, totalInput);\n  // let outputs = getBestOptOutput(routes, nodeRoutes, totalInput);\n  let inputOutput = await getBestOptInputAndOutput(\n    routes,\n    nodeRoutes,\n    totalInput\n  );\n  let allocations = inputOutput.input;\n  let outputs = inputOutput.output;\n\n  return {\n    allocations: allocations,\n    outputs: outputs,\n    routes: routes,\n    nodeRoutes: nodeRoutes,\n  };\n}\n\nfunction getHopsFromRoutes(routes, nodeRoutes, allocations) {\n  let hops = [];\n  for (var i in routes) {\n    var route = routes[i];\n    var nodeRoute = nodeRoutes[i];\n    var allocation = allocations[i];\n    if (!route.length) {\n      route = [route];\n    }\n    if (!route[0]) {\n      continue;\n    }\n    let hop = {\n      pool: route[0],\n      allocation: allocation,\n      inputToken: nodeRoute[0],\n      outputToken: nodeRoute[1],\n    };\n    hops.push(hop);\n  }\n  return hops;\n}\n\nfunction distillHopsByPool(hops) {\n  // console.log('some HOPS =');\n  // console.log(hops);\n  let distilledHops = [];\n  let poolIds = [];\n  let poolId2allocation = {};\n  for (var i in hops) {\n    let hop = hops[i];\n    if (hop.allocation === '0') {\n      continue;\n    }\n    // console.log(`HOP ${i} IS...`);\n    // console.log(hop);\n    let poolId = hop.pool['id'];\n    if (poolIds.includes(poolId)) {\n      poolId2allocation[poolId] = new Big(poolId2allocation[poolId])\n        .plus(new Big(hop.allocation))\n        .toString();\n    } else {\n      poolId2allocation[poolId] = new Big(hop.allocation).toString();\n      poolIds.push(poolId);\n    }\n  }\n  // let poolsWithOrder = [...new Set(...hops.map((item) => item.pool))]\n  let keys = Object.keys(poolId2allocation);\n  for (var j in keys) {\n    var poolId = keys[j];\n    let hop = hops.filter(\n      item => item.pool.id.toString() === poolId.toString()\n    )[0];\n    let distilledHop = {\n      pool: hop.pool,\n      allocation: poolId2allocation[poolId],\n      inputToken: hop.inputToken,\n      outputToken: hop.outputToken,\n    };\n    distilledHops.push(distilledHop);\n  }\n  return distilledHops;\n}\n\nfunction getDistilledHopActions(distilledHops, slippageTolerance) {\n  let actions = [];\n  for (var i in distilledHops) {\n    let hop = distilledHops[i];\n    let expectedAmountOut = getOutputSingleHop(\n      hop.pool,\n      hop.inputToken,\n      hop.outputToken,\n      hop.allocation\n    );\n    let minimumAmountOut = new Big(expectedAmountOut)\n      .times(new Big(1).minus(new Big(slippageTolerance).div(100)))\n      .round()\n      .toString(); //Here, assume slippage tolerance is a percentage. So 1% would be 1.0\n    let action = {\n      pool_id: hop.pool.id,\n      token_in: hop.inputToken,\n      token_out: hop.outputToken,\n      amount_in: hop.allocation,\n      min_amount_out: minimumAmountOut,\n    };\n    actions.push(action);\n  }\n  return actions;\n}\nfunction getMiddleTokenTotalsFromFirstHopActions(firstHopActions) {\n  let middleTokens = [...new Set(firstHopActions.map(item => item.token_out))];\n  let middleTokenTotals = {};\n  for (var i in middleTokens) {\n    let middleToken = middleTokens[i];\n    let mtActions = firstHopActions.filter(\n      item => item.token_out === middleToken\n    );\n    let mtTotal = mtActions\n      .map(item => new Big(item.min_amount_out))\n      .reduce((a, b) => a.plus(b), new Big(0))\n      .toString();\n    middleTokenTotals[middleToken] = mtTotal;\n  }\n  return middleTokenTotals;\n}\nfunction getRoutesAndAllocationsForMiddleToken(\n  routes,\n  nodeRoutes,\n  allocations,\n  middleToken,\n  middleTokenTotal\n) {\n  // get routes that use middle token.\n  // (input route alloction) /sum(input allocations of routes with middle token) * (total_middleToken)\n  let mask = [];\n  for (var i in nodeRoutes) {\n    if (nodeRoutes[i][1] === middleToken) {\n      mask.push(true);\n    } else {\n      mask.push(false);\n    }\n  }\n  let froutes = [];\n  let fallocations = [];\n  let fnoderoutes = [];\n  for (var i in routes) {\n    if (mask[i]) {\n      froutes.push(routes[i]);\n      fallocations.push(allocations[i]);\n      fnoderoutes.push(nodeRoutes[i]);\n    }\n  }\n  let sumfallocations = fallocations.reduce(\n    (a, b) => new Big(a).plus(new Big(b)),\n    new Big(0)\n  );\n  let middleAllocations = fallocations.map(item =>\n    new Big(item).div(sumfallocations).times(new Big(middleTokenTotal))\n  );\n  let secondHopRoutes = froutes.map(item => [item[1]]);\n  let secondHopNodeRoutes = fnoderoutes.map(item => [item[1], item[2]]);\n  middleAllocations = checkIntegerSumOfAllocations(\n    middleAllocations,\n    middleTokenTotal\n  );\n  return {\n    routes: secondHopRoutes,\n    nodeRoutes: secondHopNodeRoutes,\n    allocations: middleAllocations,\n  };\n}\n\nfunction getHopActionsFromRoutes(routes, nodeRoutes, allocations) {\n  // console.log('INSIDE GET HOP ACTIONS FROM ROUTES');\n  // console.log('ROUTES ARE...');\n  // console.log(routes);\n  // console.log('NODE ROUTES ARE...');\n  // console.log(nodeRoutes);\n  // console.log('ALLOCATIONS ARE...');\n  // console.log(allocations);\n  let totalInput = allocations\n    .map(a => new Big(a))\n    .reduce((a, b) => a.plus(b), new Big(0))\n    .toString();\n  let hops = [];\n  for (var i in routes) {\n    var route = routes[i];\n    var nodeRoute = nodeRoutes[i];\n    var allocation = allocations[i];\n    if (new Big(allocation).eq(new Big(0))) {\n      continue;\n    }\n    if (!route.length) {\n      route = [route];\n    }\n    if (!route[0]) {\n      continue;\n    }\n    for (var j in route) {\n      let pool = route[j];\n      // console.log('J IS...');\n      // console.log(j);\n      // console.log('NODE ROUTE IS...');\n      // console.log(nodeRoute);\n      if (j == 0) {\n        //first hop.\n        // console.log(nodeRoute[0]);\n        // console.log(nodeRoute[1]);\n        var hop = {\n          pool: pool,\n          allocation: allocation.toString(),\n          inputToken: nodeRoute[0],\n          outputToken: nodeRoute[1],\n          nodeRoute: nodeRoute,\n          route: route,\n          allRoutes: routes,\n          allNodeRoutes: nodeRoutes,\n          totalInputAmount: totalInput,\n          allAllocations: allocations,\n        };\n        // console.log('FIRST HOP IS...');\n        // console.log(hop);\n        hops.push(hop);\n        if (nodeRoute.length > 2) {\n          var middleTokenAllocation = getOutputSingleHop(\n            pool,\n            nodeRoute[0],\n            nodeRoute[1],\n            allocation\n          );\n        }\n      } else {\n        // second hop\n        var hop = {\n          pool: pool,\n          allocation: middleTokenAllocation.toString(),\n          inputToken: nodeRoute[1],\n          outputToken: nodeRoute[2],\n          nodeRoute: nodeRoute,\n          route: route,\n          allRoutes: routes,\n          allNodeRoutes: nodeRoutes,\n          totalInputAmount: totalInput,\n          allAllocations: allocations,\n        };\n        // console.log('SECOND HOP IS...');\n        // console.log(hop);\n        hops.push(hop);\n      }\n    }\n  }\n  // console.log('HOP ACTIONS FOUND TO BE');\n  // console.log(hops);\n  return hops;\n}\n\n// TODO: Clean this function. I don't need all the \"actions\" just the hops.\n// TODO: re-order actions to ensure each route is complete with zero input for second hop before starting next route.\nfunction getActionListFromRoutesAndAllocations(\n  routes,\n  nodeRoutes,\n  allocations\n) {\n  // REPLACE THE CODE BELOW WITH THE FUNCTION HERE.\n  return getHopActionsFromRoutes(routes, nodeRoutes, allocations);\n  var actions = [];\n  var all_hops = [];\n  let firstHops = getHopsFromRoutes(routes, nodeRoutes, allocations);\n\n  firstHops = firstHops.filter(hop => new Big(hop.allocation).gt(new Big(0)));\n  all_hops.push(...firstHops);\n  let distilledFirstHops = distillHopsByPool(firstHops);\n  let firstHopActions = getDistilledHopActions(\n    distilledFirstHops,\n    slippageTolerance\n  );\n  actions.push(...firstHopActions);\n  let middleTokenTotals = getMiddleTokenTotalsFromFirstHopActions(\n    firstHopActions\n  );\n  // console.log('first hop actions are...');\n  // console.log(firstHopActions);\n  let middleTokens = Object.keys(middleTokenTotals);\n  // console.log('middle token totals are...');\n  // console.log(middleTokenTotals);\n  // console.log('middle tokens are...');\n  // console.log(middleTokens);\n  for (var tokenIndex in middleTokens) {\n    var secondHops = [];\n    let middleToken = middleTokens[tokenIndex];\n    // console.log('current middle token is ');\n    // console.log(middleToken);\n    let middleTokenTotal = middleTokenTotals[middleToken];\n    // console.log('current middle token total is...');\n    // console.log(middleTokenTotal);\n    let middleTokenRoutesWithAllocations = getRoutesAndAllocationsForMiddleToken(\n      routes,\n      nodeRoutes,\n      allocations,\n      middleToken,\n      middleTokenTotal\n    );\n    // console.log('current middle tokens routes with allocations are...');\n    // console.log(middleTokenRoutesWithAllocations);\n    let middleTokenRoutes = middleTokenRoutesWithAllocations.routes;\n    let middleTokenAllocations = middleTokenRoutesWithAllocations.allocations;\n    let middleTokenNodeRoutes = middleTokenRoutesWithAllocations.nodeRoutes;\n    // console.log('middle token routes are...');\n    // console.log(middleTokenRoutes);\n    // console.log('middle token allocations are...');\n    // console.log(middleTokenAllocations);\n    // console.log('middle token node routes are...');\n    // console.log(middleTokenNodeRoutes);\n    secondHops.push(\n      ...getHopsFromRoutes(\n        middleTokenRoutes,\n        middleTokenNodeRoutes,\n        middleTokenAllocations\n      )\n    );\n    // console.log('CURRENT SECOND HOPS', secondHops);\n    // console.log(secondHops.length);\n    // console.log(secondHops.map((hop) => hop.allocation));\n    // console.log('filter out zero allocation 2nd hops:');\n    secondHops = secondHops.filter(hop =>\n      new Big(hop.allocation).gt(new Big(0))\n    );\n    // console.log(secondHops);\n    all_hops.push(...secondHops);\n    // console.log('second hops are currently...');\n    // console.log(secondHops);\n    let distilledSecondHopsForToken = distillHopsByPool(secondHops);\n    // console.log('distilled second hops are...');\n    let secondHopActionsForToken = getDistilledHopActions(\n      distilledSecondHopsForToken,\n      slippageTolerance\n    );\n    // console.log(secondHopActionsForToken);\n    actions.push(...secondHopActionsForToken);\n  }\n\n  //TODO: NEED TO RUN INTEGER ROUNDING FUNCTION ON MIDDLE TOKEN ALLOCATIONS\n\n  // TODO: check the node routes. for double-hop cases, find the hop action for each hop.\n  // For now, we are assuming no parallel swaps if there is a double-hop.\n\n  // Possible cases:\n  //  (1) 1 single-hop.\n  //  (2) Parallel single-hop ?\n  //  (3) 1 double-hop\n  //  (4) 2 double-hops\n\n  // We only have to worry about re-ordering the actions for cases (3) and (4).\n\n  let orderedHops = orderHops(all_hops, routes, nodeRoutes, allocations);\n\n  // console.log('ALL HOPS', all_hops);\n  return orderedHops;\n  // return actions;\n}\n\nfunction orderHops(hops, routes, nodeRoutes, allocations) {\n  // first get rid of zero allocation routes\n  // console.log('NODE ROUTES ARE...');\n  // console.log(nodeRoutes);\n  let filteredRoutes = [];\n  let filteredNodeRoutes = [];\n  let filteredAllocations = [];\n  for (var i in routes) {\n    // remove zero-allocation routes.\n    let allocation = new Big(allocations[i]);\n    if (allocation.gt(new Big(0))) {\n      filteredAllocations.push(allocation);\n      filteredRoutes.push(routes[i]);\n      filteredNodeRoutes.push(nodeRoutes[i]);\n    }\n    // console.log('FILTERED NODE ROUTES ARE...');\n    // console.log(filteredNodeRoutes);\n  }\n  // next check node routes to see if it is case 1, 2, 3, or 4.\n  // Possible cases:\n  //  (1) 1 single-hop.\n  //  (2) Parallel single-hop ?\n  //  (3) 1 double-hop\n  //  (4) 2 double-hops\n\n  if (filteredNodeRoutes.length === 1) {\n    // only one route.\n    let currentNodeRoute = filteredNodeRoutes[0];\n    if (currentNodeRoute.length === 2) {\n      // case 1.\n      return hops;\n    } else {\n      // case 3. assume there are only 3 nodes (double-hop)\n      //make sure order of hops is such that input token precedes output token.\n      //make sure the amount_in for second hop is zero (which will grab all of output of first hop to use.)\n      let firstHop = hops.filter(\n        hop => hop.inputToken === currentNodeRoute[0]\n      )[0];\n      let secondHop = hops.filter(\n        hop => hop.inputToken === currentNodeRoute[1]\n      )[0];\n      // set second hop amount in to 0 so that it will use whatever was generated by hop 1.\n      secondHop.pool.partialAmountIn = '0';\n\n      let orderedHops = [firstHop, secondHop];\n      return orderedHops;\n    }\n  } else if (filteredNodeRoutes.length === 2) {\n    // two routes.\n    let lengthNodeRoutes = filteredNodeRoutes.map(nr => nr.length);\n    // sub cases:\n    // [2,2] -- parallel swap. (direct) -- case 2\n    // [2,3] -- direct swap in parallel with double hop.\n    // [3,2] -- double hop in parallel with direct swap.\n    // [3,3] -- double hop in parallel with double hop. -- case 4\n    let orderedHops = [];\n    if (arrayEquals(lengthNodeRoutes, [2, 2])) {\n      return hops;\n    } else if (arrayEquals(lengthNodeRoutes, [2, 3])) {\n      directNodeRoute = filteredNodeRoutes[0];\n      doubleNodeRoute = filteredNodeRoutes[1];\n      let firstHop = hops.filter(\n        hop =>\n          hop.inputToken === directNodeRoute[0] &&\n          hop.outputToken === directNodeRoute[1]\n      )[0];\n      let secondHop = hops.filter(\n        hop => hop.inputToken === doubleNodeRoute[0]\n      )[0];\n      let thirdHop = hops.filter(\n        hop => hop.outputToken === doubleNodeRoute[2]\n      )[0];\n      // set third hop amount in to 0 so that it will use whatever was generated by hop 2.\n      thirdHop.pool.partialAmountIn = '0';\n      orderedHops = [firstHop, secondHop, thirdHop];\n      return orderedHops;\n    } else if (arrayEquals(lengthNodeRoutes, [3, 2])) {\n      directNodeRoute = filteredNodeRoutes[1];\n      doubleNodeRoute = filteredNodeRoutes[0];\n      let firstHop = hops.filter(\n        hop =>\n          hop.inputToken === directNodeRoute[0] &&\n          hop.outputToken === directNodeRoute[1]\n      )[0];\n      let secondHop = hops.filter(\n        hop => hop.inputToken === doubleNodeRoute[0]\n      )[0];\n      let thirdHop = hops.filter(\n        hop => hop.outputToken === doubleNodeRoute[2]\n      )[0];\n      // set third hop amount in to 0 so that it will use whatever was generated by hop 2.\n      thirdHop.pool.partialAmountIn = '0';\n      orderedHops = [firstHop, secondHop, thirdHop];\n      return orderedHops;\n    } else if (arrayEquals(lengthNodeRoutes, [3, 3])) {\n      orderedHops = [];\n\n      for (var i in filteredNodeRoutes) {\n        let doubleNodeRoute = filteredNodeRoutes[i];\n        let doubleHopMiddleToken = doubleNodeRoute[1];\n        let firstHop = hops.filter(\n          hop =>\n            hop.inputToken === doubleNodeRoute[0] &&\n            hop.outputToken === doubleHopMiddleToken\n        )[0];\n        let secondHop = hops.filter(\n          hop =>\n            hop.inputToken === doubleHopMiddleToken &&\n            hop.outputToken === doubleNodeRoute[2]\n        )[0];\n        // set second hop amount in to 0 so that it will use whatever was generated by hop 1.\n        secondHop.pool.partialAmountIn = '0';\n        orderedHops.push(firstHop);\n        orderedHops.push(secondHop);\n      }\n      return orderedHops;\n    } else {\n      return hops;\n    }\n    for (var i in filteredNodeRoutes) {\n      let currentNodeRoute = filteredNodeRoutes[i];\n      if (currentNodeRoute.length === 2) {\n      }\n    }\n  }\n\n  return hops;\n}\n\n// function getActionListFromRoutesAndAllocationsORIG(\n//   routes,\n//   nodeRoutes,\n//   allocations,\n//   slippageTolerance\n// ) {\n//   let actions = [];\n//   for (var i in routes) {\n//     let route = routes[i];\n//     let nodeRoute = nodeRoutes[i];\n//     let allocation = new Big(allocations[i]);\n//     if (allocation.eq(new Big(0))) {\n//       continue;\n//     }\n//     if (!route.length) {\n//       route = [route];\n//     }\n//     if (route.length === 1) {\n//       //single hop. only one action.\n//       let pool = route[0];\n//       let poolId = pool.id;\n//       let inputToken = nodeRoute[0];\n//       let outputToken = nodeRoute[1];\n//       let expectedAmountOut = getOutputSingleHop(\n//         pool,\n//         inputToken,\n//         outputToken,\n//         allocation\n//       );\n//       let minimumAmountOut = expectedAmountOut\n//         .times(new Big(1).minus(new Big(slippageTolerance).div(100)))\n//         .round()\n//         .toString(); //Here, assume slippage tolerance is a percentage. So 1% would be 1.0\n//       let action = {\n//         pool_id: poolId,\n//         token_in: inputToken,\n//         token_out: outputToken,\n//         amount_in: allocation.round().toString(),\n//         min_amount_out: minimumAmountOut.toString(),\n//       };\n//       actions.push(action);\n//     } else if (route.length === 2) {\n//       // double hop. two actions.\n//       let pool1 = route[0];\n//       let pool2 = route[1];\n//       let pool1Id = pool1.id;\n//       let pool2Id = pool2.id;\n//       let inputToken = nodeRoute[0];\n//       let middleToken = nodeRoute[1];\n//       let outputToken = nodeRoute[2];\n//       let expectedAmountOutFirstHop = getOutputSingleHop(\n//         pool1,\n//         inputToken,\n//         middleToken,\n//         allocation\n//       );\n//       let minimumAmountOutFirstHop = expectedAmountOutFirstHop\n//         .times(new Big(1).minus(new Big(slippageTolerance).div(100)))\n//         .round()\n//         .toString(); //Here, assume slippage tolerance is a percentage. So 1% would be 1.0\n\n//       let action1 = {\n//         pool_id: pool1Id,\n//         token_in: inputToken,\n//         token_out: middleToken,\n//         amount_in: allocation.round().toString(),\n//         min_amount_out: minimumAmountOutFirstHop,\n//       };\n//       let expectedFinalAmountOut = getOutputSingleHop(\n//         pool2,\n//         middleToken,\n//         outputToken,\n//         minimumAmountOutFirstHop\n//       );\n//       let minimumAMountOutSecondHop = expectedFinalAmountOut\n//         .times(new Big(1).minus(new Big(slippageTolerance).div(100)))\n//         .round()\n//         .toString();\n//       let action2 = {\n//         pool_id: pool2Id,\n//         token_in: middleToken,\n//         token_out: outputToken,\n//         amount_in: minimumAmountOutFirstHop,\n//         min_amount_out: minimumAMountOutSecondHop,\n//       };\n//       actions.push(action1);\n//       actions.push(action2);\n//     }\n//   }\n//   return actions;\n// }\n\nfunction* range(start, end) {\n  for (; start <= end; ++start) {\n    yield start;\n  }\n}\n\nfunction last(arr) {\n  return arr[arr.length - 1];\n}\n\nfunction* numericCombinations(n, r, loc = []) {\n  var idx = loc.length;\n  if (idx === r) {\n    yield loc;\n    return;\n  }\n  for (let next of range(idx ? last(loc) + 1 : 0, n - r + idx)) {\n    yield* numericCombinations(n, r, loc.concat(next));\n  }\n}\n\nfunction* combinations(arr, r) {\n  for (let idxs of numericCombinations(arr.length, r)) {\n    yield idxs.map(i => arr[i]);\n  }\n}\n\n//     #middleTokenTotals = getMiddleTokenTotals(routes,nodeRoutes,allocations)\n//     #TODO: complete this function with middle token checks.\n\n//     #consider all routes of length 2 with non-zero allocation. (double-hops)\n//     # among these, check for parallel swaps. That is, check for common node routes\n//     # for first hop. Then check for common node routes on second hop.\n//     # when common node routes occur for the first hop:\n//     # 1. Calculate the total expected output of intermediate token.\n//     # 2.\n//     # when common node routes occur for the second hop:\n//     # 1. get a ratio of the input allocations of the full routes associated with\n//     # these common node routes. allocate the total intermediate token output\n//     # toward these 2nd hop routes in the same ratio as their route input allocations.\n\nexport async function getSmartRouteSwapActions(\n  pools,\n  inputToken,\n  outputToken,\n  totalInput,\n  maxPathLength = 3,\n  threshold = 0.001,\n  numberOfRoutesLimit = 2,\n  MAX_NUMBER_PARALLEL_POOLS = 4,\n  decimalsCulledPoolIds = []\n) {\n  if (!totalInput) {\n    return [];\n  }\n  var totalInput = new Big(totalInput);\n\n  // remove pools that have an id from the decimalCulledPoolIds\n  pools = pools.filter(p => !decimalsCulledPoolIds.includes(p.id));\n\n  let resDict = await getBestOptimalAllocationsAndOutputs(\n    pools,\n    inputToken,\n    outputToken,\n    totalInput,\n    maxPathLength,\n    threshold\n  );\n\n  let allocations = resDict.allocations;\n\n  // let outputs = resDict.outputs;\n  let routes = resDict.routes;\n  let nodeRoutes = resDict.nodeRoutes;\n\n  let sortedIndexValues = argsort(allocations);\n  let topIndices = sortedIndexValues.slice(0, 10);\n  var reducedRoutes = [];\n  var reducedNodeRoutes = [];\n  for (var ind of topIndices) {\n    reducedRoutes.push(routes[ind]);\n    reducedNodeRoutes.push(nodeRoutes[ind]);\n  }\n  routes = reducedRoutes;\n  nodeRoutes = reducedNodeRoutes;\n\n  // TODO: compare pairs of routes to get the best allocation pair-wise.\n  var currentBestOutput = new Big(0);\n  var bestResDict = { routes: [] };\n  var bestAllocations = resDict.allocations;\n  var bestNodeRoutes = resDict.nodeRoutes;\n  var bestRoutes = resDict.routes;\n  // first check parallel swap with 4 actions. store result.\n  var parallelNodeRoutes = [];\n  var parallelRoutes = [];\n  for (var n in bestRoutes) {\n    let currentNodeRoute = bestNodeRoutes[n];\n    if (currentNodeRoute.length == 2) {\n      parallelNodeRoutes.push(currentNodeRoute);\n      parallelRoutes.push(bestRoutes[n]);\n    }\n  }\n  // console.log(`${parallelNodeRoutes.length} parallel routes found...`);\n  var bestRoutesAreParallel = false;\n  if (parallelNodeRoutes.length > 0) {\n    // first calculate the expected result using only parallel routes.\n    // let filteredAllocationsAndOutputs = getOptOutputVecRefined(parallelRoutes, parallelNodeRoutes, totalInput);\n    let filteredAllocationsAndOutputs = getOptOutputVec(\n      parallelRoutes,\n      parallelNodeRoutes,\n      totalInput\n    );\n    let parallellAllocations = filteredAllocationsAndOutputs.allocations;\n    let parallelOutputs = filteredAllocationsAndOutputs.result;\n\n    if (parallellAllocations.length > MAX_NUMBER_PARALLEL_POOLS) {\n      // now sort by allocation value to the top 4 parallel swaps:\n      let sortIndices = argsort(parallellAllocations);\n\n      sortIndices = sortIndices.slice(0, MAX_NUMBER_PARALLEL_POOLS);\n      var filteredParallelRoutes = [];\n      var filteredParallelNodeRoutes = [];\n      for (var i in sortIndices) {\n        filteredParallelRoutes.push(parallelRoutes[sortIndices[i]]);\n        filteredParallelNodeRoutes.push(parallelNodeRoutes[sortIndices[i]]);\n      }\n      filteredAllocationsAndOutputs = getOptOutputVec(\n        filteredParallelRoutes,\n        filteredParallelNodeRoutes,\n        totalInput\n      );\n      parallellAllocations = filteredAllocationsAndOutputs.allocations;\n      parallelOutputs = filteredAllocationsAndOutputs.result;\n    }\n\n    let parallelOutput = parallelOutputs.reduce(\n      (a, b) => a.plus(b),\n      new Big(0)\n    );\n    if (new Big(parallelOutput).gt(currentBestOutput)) {\n      bestAllocations = parallellAllocations;\n      currentBestOutput = parallelOutput;\n      // console.log(\n      //   'BEST OUTPUT FROM PARALLEL SWAPS IS NOW... ',\n      //   currentBestOutput.toString()\n      // );\n      bestRoutes = parallelRoutes;\n      bestNodeRoutes = parallelNodeRoutes;\n      bestRoutesAreParallel = true;\n    }\n  }\n  var canHaveTwoRoutes = false;\n  // initialize this variable to check if we can have two routes, or if all routes share a pool for an edge case.\n  // console.log('THE NUMBER OF ROUTES IS...', routes.length);\n\n  for (var i in routes) {\n    for (var j in routes) {\n      if (j > i) {\n        var route1 = routes[i];\n        var route2 = routes[j];\n        var nodeRoute1 = nodeRoutes[i];\n        var nodeRoute2 = nodeRoutes[j];\n        // check if they share a pool.\n        let route1PoolIds = new Set(route1.map(r => r.id));\n        let route2PoolIds = new Set(route2.map(r => r.id));\n        var sharePool = false;\n        for (var route1PoolId of route1PoolIds) {\n          if (route2PoolIds.has(route1PoolId)) {\n            sharePool = true;\n          }\n        }\n        if (sharePool) {\n          // routes are not independent. skip this pair.\n          // console.log('skipping this pair because pool was shared.');\n          continue;\n        } else {\n          canHaveTwoRoutes = true;\n          let currentRoutes = [route1, route2];\n          let currentNodeRoutes = [nodeRoute1, nodeRoute2];\n\n          let filteredAllocationsAndOutputs = getOptOutputVec(\n            currentRoutes,\n            currentNodeRoutes,\n            totalInput\n          );\n\n          let filteredAllocations = filteredAllocationsAndOutputs.allocations;\n          let filteredOutputs = filteredAllocationsAndOutputs.result;\n          // console.log('FILTERED ALLOCATIONS:');\n          // console.log(filteredAllocations.map((i) => i.toString()));\n          // console.log(filteredOutputs);\n          let totalOutput = filteredOutputs.reduce(\n            (a, b) => a.plus(b),\n            new Big(0)\n          );\n          if (new Big(totalOutput).gt(currentBestOutput)) {\n            bestAllocations = filteredAllocations;\n            currentBestOutput = totalOutput;\n            // console.log('BEST OUTPUT IS NOW... ', currentBestOutput.toString());\n            bestRoutes = currentRoutes;\n            bestNodeRoutes = currentNodeRoutes;\n            bestRoutesAreParallel = false;\n            // bestResDict = currentResDict\n          }\n\n          // if (currentResDict.outputs.gt(currentBestOutput)) {\n          // console.log('DIFF IS...', currentResDict.outputs.minus(currentBestOutput).toString());\n          // bestResDict = currentResDict;\n          // currentBestOutput = bestResDict.outputs;\n          // console.log('BEST OUTPUT IS NOW... ', currentBestOutput.toString());\n          // console.log(bestResDict.routes);\n          // console.log(bestResDict.allocations.map((i) => i.toString()));\n          // console.log(bestResDict.outputs.toString());\n        }\n      }\n    }\n  }\n\n  if (!canHaveTwoRoutes) {\n    // now we need to check through the routes in single manner to find the best one:\n    for (var i in routes) {\n      let currentRoutes = [routes[i]];\n      let currentNodeRoutes = [nodeRoutes[i]];\n      // let filteredAllocationsAndOutputs = getOptOutputVecRefined(currentRoutes, currentNodeRoutes, totalInput);\n      let filteredAllocationsAndOutputs = getOptOutputVec(\n        currentRoutes,\n        currentNodeRoutes,\n        totalInput\n      );\n\n      let filteredAllocations = filteredAllocationsAndOutputs.allocations;\n      let filteredOutputs = filteredAllocationsAndOutputs.result;\n      // console.log('FILTERED ALLOCATIONS:');\n      // console.log(filteredAllocations.map((i) => i.toString()));\n      // console.log(filteredOutputs);\n      let totalOutput = filteredOutputs.reduce((a, b) => a.plus(b), new Big(0));\n      if (new Big(totalOutput).gt(currentBestOutput)) {\n        bestAllocations = filteredAllocations;\n        currentBestOutput = totalOutput;\n        // console.log('BEST OUTPUT IS NOW... ', currentBestOutput.toString());\n        bestRoutes = currentRoutes;\n        bestNodeRoutes = currentNodeRoutes;\n        bestRoutesAreParallel = false;\n        // bestResDict = currentResDict\n      }\n    }\n  }\n\n  // resDict = bestResDict;\n\n  allocations = bestAllocations;\n\n  // let outputs = resDict.outputs;\n  routes = bestRoutes;\n  nodeRoutes = bestNodeRoutes;\n\n  if (routes.length < 1) {\n    return [];\n  }\n\n  // check the top numberOfRoutesLimit\n  // console.log('initial allocations are...');\n  // console.log(allocations.map((a) => a.toString()));\n  // console.log('fixed allocations are...');\n  // console.log(allocations.map((a) => new Big(a).toFixed()));\n  //SORT BY ALLOCATIONS\n  let allSortedIndices = argsort(allocations.map(a => new Big(a)));\n  if (bestRoutesAreParallel) {\n    numberOfRoutesLimit = 4;\n  }\n  let sortedIndices = allSortedIndices.slice(0, numberOfRoutesLimit);\n\n  // console.log('sorted Indices are');\n  // console.log(sortedIndices);\n  var filteredRoutes = [];\n  var filteredNodeRoutes = [];\n  for (var i in sortedIndices) {\n    let index = sortedIndices[i];\n    filteredRoutes.push(routes[index]);\n    filteredNodeRoutes.push(nodeRoutes[index]);\n  }\n\n  // console.log('filteredRoutes are ...');\n  // console.log(filteredRoutes);\n  for (var i in filteredRoutes) {\n    if (!filteredRoutes[i].length) {\n      filteredRoutes[i] = [filteredRoutes[i]];\n    }\n  }\n  // console.log('filtered Node routes are...');\n  // console.log(filteredNodeRoutes);\n\n  // THE BELOW CODE WILL ENSURE THAT ROUTES ARE INDEPENDENT (e.g. THE ROUTES WILL NOT SHARE A POOL)\n\n  let route1PoolIds = filteredRoutes[0].map(pool => pool.id);\n  // console.log('route 1 pool ids:');\n  // console.log(route1PoolIds);\n  if (filteredRoutes.length > 1) {\n    let route2PoolIds = filteredRoutes[1].map(pool => pool.id);\n    // console.log('route 2 pool ids:');\n    // console.log(route2PoolIds);\n    var sharedRoute = false;\n    for (var i in route2PoolIds) {\n      if (route1PoolIds.includes(route2PoolIds[i])) {\n        // a pool was shared between routes. need to calculate a new second route.\n        // console.log(\n        //   'a pool was shared between routes. going to calculate a new second route'\n        // );\n        sharedRoute = true;\n        break;\n      }\n    }\n  }\n\n  // NOTE -- this is a much simpler solution than that below. Instead of choosing the next best second route that doesn't share a\n  // pool with the first route, we could just use the first route and allocate all inputs to it.\n  // but, for larger transactions, it would be better to have option of two independent routes to spread out slippage.\n\n  // if (sharedRoute) {\n  //   filteredRoutes = [filteredRoutes[0]];\n  //   filteredNodeRoutes = [filteredNodeRoutes[0]];\n  //   // TODO -- later can add in a second route that doesn't share a pool with first.\n  // }\n\n  // We're going to find the next-highest allocation route that doesn't share a pool with the first route.\n  if (sharedRoute) {\n    let allFilteredRoutes = [];\n    let allFilteredNodeRoutes = [];\n    for (var i in allSortedIndices) {\n      allFilteredRoutes.push(routes[allSortedIndices[i]]);\n      allFilteredNodeRoutes.push(nodeRoutes[allSortedIndices[i]]);\n    }\n    let firstRoute = allFilteredRoutes[0];\n    // console.log('first route is...');\n    // console.log(firstRoute);\n    let firstRoutePoolIds = firstRoute.map(pool => pool.id);\n    for (var i in allFilteredRoutes) {\n      if (!allFilteredRoutes[i].length) {\n        allFilteredRoutes[i] = [allFilteredRoutes[i]];\n      }\n    }\n    // console.log('FIRST ROUTE POOL IDS ARE');\n    // console.log(firstRoutePoolIds);\n    let allFilteredRouteIds = allFilteredRoutes.map(route =>\n      route.map(pool => pool.id)\n    );\n    // console.log('allFilteredRouteIds are ...');\n    // console.log(allFilteredRouteIds);\n    for (var i in allFilteredRouteIds) {\n      // console.log('i is', i);\n      // console.log('ALL FILTERED ROUTES [i] IS...');\n      // console.log(allFilteredRouteIds[i]);\n      for (var j in allFilteredRouteIds[i]) {\n        // console.log('j is', j);\n        // console.log('ALL FILTERED ROUTES [i][j] IS...');\n        // console.log(allFilteredRouteIds[i][j]);\n        if (firstRoutePoolIds.includes(allFilteredRouteIds[i][j])) {\n          break;\n        }\n\n        var secondRoute = allFilteredRoutes[i];\n        if (!secondRoute.length) {\n          secondRoute = [secondRoute];\n        }\n        filteredRoutes = [allFilteredRoutes[0], secondRoute];\n        filteredNodeRoutes = [\n          allFilteredNodeRoutes[0],\n          allFilteredNodeRoutes[i],\n        ];\n        break;\n      }\n    }\n    // console.log('new filteredRoutes are ...');\n    // console.log(filteredRoutes);\n    // console.log('new filtered Node routes are...');\n    // console.log(filteredNodeRoutes);\n  }\n\n  // let filteredAllocations_check = getBestOptInput(\n  //   filteredRoutes,\n  //   filteredNodeRoutes,\n  //   totalInput\n  // );\n  // let filteredAllocationsAndOutputs = getOptOutputVecRefined(filteredRoutes, filteredNodeRoutes, totalInput);\n  let filteredAllocationsAndOutputs = getOptOutputVec(\n    filteredRoutes,\n    filteredNodeRoutes,\n    totalInput\n  );\n\n  let filteredAllocations = filteredAllocationsAndOutputs.allocations;\n  let filteredOutputs = filteredAllocationsAndOutputs.result;\n\n  filteredAllocations = checkIntegerSumOfAllocations(\n    filteredAllocations,\n    totalInput\n  ).map(stringAllo => new Big(stringAllo));\n\n  let hops = getActionListFromRoutesAndAllocations(\n    filteredRoutes,\n    filteredNodeRoutes,\n    filteredAllocations\n  );\n\n  var actions = [];\n  // console.log('hops are...');\n  // console.log(hops);\n\n  for (var i in hops) {\n    let hopInputTokenMeta = await ftGetTokenMetadata(hops[i].inputToken);\n    let hopOutputTokenMeta = await ftGetTokenMetadata(hops[i].outputToken);\n    let hopOutputTokenDecimals = hopOutputTokenMeta.decimals;\n\n    let expectedHopOutput = getOutputSingleHop(\n      hops[i].pool,\n      hops[i].inputToken,\n      hops[i].outputToken,\n      hops[i].allocation\n    );\n    let decimalEstimate = new Big(expectedHopOutput)\n      .div(new Big(10).pow(hopOutputTokenDecimals))\n      .toString();\n\n    // Need to check if expected Hop Output is > 1. If not, then cull the corresponding pool and re-calculate.\n    if (new Big(expectedHopOutput).lt(new Big(1))) {\n      // purge the pool and recalculate.\n\n      decimalsCulledPoolIds.push(hops[i].pool.id);\n      return getSmartRouteSwapActions(\n        pools,\n        inputToken,\n        outputToken,\n        totalInput,\n        (maxPathLength = maxPathLength),\n        (threshold = threshold),\n        (numberOfRoutesLimit = numberOfRoutesLimit),\n        (MAX_NUMBER_PARALLEL_POOLS = MAX_NUMBER_PARALLEL_POOLS),\n        (decimalsCulledPoolIds = decimalsCulledPoolIds)\n      );\n    }\n\n    if (\n      hops[i].inputToken == inputToken &&\n      hops[i].outputToken == outputToken\n    ) {\n      var status = 'parallel swap';\n    } else {\n      var status = 'stableSmart';\n    }\n\n    let tokens = await Promise.all(\n      hops[i].nodeRoute.map(async t => await ftGetTokenMetadata(t))\n    );\n\n    actions[i] = {\n      estimate: decimalEstimate,\n      pool: {\n        fee: hops[i].pool.fee,\n        gamma_bps: new Big(10000).minus(new Big(hops[i].pool.fee)), //.div(new Big(10000)), //hops[i].pool.gamma, //new Big(10000).minus(new Big(hops[i].pool.fee)).div(new Big(10000));\n        id: hops[i].pool.id,\n        partialAmountIn: new Big(hops[i].allocation).round().toString(),\n        supplies: {\n          [hops[i].pool.token1Id]: hops[i].pool.token1Supply,\n          [hops[i].pool.token2Id]: hops[i].pool.token2Supply,\n        },\n        token0_ref_price: hops[i].pool.token0_price,\n        tokenIds: [hops[i].pool.token1Id, hops[i].pool.token2Id],\n        Dex: hops[i].pool.Dex,\n      },\n      status: status,\n      token: hopInputTokenMeta,\n      outputToken: hops[i].outputToken,\n      inputToken: hops[i].inputToken,\n      nodeRoute: hops[i].nodeRoute,\n      route: hops[i].route,\n      allRoutes: hops[i].allRoutes,\n      allNodeRoutes: hops[i].allNodeRoutes,\n      totalInputAmount: hops[i].totalInputAmount,\n      allAllocations: hops[i].allAllocations,\n      tokens: tokens,\n      routeInputToken: inputToken,\n      routeOutputToken: outputToken,\n      overallPriceImpact: '0',\n    };\n    // console.log('INPUT TOKEN IS...');\n    // console.log(hops[i].inputToken);\n    actions[i].pool.x = actions[i].pool.supplies[hops[i].inputToken];\n    actions[i].pool.y = actions[i].pool.supplies[hops[i].outputToken];\n  }\n  // now set partial amount in for second hops equal to zero:\n  // also, set the total price impact value.\n  let overallPriceImpact = await calculateSmartRouteV2PriceImpact(actions);\n  for (var i in actions) {\n    let action = actions[i];\n    action.overallPriceImpact = overallPriceImpact;\n    if (action.outputToken === outputToken && action.inputToken != inputToken) {\n      // only want to set second hop partial amount in to zero\n      action.pool.partialAmountIn = '0';\n    }\n  }\n\n  return actions;\n}\n\nasync function calculateSmartRouteV2PriceImpact(actions) {\n  // the goal is to take a weighted average of the price impact per route, treating each one at a time.\n  // for single hop (parallel swaps), the price impact is calculated as before.\n  // for double-hop, the market price, P, is determined using reserves of tokens in each pool in the route.\n  // in both cases, we compare the 'market price', P , determined solely by reserves in pools, and the actual\n  // average price, R,  expected to be paid in the transaction.\n  // the price impact is then defined as (P-R)/R * 100 and is a percentage number, returned as a string.\n\n  let deltaY = actions\n    .filter(a => a.outputToken == a.routeOutputToken)\n    .map(a => new Big(a.estimate))\n    .reduce((a, b) => a.plus(b), new Big(0));\n  // console.log('DELTA Y IS...');\n  // console.log(deltaY.toString());\n\n  let inputTokenMeta = actions[0].tokens[0];\n  let deltaX = new Big(actions[0].totalInputAmount).div(\n    new Big(10).pow(inputTokenMeta.decimals)\n  );\n  let R = deltaY.div(deltaX);\n  var P = new Big(0);\n  let routes = actions[0].allRoutes;\n  let nodeRoutes = actions[0].allNodeRoutes;\n  let allocations = actions[0].allAllocations.map(a => new Big(a));\n  let totalAllocations = allocations\n    .map(a => new Big(a))\n    .reduce((a, b) => a.plus(b), new Big(0));\n\n  let weights = allocations.map(a => a.div(totalAllocations));\n\n  for (var i in routes) {\n    let route = routes[i];\n    let nodeRoute = nodeRoutes[i];\n    let tokens = await Promise.all(\n      nodeRoute.map(async t => await ftGetTokenMetadata(t))\n    );\n    let weight = weights[i];\n    if (route.length == 1) {\n      let num = new Big(route[0].reserves[nodeRoute[0]]).div(\n        new Big(10).pow(tokens[0].decimals)\n      );\n      let denom = new Big(route[0].reserves[nodeRoute[1]]).div(\n        new Big(10).pow(tokens[1].decimals)\n      );\n      var routeMarketPrice = num.div(denom);\n    } else {\n      let num1 = new Big(route[0].reserves[nodeRoute[0]]).div(\n        new Big(10).pow(tokens[0].decimals)\n      );\n\n      let denom1 = new Big(route[0].reserves[nodeRoute[1]]).div(\n        new Big(10).pow(tokens[1].decimals)\n      );\n\n      let num2 = new Big(route[1].reserves[nodeRoute[1]]).div(\n        new Big(10).pow(tokens[1].decimals)\n      );\n\n      let denom2 = new Big(route[1].reserves[nodeRoute[2]]).div(\n        new Big(10).pow(tokens[2].decimals)\n      );\n\n      var routeMarketPrice = num1\n        .div(denom1)\n        .times(num2)\n        .div(denom2);\n    }\n    P = P.plus(weight.times(new Big(1).div(routeMarketPrice)));\n  }\n\n  let priceImpact = P.minus(R)\n    .div(R)\n    .times(new Big(100))\n    .toString();\n  return priceImpact;\n}\n\nfunction decor(arr) {\n  var res = [];\n  for (var i in arr) {\n    res.push([arr[i], i]);\n  }\n  return res;\n}\nfunction argsort(arr) {\n  let undecor = a => a[1]; // leave only index\n  let decorated = decor(arr);\n\n  return decorated\n    .sort((a, b) => new Big(b[0]).minus(new Big(a[0])))\n    .map(undecor);\n}\n\nfunction getPoolsByToken1ORToken2(pools, token1, token2) {\n  let filteredPools = pools.filter(\n    item =>\n      item.token1Id === token1 ||\n      item.token2Id === token1 ||\n      item.token1Id === token2 ||\n      item.token2Id === token2\n  );\n  return filteredPools;\n}\n\nfunction getPoolsByToken1ANDToken2(\n  pools,\n  token1,\n  token2,\n  cullZeroLiquidityPools = true\n) {\n  let filteredPools = pools.filter(\n    item =>\n      (item.token1Id === token1 && item.token2Id === token2) ||\n      (item.token1Id === token2 && item.token2Id === token1)\n  );\n  if (cullZeroLiquidityPools) {\n    filteredPools = filteredPools.filter(\n      item => item.token1Supply != '0' && item.token2Supply != '0'\n    );\n  }\n  return filteredPools;\n}\n\nfunction getLiqudityOfPoolsFromList(pools) {\n  let liquidities = [];\n  for (var poolInd in pools) {\n    let pool = pools[poolInd];\n    pool.amounts = [pool.token1Supply, pool.token2Supply];\n    let poolBigAmounts = pool.amounts.map(item => new Big(item));\n    let liquidity = poolBigAmounts[0].times(poolBigAmounts[1]);\n    liquidities.push(liquidity);\n  }\n  return liquidities;\n}\n\nfunction getNormalizedLiquiditiesFromList(pools) {\n  let liquidities = getLiqudityOfPoolsFromList(pools);\n  let maxLiq = bigMax(liquidities);\n  let normalizedLiquidities = liquidities.map(item => item.div(maxLiq));\n  return normalizedLiquidities;\n}\n\nfunction bigMax(arrayOfBigs) {\n  if (arrayOfBigs.length < 1) {\n    return null;\n  }\n  let maxElem = arrayOfBigs[0];\n  for (var ind in arrayOfBigs) {\n    let val = arrayOfBigs[ind];\n    if (val.gt(maxElem)) {\n      maxElem = val;\n    }\n  }\n  return maxElem;\n}\n\nfunction cullPoolsWithInsufficientLiquidity(pools, threshold = 0.0001) {\n  var thresh = new Big(threshold);\n  let normLiq = getNormalizedLiquiditiesFromList(pools);\n  let filteredPools = [];\n  for (var i = 0; i < normLiq.length; i++) {\n    if (normLiq[i] > thresh) {\n      filteredPools.push(pools[i]);\n    }\n  }\n  return filteredPools;\n}\n\nfunction cartesianProduct(a) {\n  let result = a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())));\n  return result;\n}\n\nfunction addEdge(g, edge) {\n  let src = edge[0];\n  let dst = edge[1];\n  if (Object.keys(g).includes(src)) {\n    if (!Object.keys(g[src]).includes(dst)) {\n      g[src][dst] = 1;\n    }\n  } else {\n    g[src] = {};\n    g[src][dst] = 1;\n  }\n  if (Object.keys(g).includes(dst)) {\n    if (!Object.keys(g[dst]).includes(src)) {\n      g[dst][src] = 1;\n    }\n  } else {\n    g[dst] = {};\n    g[dst][src] = 1;\n  }\n}\n\nfunction addEdges(g, edgeList) {\n  for (var n in edgeList) {\n    let edge = edgeList[n];\n    addEdge(g, edge);\n  }\n}\n\nfunction deleteEdge(g, edge) {\n  let gNew = JSON.parse(JSON.stringify(g)); // using this to deep clone graph structure\n  let e1 = edge[0];\n  let e2 = edge[1];\n  if (Object.keys(gNew).includes(e1)) {\n    if (Object.keys(gNew[e1]).includes(e2)) {\n      delete gNew[e1][e2];\n    }\n  }\n  if (Object.keys(gNew).includes(e2)) {\n    if (Object.keys(gNew[e2]).includes(e1)) {\n      delete gNew[e2][e1];\n    }\n  }\n  return gNew;\n}\n\nfunction deleteNode(g, node) {\n  let gNew = JSON.parse(JSON.stringify(g)); // using this to deep clone graph structure\n  if (Object.keys(gNew).includes(node)) {\n    delete gNew[node];\n  }\n  let keys = Object.keys(gNew);\n  for (var nodeInd in keys) {\n    let nodeNow = keys[nodeInd];\n    if (Object.keys(gNew[nodeNow]).includes(node)) {\n      delete gNew[nodeNow][node];\n    }\n  }\n  return gNew;\n}\n\nfunction dijkstra(graph, s) {\n  var solutions = {};\n  solutions[s] = {};\n  solutions[s].path = [];\n  solutions[s].dist = 0;\n\n  while (true) {\n    var parent = null;\n    var nearest = null;\n    var dist = Infinity;\n\n    //for each existing solution\n    for (var n in solutions) {\n      if (!solutions[n]) {\n        solutions[n] = {};\n      }\n      if (!solutions[n].path) continue;\n      var ndist = solutions[n].dist;\n      var adj = graph[n];\n      //for each of its adjacent nodes...\n      for (var a in adj) {\n        //without a solution already...\n        if (!solutions[a]) {\n          solutions[a] = {};\n        }\n        if (solutions[a].path) continue;\n        //choose nearest node with lowest *total* cost\n        var d = adj[a] + ndist;\n        if (d < dist) {\n          //reference parent\n          parent = solutions[n].path;\n          nearest = a;\n          dist = d;\n        }\n      }\n    }\n\n    //no more solutions\n    if (dist === Infinity) {\n      break;\n    }\n\n    //extend parent's solution path\n    solutions[nearest].path = parent.concat(nearest);\n    //extend parent's cost\n    solutions[nearest].dist = dist;\n  }\n\n  return solutions;\n}\n\nfunction shortestPath(g, src, dst, ignore_nodes = [], ignore_edges = []) {\n  let gTemp = JSON.parse(JSON.stringify(g)); // using this to deep clone graph structure. If we can use lodash, could use  _.cloneDeep(obj)\n  // remove nodes\n  for (var nodeInd in ignore_nodes) {\n    let nodeNow = ignore_nodes[nodeInd];\n    gTemp = deleteNode(gTemp, nodeNow);\n  }\n  // remove edges\n  for (var edgeInd in ignore_edges) {\n    let edgeNow = ignore_edges[edgeInd];\n    gTemp = deleteEdge(gTemp, edgeNow);\n  }\n  let solution = dijkstra(gTemp, src)[dst];\n  solution.path.unshift(src); // original algorithm doesn't include source node in path\n  return solution;\n}\n\nfunction* count(firstval = 0, step = 1) {\n  let x = firstval;\n  while (true) {\n    yield x;\n    x = x + 1;\n  }\n}\n\nclass PathBuffer {\n  constructor() {\n    this.paths = [];\n    this.sortedpaths = [];\n    //this.counter = count();\n  }\n  len() {\n    return this.sortedpaths.length;\n  }\n\n  push(cost, path) {\n    if (path && !arrayContains(this.paths, path)) {\n      this.sortedpaths.push([cost, path]);\n      this.sortedpaths.sort(function(a, b) {\n        return a[0] - b[0];\n      });\n      //heappush(this.sortedpaths, (cost, this.counter.next().value,path));\n      this.paths.push(path);\n    }\n  }\n\n  pop() {\n    //let val = heappop(this.sortedpaths);\n    let val = this.sortedpaths.shift();\n    let cost = val[0];\n    let path = val[1];\n    this.paths.splice(this.paths.indexOf(path), 1);\n    return path;\n  }\n}\n\nfunction arrayEquals(a, b) {\n  return (\n    Array.isArray(a) &&\n    Array.isArray(b) &&\n    a.length === b.length &&\n    a.every((val, index) => val === b[index])\n  );\n}\n\nfunction arrayContains(arr, obj) {\n  // checks to see if the input array contains a reference object, obj, using\n  // JSON.stringify() .\n  let obj_json = JSON.stringify(obj);\n  for (var itemInd in arr) {\n    if (JSON.stringify(arr[itemInd]) == obj_json) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction* yenFromPy(g, source, target) {\n  //adapted from the python implementation in networkx.algorithms.simple_paths.shortest_simple_paths()\n  let listA = [];\n  let listB = new PathBuffer();\n  let prev_path = null;\n\n  while (true) {\n    if (!prev_path) {\n      let sol = shortestPath(g, source, target);\n      let length = sol.dist;\n      let path = sol.path;\n      listB.push(length, path);\n    } else {\n      let ignore_nodes = [];\n      let ignore_edges = [];\n      for (var i = 1; i < prev_path.length; i++) {\n        let root = prev_path.slice(0, i);\n        let root_length = root.length;\n        for (var pathInd in listA) {\n          let path = listA[pathInd];\n\n          if (arrayEquals(path.slice(0, i), root)) {\n            let edgeToIgnore = [path[i - 1], path[i]];\n            ignore_edges.push(edgeToIgnore);\n          }\n        }\n        try {\n          let sol = shortestPath(\n            g,\n            root[root.length - 1],\n            target,\n            (ignore_nodes = ignore_nodes),\n            (ignore_edges = ignore_edges)\n          );\n          let length = sol.dist;\n          let spur = sol.path;\n          let path = root.slice(0, root.length - 1).concat(spur);\n          listB.push(root_length + length, path);\n        } catch (e) {\n          //console.log(`yenFromPy error was... ${e}`)\n          //dont do anything.\n        }\n        ignore_nodes.push(root[root.length - 1]);\n      }\n    }\n    if (listB.sortedpaths) {\n      try {\n        let path = listB.pop();\n        yield path;\n        listA.push(path);\n        prev_path = path;\n      } catch (e) {\n        break;\n      }\n    } else {\n      break;\n    }\n  }\n}\n\nfunction getKShortestPaths(g, source, target, k, maxPathLength = 3) {\n  let paths = [];\n  if (maxPathLength < 2) {\n    var maxPathLength = 2;\n  }\n  let gen = yenFromPy(g, source, target);\n  for (var n = 1; n <= k; n++) {\n    try {\n      let res = gen.next().value;\n      if (res && !arrayContains(paths, res)) {\n        if (res.length > maxPathLength) {\n          // console.log(\n          //   `found all hops of length ${\n          //     maxPathLength - 1\n          //   } or less... breaking out of generator`\n          // );\n          break;\n        }\n        paths.push(res);\n      }\n    } catch (e) {\n      break;\n    }\n  }\n  return paths;\n}\n\nasync function getPathsFromPools(\n  pools,\n  inputToken,\n  outputToken,\n  maxPathLength = 3\n) {\n  let graph = getGraphFromPoolList(pools);\n  return getKShortestPaths(graph, inputToken, outputToken, 100, maxPathLength);\n}\n\nasync function getAllPathsBelowLengthN(g, source, target, N, limit = 100) {\n  // use Yen's algorithm to find the paths of length N or below between source and target nodes in graph g.\n\n  let paths = [];\n\n  let gen = await yenFromPy(g, source, target);\n  let currentPathLength = 0;\n  let count = 1;\n  while (currentPathLength <= N) {\n    //   console.log(`CURRENT PATH LENGTH IS ${currentPathLength}`)\n    try {\n      let res = await gen.next().value;\n      //   console.log(`RES IS ${res}`)\n      if (res && !arrayContains(paths, res)) {\n        if (res.length > currentPathLength) {\n          currentPathLength = res.length;\n          if (currentPathLength > N) {\n            break;\n          }\n        }\n        paths.push(res);\n      }\n      count = count + 1;\n      if (count > limit) {\n        break;\n      }\n    } catch (e) {\n      //   console.log(e)\n      break;\n    }\n  }\n  return paths;\n}\n\nfunction getGraphFromPoolList(poolList) {\n  let pools = poolList.filter(\n    item => item.token1Supply != '0' && item.token2Supply != '0'\n  );\n  let transitions = pools.map(item => [item.token1Id, item.token2Id]);\n  let g = {};\n  addEdges(g, transitions);\n  return g;\n}\n\n////////////////////////////////////\n\n// MAIN FUNCTION\n\n////////////////////////////////////\n\n// TODO -- incorporate the following integrated function, which tries to\n// account for stablecoins within the context of smart routing.\n\n//TODO -- need the right API / hooks for GETSTABLESWAPACTION function and GETPARALLELSWAPACTIONS functions.\n\n//TODO -- transform the actions generated in this function into tranaction to execute.\n\n//TRYING: GETSTABLESWAPACTION <==> instantSwapGetTransactions\n\nexport async function stableSmart(\n  pools,\n  inputToken,\n  outputToken,\n  totalInput,\n  slippageTolerance\n) {\n  let smartRouteActions = await getSmartRouteSwapActions(\n    pools,\n    inputToken,\n    outputToken,\n    totalInput,\n    slippageTolerance\n  );\n  return smartRouteActions;\n}\n\nexport function getExpectedOutputFromActionsORIG(actions, outputToken) {\n  return actions\n    .filter(item => item.outputToken === outputToken)\n    .map(item => new Big(item.estimate))\n    .reduce((a, b) => a.plus(b), new Big(0));\n}\n\nfunction getFeeForRoute(route) {\n  if (!route.length) {\n    route = [route];\n  }\n  if (route.length == 1) {\n    // Single Hop case\n    let p = route[0];\n    return p.fee;\n  } else if (route.length == 2) {\n    //Double Hop Case\n    let p1 = route[0];\n    let p2 = route[1];\n    let fee1 = p1.fee;\n    let fee2 = p2.fee;\n    return fee1 + fee2;\n  }\n}\n\nexport function getAverageFeeForRoutes(routes, nodeRoutes, totalInput) {\n  let normalizedAllocations = getOptimalAllocationForRoutes(\n    routes,\n    nodeRoutes,\n    totalInput\n  ).map(a => a.div(new Big(totalInput)));\n  let averageFee = 0;\n  for (var i in routes) {\n    averageFee += normalizedAllocations[i] * getFeeForRoute(routes[i]);\n  }\n  return averageFee;\n}\n","import { TokenMetadata, Pool, StablePool, EstimateSwapView } from './types';\nimport {\n  toReadableNumber,\n  toNonDivisibleNumber,\n  scientificNotationToString,\n} from './utils';\nimport Big from 'big.js';\nimport { SameInputTokenError, ZeroInputError, NoPoolError } from './error';\nimport { ONLY_ZEROS, toPrecision } from './utils';\nimport _ from 'lodash';\nimport { FEE_DIVISOR } from './constant';\nimport { getSwappedAmount } from './stable-swap';\nimport { ftGetTokenMetadata, ftGetTokensMetadata } from './ref';\nimport { isStablePool } from './utils';\nimport {\n  getStablePoolDecimal,\n  isStablePoolToken,\n  poolFormatter,\n} from './utils';\nimport {\n  stableSmart,\n  getExpectedOutputFromActionsORIG,\n  //@ts-ignore\n} from './smartRoutingLogic.js';\n\nexport interface SwapParams {\n  tokenIn: TokenMetadata;\n  tokenOut: TokenMetadata;\n  amountIn: string;\n  simplePools: Pool[];\n  options?: SwapOptions;\n}\n\nexport interface SwapOptions {\n  enableSmartRouting?: boolean;\n  stablePools?: Pool[];\n  stablePoolsDetail?: StablePool[];\n}\n\nexport const getSimplePoolEstimate = ({\n  tokenIn,\n  tokenOut,\n  pool,\n  amountIn,\n}: {\n  tokenIn: TokenMetadata;\n  tokenOut: TokenMetadata;\n  pool: Pool;\n  amountIn: string;\n}) => {\n  const amount_with_fee = Number(amountIn) * (FEE_DIVISOR - pool.fee);\n  const in_balance = toReadableNumber(\n    tokenIn.decimals,\n    pool.supplies[tokenIn.id]\n  );\n  const out_balance = toReadableNumber(\n    tokenOut.decimals,\n    pool.supplies[tokenOut.id]\n  );\n  const estimate = new Big(\n    (\n      (amount_with_fee * Number(out_balance)) /\n      (FEE_DIVISOR * Number(in_balance) + amount_with_fee)\n    ).toString()\n  ).toFixed();\n\n  return {\n    estimate,\n    pool,\n    outputToken: tokenOut.id,\n    inputToken: tokenIn.id,\n  };\n};\n\nexport const getStablePoolEstimate = ({\n  tokenIn,\n  tokenOut,\n  amountIn,\n  stablePool,\n}: {\n  tokenIn: TokenMetadata;\n  tokenOut: TokenMetadata;\n  amountIn: string;\n  stablePool: StablePool;\n}) => {\n  const STABLE_LP_TOKEN_DECIMALS = getStablePoolDecimal(stablePool);\n\n  const [amount_swapped, _, dy] = getSwappedAmount(\n    tokenIn.id,\n    tokenOut.id,\n    amountIn,\n    stablePool,\n    STABLE_LP_TOKEN_DECIMALS\n  );\n\n  const amountOut =\n    amount_swapped < 0 || isNaN(amount_swapped)\n      ? '0'\n      : toPrecision(scientificNotationToString(amount_swapped.toString()), 0);\n\n  const dyOut =\n    amount_swapped < 0 || isNaN(amount_swapped) || isNaN(dy)\n      ? '0'\n      : toPrecision(scientificNotationToString(dy.toString()), 0);\n\n  return {\n    estimate: toReadableNumber(STABLE_LP_TOKEN_DECIMALS, amountOut),\n    noFeeAmountOut: toReadableNumber(STABLE_LP_TOKEN_DECIMALS, dyOut),\n    pool: stablePool,\n    outputToken: tokenOut.id,\n    inputToken: tokenIn.id,\n  };\n};\n\n/**\n * @description Get the estimate of the amount of tokenOut that can be received\n *\n */\nexport const singlePoolSwap = ({\n  tokenIn,\n  tokenOut,\n  simplePools,\n  amountIn,\n  stablePools,\n}: {\n  tokenIn: TokenMetadata;\n  tokenOut: TokenMetadata;\n  simplePools: Pool[];\n  amountIn: string;\n  stablePools?: StablePool[];\n}) => {\n  if (!simplePools || simplePools.length === 0) {\n    throw NoPoolError;\n  }\n\n  // const pools = simplePools.concat(stablePools);\n\n  const simplePoolsThisPair = simplePools.filter(\n    p => p.tokenIds.includes(tokenIn.id) && p.tokenIds.includes(tokenOut.id)\n  );\n\n  const estimatesSimplePool = simplePoolsThisPair.map(pool =>\n    getSimplePoolEstimate({\n      tokenIn,\n      tokenOut,\n      pool,\n      amountIn,\n    })\n  );\n\n  const stablePoolThisPair = stablePools?.filter(\n    sp =>\n      sp.token_account_ids.includes(tokenIn.id) &&\n      sp.token_account_ids.includes(tokenOut.id)\n  );\n\n  // different stable lp token decimal for different type of pools\n  const estimatesStablePool = stablePoolThisPair?.map(stablePool =>\n    getStablePoolEstimate({\n      tokenIn,\n      tokenOut,\n      amountIn,\n      stablePool,\n    })\n  );\n\n  const maxSimplePoolEstimate =\n    estimatesSimplePool === undefined || estimatesSimplePool.length === 0\n      ? undefined\n      : estimatesSimplePool.length === 1\n      ? estimatesSimplePool[0]\n      : _.maxBy(estimatesSimplePool, estimate => Number(estimate.estimate));\n\n  const maxStablePoolEstimate =\n    estimatesStablePool === undefined || estimatesStablePool.length === 0\n      ? undefined\n      : estimatesStablePool.length === 1\n      ? estimatesStablePool[0]\n      : _.maxBy(estimatesStablePool, estimate => Number(estimate.estimate));\n\n  if (!maxStablePoolEstimate && !maxSimplePoolEstimate) throw NoPoolError;\n\n  if (!maxStablePoolEstimate) {\n    return maxSimplePoolEstimate;\n  } else if (!maxSimplePoolEstimate) return maxStablePoolEstimate;\n  else {\n    return Number(maxSimplePoolEstimate?.estimate) >\n      Number(maxStablePoolEstimate?.estimate)\n      ? maxSimplePoolEstimate\n      : maxStablePoolEstimate;\n  }\n};\n\nexport const getStablePoolsThisPair = ({\n  tokenInId,\n  tokenOutId,\n  stablePools,\n}: {\n  tokenInId: string;\n  tokenOutId: string;\n  stablePools: Pool[];\n}) => {\n  return stablePools.filter(\n    p =>\n      p.tokenIds.includes(tokenInId) &&\n      p.tokenIds.includes(tokenOutId) &&\n      tokenInId !== tokenOutId\n  );\n};\n\nexport const getPoolsByTokens = ({\n  pools,\n  tokenInId,\n  tokenOutId,\n}: {\n  pools: Pool[];\n  tokenInId: string;\n  tokenOutId: string;\n}) => {\n  if (tokenInId === tokenOutId) return [];\n\n  return pools.filter(\n    p => p.tokenIds.includes(tokenInId) && p.tokenIds.includes(tokenOutId)\n  );\n};\n\nexport const getPoolEstimate = async ({\n  tokenIn,\n  tokenOut,\n  amountIn,\n  stablePoolDetail,\n  pool,\n}: {\n  tokenIn: TokenMetadata;\n  tokenOut: TokenMetadata;\n  amountIn: string;\n  pool: Pool;\n  stablePoolDetail?: StablePool;\n}) => {\n  if (!!stablePoolDetail) {\n    return getStablePoolEstimate({\n      tokenIn,\n      tokenOut,\n      stablePool: stablePoolDetail,\n      amountIn,\n    });\n  } else {\n    return getSimplePoolEstimate({\n      tokenIn,\n      tokenOut,\n      pool,\n      amountIn,\n    });\n  }\n};\n\nexport async function getHybridStableSmart(\n  tokenIn: TokenMetadata,\n  tokenOut: TokenMetadata,\n  amountIn: string,\n  stablePools: Pool[],\n  stablePoolsDetail: StablePool[],\n  simplePools: Pool[]\n) {\n  if (\n    !isStablePoolToken(stablePoolsDetail, tokenIn.id) &&\n    !isStablePoolToken(stablePoolsDetail, tokenOut.id)\n  ) {\n    return { actions: [], estimate: '0' };\n  }\n\n  const stablePoolsDetailById = stablePoolsDetail.reduce((acc, cur) => {\n    return {\n      ...acc,\n      [cur.id]: cur,\n    };\n  }, {} as Record<string, StablePool>);\n\n  const parsedAmountIn = toNonDivisibleNumber(tokenIn.decimals, amountIn);\n\n  let pool1: Pool, pool2: Pool;\n\n  let pools1: Pool[] = [];\n  let pools2: Pool[] = [];\n\n  let pools1Right: Pool[] = [];\n  let pools2Right: Pool[] = [];\n\n  let candidatePools: Pool[][] = [];\n\n  /**\n   * find possible routes for this pair\n   *\n   *\n   */\n\n  if (isStablePoolToken(stablePoolsDetail, tokenIn.id)) {\n    // first hop will be through stable pool.\n    pools1 = stablePools.filter(pool => pool.tokenIds.includes(tokenIn.id));\n\n    const otherStables = pools1\n      .map(pool => pool.tokenIds.filter(id => id !== tokenIn.id))\n      .flat();\n\n    for (var otherStable of otherStables) {\n      let stablePoolsThisPair = getStablePoolsThisPair({\n        tokenInId: otherStable,\n        tokenOutId: tokenOut.id,\n        stablePools,\n      });\n\n      let tmpPools = getPoolsByTokens({\n        tokenInId: otherStable,\n        tokenOutId: tokenOut.id,\n        pools: simplePools,\n      });\n      const tobeAddedPools = tmpPools.concat(stablePoolsThisPair);\n      pools2.push(\n        ...tobeAddedPools.filter(p => {\n          const supplies = Object.values(p.supplies);\n          return new Big(supplies[0]).times(new Big(supplies[1])).gt(0);\n        })\n      );\n    }\n  }\n\n  if (isStablePoolToken(stablePoolsDetail, tokenOut.id)) {\n    // second hop will be through stable pool.\n    pools2Right = stablePools.filter(pool =>\n      pool.tokenIds.includes(tokenOut.id)\n    );\n\n    const otherStables = pools2Right\n      .map(pool => pool.tokenIds.filter(id => id !== tokenOut.id))\n      .flat();\n    for (let otherStable of otherStables) {\n      let stablePoolsThisPair = getStablePoolsThisPair({\n        tokenInId: tokenIn.id,\n        tokenOutId: otherStable,\n        stablePools,\n      });\n\n      let tmpPools = getPoolsByTokens({\n        tokenInId: tokenIn.id,\n        tokenOutId: otherStable,\n        pools: simplePools,\n      });\n\n      const tobeAddedPools = tmpPools.concat(stablePoolsThisPair);\n\n      pools1Right.push(\n        ...tobeAddedPools.filter(p => {\n          const supplies = Object.values(p.supplies);\n          return new Big(supplies[0]).times(new Big(supplies[1])).gt(0);\n        })\n      );\n    }\n  }\n\n  // find candidate pools\n\n  for (let p1 of pools1) {\n    let middleTokens = p1.tokenIds.filter((id: string) => id !== tokenIn.id);\n    for (let middleToken of middleTokens) {\n      let p2s = pools2.filter(\n        p =>\n          p.tokenIds.includes(middleToken) &&\n          p.tokenIds.includes(tokenOut.id) &&\n          middleToken !== tokenOut.id\n      );\n      let p2 = _.maxBy(p2s, p =>\n        Number(\n          new Big(toReadableNumber(tokenOut.decimals, p.supplies[tokenOut.id]))\n        )\n      );\n\n      if (middleToken === tokenOut.id) {\n        p2 = p1;\n      }\n\n      if (p1 && p2) {\n        if (p1.id === p2.id) candidatePools.push([p1]);\n        else candidatePools.push([p1, p2]);\n      }\n    }\n  }\n  for (let p1 of pools1Right) {\n    let middleTokens = p1.tokenIds.filter((id: string) => id !== tokenIn.id);\n    for (let middleToken of middleTokens) {\n      let p2s = pools2Right.filter(\n        p =>\n          p.tokenIds.includes(middleToken) &&\n          p.tokenIds.includes(tokenOut.id) &&\n          middleToken !== tokenOut.id\n      );\n      let p2 = _.maxBy(p2s, p =>\n        Number(\n          new Big(toReadableNumber(tokenOut.decimals, p.supplies[tokenOut.id]))\n        )\n      );\n\n      if (middleToken === tokenOut.id) {\n        p2 = p1;\n      }\n\n      if (p1 && p2) {\n        if (p1.id === p2.id) candidatePools.push([p1]);\n        else candidatePools.push([p1, p2]);\n      }\n    }\n  }\n\n  if (candidatePools.length > 0) {\n    const tokensMedata = await ftGetTokensMetadata(\n      candidatePools.map(cp => cp.map(p => p.tokenIds).flat()).flat()\n    );\n\n    const BestPoolPair =\n      candidatePools.length === 1\n        ? candidatePools[0]\n        : _.maxBy(candidatePools, poolPair => {\n            // only one pool case, only for stable tokens\n            if (poolPair.length === 1) {\n              if (isStablePool(stablePoolsDetail, poolPair[0].id)) {\n                const stablePoolThisPair = getStablePoolsThisPair({\n                  tokenInId: tokenIn.id,\n                  tokenOutId: tokenOut.id,\n                  stablePools,\n                })[0];\n\n                const stablePoolDetailThisPair = stablePoolsDetail.find(\n                  spd => spd.id === stablePoolThisPair.id\n                );\n\n                return Number(\n                  getStablePoolEstimate({\n                    tokenIn,\n                    tokenOut,\n                    stablePool: stablePoolDetailThisPair as StablePool,\n                    amountIn,\n                  }).estimate\n                );\n              } else {\n                return Number(\n                  getSimplePoolEstimate({\n                    tokenIn,\n                    tokenOut,\n                    amountIn,\n                    pool: poolPair[0],\n                  }).estimate\n                );\n              }\n            }\n\n            const [tmpPool1, tmpPool2] = poolPair;\n            const tokenMidId = poolPair[0].tokenIds.find((t: string) =>\n              poolPair[1].tokenIds.includes(t)\n            ) as string;\n\n            const tokenMidMeta = tokensMedata[tokenMidId];\n\n            const estimate1 = {\n              ...(isStablePool(stablePoolsDetail, tmpPool1.id)\n                ? getStablePoolEstimate({\n                    tokenIn,\n                    tokenOut: tokenMidMeta,\n                    amountIn,\n                    stablePool: stablePoolsDetailById[tmpPool1.id],\n                  })\n                : getSimplePoolEstimate({\n                    tokenIn,\n                    tokenOut: tokenMidMeta,\n                    amountIn,\n                    pool: tmpPool1,\n                  })),\n            };\n\n            const estimate2 = {\n              ...(isStablePool(stablePoolsDetail, tmpPool2.id)\n                ? getStablePoolEstimate({\n                    tokenIn: tokenMidMeta,\n                    tokenOut,\n                    amountIn: estimate1.estimate,\n                    stablePool: stablePoolsDetailById[tmpPool2.id],\n                  })\n                : getSimplePoolEstimate({\n                    tokenIn: tokenMidMeta,\n                    tokenOut,\n                    pool: tmpPool2,\n                    amountIn: estimate1.estimate,\n                  })),\n            };\n\n            return Number(estimate2.estimate);\n          });\n\n    // one pool case only get best price\n\n    if (!BestPoolPair) return { actions: [], estimate: '0' };\n\n    if (BestPoolPair.length === 1) {\n      const bestPool = BestPoolPair[0];\n      const estimate = await getPoolEstimate({\n        tokenIn,\n        tokenOut,\n        amountIn,\n        pool: bestPool,\n        stablePoolDetail: stablePoolsDetailById[bestPool.id],\n      });\n\n      return {\n        actions: [\n          {\n            ...estimate,\n            pool: { ...bestPool, parsedAmountIn: parsedAmountIn },\n            tokens: [tokenIn, tokenOut],\n            inputToken: tokenIn.id,\n            outputToken: tokenOut.id,\n            totalInputAmount: toNonDivisibleNumber(tokenIn.decimals, amountIn),\n          },\n        ],\n        estimate: estimate.estimate,\n      };\n    }\n\n    // two pool case get best price\n    [pool1, pool2] = BestPoolPair;\n\n    const tokenMidId = BestPoolPair[0].tokenIds.find((t: string) =>\n      BestPoolPair[1].tokenIds.includes(t)\n    ) as string;\n\n    const tokenMidMeta = await ftGetTokenMetadata(tokenMidId);\n\n    const estimate1 = {\n      ...(isStablePool(stablePoolsDetail, pool1.id)\n        ? getStablePoolEstimate({\n            tokenIn,\n            tokenOut: tokenMidMeta,\n            amountIn,\n            stablePool: stablePoolsDetailById[pool1.id],\n          })\n        : getSimplePoolEstimate({\n            tokenIn,\n            tokenOut: tokenMidMeta,\n            amountIn,\n            pool: pool1,\n          })),\n      tokens: [tokenIn, tokenMidMeta, tokenOut],\n      inputToken: tokenIn.id,\n      outputToken: tokenMidMeta.id,\n    };\n\n    estimate1.pool.partialAmountIn = parsedAmountIn;\n\n    const estimate2 = {\n      ...(isStablePool(stablePoolsDetail, pool2.id)\n        ? getStablePoolEstimate({\n            tokenIn: tokenMidMeta,\n            tokenOut,\n            amountIn: estimate1.estimate,\n            stablePool: stablePoolsDetailById[pool2.id],\n          })\n        : getSimplePoolEstimate({\n            tokenIn: tokenMidMeta,\n            tokenOut,\n            amountIn: estimate1.estimate,\n            pool: pool2,\n          })),\n\n      tokens: [tokenIn, tokenMidMeta, tokenOut],\n      inputToken: tokenMidMeta.id,\n      outputToken: tokenOut.id,\n    };\n\n    return { actions: [estimate1, estimate2], estimate: estimate2.estimate };\n  }\n\n  return { actions: [], estimate: '0' };\n}\n\n// simple pools and stable pools for this pair\nexport const estimateSwap = async ({\n  tokenIn,\n  tokenOut,\n  amountIn,\n  simplePools,\n  options,\n}: SwapParams) => {\n  if (tokenIn.id === tokenOut.id) throw SameInputTokenError;\n\n  if (ONLY_ZEROS.test(amountIn)) throw ZeroInputError;\n\n  const { enableSmartRouting, stablePools, stablePoolsDetail } = options || {};\n\n  const parsedAmountIn = toNonDivisibleNumber(tokenIn.decimals, amountIn);\n\n  if (!enableSmartRouting) {\n    const estimate = singlePoolSwap({\n      tokenIn,\n      tokenOut,\n      simplePools,\n      amountIn,\n      stablePools: stablePoolsDetail,\n    });\n\n    console.log(estimate, 'estimate');\n\n    return [\n      {\n        ...estimate,\n        pool: { ...estimate?.pool, partialAmountIn: parsedAmountIn },\n      },\n    ] as EstimateSwapView[];\n  } else {\n    const inputPools = simplePools.map(p => poolFormatter(p));\n\n    const simplePoolSmartRoutingActions = await stableSmart(\n      inputPools,\n      tokenIn.id,\n      tokenOut.id,\n      parsedAmountIn\n    );\n\n    const simplePoolSmartRoutingEstimate = getExpectedOutputFromActionsORIG(\n      simplePoolSmartRoutingActions,\n      tokenOut.id\n    ).toString();\n\n    const hybridSmartRoutingRes = await getHybridStableSmart(\n      tokenIn,\n      tokenOut,\n      amountIn,\n      stablePools || [],\n      stablePoolsDetail || [],\n      simplePools\n    );\n\n    const hybridSmartRoutingEstimate = hybridSmartRoutingRes.estimate.toString();\n\n    if (\n      new Big(simplePoolSmartRoutingEstimate || '0').gte(\n        hybridSmartRoutingEstimate || '0'\n      )\n    ) {\n      if (!simplePoolSmartRoutingActions?.length) throw NoPoolError;\n      return simplePoolSmartRoutingActions as EstimateSwapView[];\n    } else {\n      return hybridSmartRoutingRes.actions as EstimateSwapView[];\n    }\n  }\n};\n"],"names":["FEE_DIVISOR","STABLE_LP_TOKEN_DECIMALS","RATED_POOL_LP_TOKEN_DECIMALS","getConfig","env","process","NEAR_ENV","networkId","nodeUrl","walletUrl","WRAP_NEAR_CONTRACT_ID","REF_FI_CONTRACT_ID","config","STORAGE_TO_REGISTER_WITH_MFT","ONE_YOCTO_NEAR","formatError","msg","Error","unNamedError","SameInputTokenError","ZeroInputError","NoPoolError","NotLoginError","SwapRouteError","TokenNotExistError","NoPuiblicKeyError","NoLocalSignerError","InValidAccessKeyError","AccountIdMisMatch","NoCredential","parsePool","pool","id","Number","tokenIds","token_account_ids","supplies","amounts","reduce","acc","amount","i","fee","total_fee","shareSupply","shares_total_supply","tvl","token0_ref_price","pool_kind","poolFormatter","token1Id","token2Id","token1Supply","token2Supply","shares","token0_price","isStablePoolToken","stablePools","tokenId","map","p","flat","includes","toString","isStablePool","poolId","getStablePoolDecimal","stablePool","round","decimals","minAmountOut","isInteger","Math","ceil","pow","convertToPercentDecimal","percent","math","percentOf","num","percentLess","notation","getGas","gas","BN","getAmount","utils","format","parseNearAmount","ONLY_ZEROS","toReadableNumber","number","wholeStr","substring","length","fractionStr","padStart","replace","toNonDivisibleNumber","undefined","split","wholePart","fracPart","padEnd","slice","scientificNotationToString","strParam","flag","test","sysbol","negative","index","match","basis","ifFraction","formatWithCommas","value","pattern","toPrecision","precision","withCommas","atLeastOne","whole","decimal","str","n","lastIndexOf","transformTransactions","transactions","AccountId","t","signerId","receiverId","actions","functionCalls","fc","type","params","methodName","args","toNumber","toFixed","deposit","getKeyStore","window","keyStores","InMemoryKeyStore","BrowserLocalStorageKeyStore","provider","providers","JsonRpcProvider","url","getMemorySigner","keyPath","homedir","os","credentials","JSON","parse","fs","readFileSync","credentialAccountId","account_id","myKeyStore","setKey","KeyPair","fromString","private_key","signer","InMemorySigner","validateAccessKey","transaction","accessKey","permission","FunctionCall","receiver_id","method_names","every","action","parseFloat","getSignedTransactionsByMemoryKey","transactionsRef","block","finality","signedTransactions","getPublicKey","publicKey","query","request_type","public_key","tx","nearTransactions","createTransaction","PublicKey","from","nonce","functionCall","serialize","base_decode","header","hash","signTransaction","signedTx","push","sendTransactionsByMemoryKey","results","sendTransaction","near","Near","keyStore","headers","refFiViewFunction","account","nearConnection","viewFunction","ftViewFunction","ftGetStorageBalance","getTotalPools","ftGetTokenMetadata","metadata","ftGetTokensMetadata","Promise","all","tokensMetadata","pre","cur","instantSwap","tokenIn","tokenOut","amountIn","slippageTolerance","swapTodos","at","outputToken","registerToken","token","tokenRegistered","registration_only","actionsList","allSwapsTokens","s","inputToken","swapTokens","pool_id","token_in","token_out","amount_in","partialAmountIn","min_amount_out","estimate","stringify","force","registered","DEFAULT_PAGE_LIMIT","getRatedPoolDetail","then","pool_info","getUnRatedPoolDetail","rates","c_amounts","_","getStablePools","getRefPools","page","perPage","from_index","limit","poolData","rawPool","fetchAllPools","totalPools","pages","Array","fill","pools","simplePools","filter","unRatedPools","ratedPools","tradeFee","trade_fee","calc_d","amp","token_num","sum_amounts","sum","d_prev","d","d_prod","c_amount","ann","numerator","denominator","abs","calc_y","x_c_amount","current_c_amounts","index_x","index_y","c","b","y_prev","y","y_numerator","y_denominator","calc_swap","in_token_idx","in_c_amount","out_token_idx","old_c_amounts","dy","amount_swapped","getSwappedAmount","tokenInId","tokenOutId","findIndex","r","base_old_c_amounts","Big","times","RM","DP","NE","PE","checkIntegerSumOfAllocations","allocations","totalInput","item","alloSum","a","plus","offset","minus","currMax","currMaxInd","gt","newAllocations","j","yenFromPy","bisqrt","BigInt","newtonIteration","x0","x1","getBetaForRoute","route","path","beta","reserves","p1","p2","getEpsilonForRoute","gamma","div","epsilon","gamma1","gamma2","getAlphaForRoute","key1","key2","val1","val2","alpha","key11","key12","val11","val12","key21","key22","val21","val22","middleToken","alpha1","alpha2","getAlphaSumFromRoutes","routes","nodeRoutes","alphaSum","nodeRoute","radical","denom","getBetaSumFromRoutes","betaSum","getPhiFromRoutes","phi","getAllocationForRoute","allocation","getAllocationVectorForRoutes","allocationVec","getOptimalAllocationForRoutes","lt","some","reduceRoutes","sumAllocations","normalizedAllocations","goodIndices","dx","newRoutes","newNodeRoutes","goodIndex","allocationDict","allocationVecNew","zeroAllocation","getNodeRoutesFromPathsAndPoolChains","paths","poolChains","multiplicity","pc","mul","elem1","elem2","m","k","getPoolChainFromPaths","threshold","pathInd","chain","pairs","pairInd","pair","tokenPools","getPoolsByToken1ANDToken2","culledPoolChains","getCulledPoolChains","newChains","newPath","legInd","leg","culledPath","cullPoolsWithInsufficientLiquidity","getRoutesFromPoolChain","pci","poolChain","cartesianProduct","getOutputSingleHop","getOutputDoubleHop","poolIndex","c1","a1","c2","b2","getOutputFromRoute","eq","output","getOptOutputVec","result","getBestOptInputAndOutput","rawDict","outputRaw","inputRaw","res1","res2","res","v","bv1","bv2","input","getBestOptimalAllocationsAndOutputs","maxPathLength","getPathsFromPools","outputs","inputOutput","getHopActionsFromRoutes","hops","hop","allRoutes","allNodeRoutes","totalInputAmount","allAllocations","middleTokenAllocation","getActionListFromRoutesAndAllocations","getSmartRouteSwapActions","numberOfRoutesLimit","MAX_NUMBER_PARALLEL_POOLS","decimalsCulledPoolIds","resDict","sortedIndexValues","argsort","topIndices","reducedRoutes","reducedNodeRoutes","ind","currentBestOutput","bestAllocations","bestNodeRoutes","bestRoutes","parallelNodeRoutes","parallelRoutes","currentNodeRoute","bestRoutesAreParallel","filteredAllocationsAndOutputs","parallellAllocations","parallelOutputs","sortIndices","filteredParallelRoutes","filteredParallelNodeRoutes","parallelOutput","canHaveTwoRoutes","route1","route2","nodeRoute1","nodeRoute2","route1PoolIds","Set","route2PoolIds","sharePool","route1PoolId","has","currentRoutes","currentNodeRoutes","filteredAllocations","filteredOutputs","totalOutput","allSortedIndices","sortedIndices","filteredRoutes","filteredNodeRoutes","sharedRoute","allFilteredRoutes","allFilteredNodeRoutes","firstRoute","firstRoutePoolIds","allFilteredRouteIds","secondRoute","stringAllo","hopInputTokenMeta","hopOutputTokenMeta","hopOutputTokenDecimals","expectedHopOutput","decimalEstimate","status","tokens","gamma_bps","Dex","routeInputToken","routeOutputToken","overallPriceImpact","x","calculateSmartRouteV2PriceImpact","deltaY","inputTokenMeta","deltaX","R","P","totalAllocations","weights","weight","routeMarketPrice","num1","denom1","num2","denom2","priceImpact","decor","arr","undecor","decorated","sort","token1","token2","cullZeroLiquidityPools","filteredPools","getLiqudityOfPoolsFromList","liquidities","poolInd","poolBigAmounts","liquidity","getNormalizedLiquiditiesFromList","maxLiq","bigMax","normalizedLiquidities","arrayOfBigs","maxElem","val","thresh","normLiq","flatMap","e","addEdge","g","edge","src","dst","Object","keys","addEdges","edgeList","deleteEdge","gNew","e1","e2","deleteNode","node","nodeInd","nodeNow","dijkstra","graph","solutions","dist","parent","nearest","Infinity","ndist","adj","concat","shortestPath","ignore_nodes","ignore_edges","gTemp","edgeInd","edgeNow","solution","unshift","PathBuffer","sortedpaths","len","cost","arrayContains","pop","shift","splice","indexOf","arrayEquals","isArray","obj","obj_json","itemInd","source","target","listA","listB","prev_path","sol","root","root_length","edgeToIgnore","spur","getKShortestPaths","gen","next","getGraphFromPoolList","poolList","transitions","stableSmart","smartRouteActions","getExpectedOutputFromActionsORIG","getSimplePoolEstimate","amount_with_fee","in_balance","out_balance","getStablePoolEstimate","amountOut","isNaN","dyOut","noFeeAmountOut","singlePoolSwap","simplePoolsThisPair","estimatesSimplePool","stablePoolThisPair","sp","estimatesStablePool","maxSimplePoolEstimate","maxBy","maxStablePoolEstimate","getStablePoolsThisPair","getPoolsByTokens","getPoolEstimate","stablePoolDetail","getHybridStableSmart","stablePoolsDetail","stablePoolsDetailById","parsedAmountIn","pools1","pools2","pools1Right","pools2Right","candidatePools","otherStables","otherStable","stablePoolsThisPair","tmpPools","tobeAddedPools","values","middleTokens","p2s","cp","tokensMedata","BestPoolPair","poolPair","stablePoolDetailThisPair","find","spd","tmpPool1","tmpPool2","tokenMidId","tokenMidMeta","estimate1","estimate2","bestPool","pool1","pool2","estimateSwap","options","enableSmartRouting","console","log","inputPools","simplePoolSmartRoutingActions","simplePoolSmartRoutingEstimate","hybridSmartRoutingRes","hybridSmartRoutingEstimate","gte"],"mappings":"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"}