import"big.js";import{invariant as e}from"../../utils/errorChecker.js";import"../../constants/envVariables.js";import"../../constants/numbers.js";import"ethers";import"../../utils/tick.js";import{poll as t}from"../../utils/poll.js";import{ContractName as r}from"../../contracts/Contracts.js";import{UnauthorizedError as a}from"../../errors/errors.js";import{getTransaction as o}from"../../transactionSender/index.js";import{Channel as n}from"../../internal/Channel.js";import{ChannelEventSource as c}from"../../internal/ChannelEventSource.js";import{createMemoizedFetcher as i}from"../../internal/createMemoizedFetcher.js";import{DEFAULT_PERIOD as s}from"../../internal/config.js";class p extends n{constructor(e,t){super(e.channelRegistry),this._perp=e,this._cache=new Map,this._contractReader=e.contractReader,this._account=e.wallet.account,this.delegate=t?t.delegate:e.metadata.contracts.LimitOrderBook.address}async approveOpenPosition(){const e=await this._perp.contractReader.getClearingHouseOpenPositionAction();return this.approve(e)}async revokeOpenPosition(){const e=await this._perp.contractReader.getClearingHouseOpenPositionAction();return this.revoke(e)}async approve(t){return e(this._perp.hasConnected(),(()=>new a({functionName:"approve"}))),o({account:this._perp.wallet.account,contract:this._perp.contracts.delegateApproval,contractName:r.DelegateApproval,contractFunctionName:"approve",args:[this.delegate,t]})}async revoke(t){return e(this._perp.hasConnected(),(()=>new a({functionName:"revoke"}))),o({account:this._perp.wallet.account,contract:this._perp.contracts.delegateApproval,contractName:r.DelegateApproval,contractFunctionName:"revoke",args:[this.delegate,t]})}async delegateApprovalForOpenPosition({cache:e=!0}={}){return await this._fetch("openPosition",{cache:e})}_getEventSourceMap(){const e=this._createFetchAndEmitDelegateApprovalUpdated();return{delegateApprovalUpdated:new c({eventSourceStarter:()=>{var r,a;return t(e,(null===(a=null===(r=this._perp.moduleConfigs)||void 0===r?void 0:r.delegateApproval)||void 0===a?void 0:a.period)||s).cancel},initEventEmitter:()=>e(!0,!0)})}}async _fetchUpdateData(e){try{return await e()}catch(e){this.emit("updateError",{error:e})}}async _fetch(e,{cache:t=!0}={}){if(this._cache.has(e)&&t)return this._cache.get(e);let r;if("openPosition"===e)r=await this._contractReader.canOpenPositionFor(this._account,this.delegate);return this._cache.set(e,r),r}_createFetchAndEmitDelegateApprovalUpdated(){return i((()=>this._fetchUpdateData((()=>this._fetch("openPosition",{cache:!1})))),(()=>this.emit("delegateApprovalUpdated",this)),((e,t)=>e!==t))}}export{p as DelegateApproval};
//# sourceMappingURL=DelegateApproval.js.map
