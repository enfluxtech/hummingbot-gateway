// package: injective.tokenfactory.v1beta1
// file: injective/tokenfactory/v1beta1/genesis.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../../gogoproto/gogo_pb";
import * as injective_tokenfactory_v1beta1_authorityMetadata_pb from "../../../injective/tokenfactory/v1beta1/authorityMetadata_pb";
import * as injective_tokenfactory_v1beta1_params_pb from "../../../injective/tokenfactory/v1beta1/params_pb";

export class GenesisState extends jspb.Message {
  hasParams(): boolean;
  clearParams(): void;
  getParams(): injective_tokenfactory_v1beta1_params_pb.Params | undefined;
  setParams(value?: injective_tokenfactory_v1beta1_params_pb.Params): void;

  clearFactoryDenomsList(): void;
  getFactoryDenomsList(): Array<GenesisDenom>;
  setFactoryDenomsList(value: Array<GenesisDenom>): void;
  addFactoryDenoms(value?: GenesisDenom, index?: number): GenesisDenom;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenesisState.AsObject;
  static toObject(includeInstance: boolean, msg: GenesisState): GenesisState.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenesisState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenesisState;
  static deserializeBinaryFromReader(message: GenesisState, reader: jspb.BinaryReader): GenesisState;
}

export namespace GenesisState {
  export type AsObject = {
    params?: injective_tokenfactory_v1beta1_params_pb.Params.AsObject,
    factoryDenomsList: Array<GenesisDenom.AsObject>,
  }
}

export class GenesisDenom extends jspb.Message {
  getDenom(): string;
  setDenom(value: string): void;

  hasAuthorityMetadata(): boolean;
  clearAuthorityMetadata(): void;
  getAuthorityMetadata(): injective_tokenfactory_v1beta1_authorityMetadata_pb.DenomAuthorityMetadata | undefined;
  setAuthorityMetadata(value?: injective_tokenfactory_v1beta1_authorityMetadata_pb.DenomAuthorityMetadata): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): GenesisDenom.AsObject;
  static toObject(includeInstance: boolean, msg: GenesisDenom): GenesisDenom.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: GenesisDenom, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): GenesisDenom;
  static deserializeBinaryFromReader(message: GenesisDenom, reader: jspb.BinaryReader): GenesisDenom;
}

export namespace GenesisDenom {
  export type AsObject = {
    denom: string,
    authorityMetadata?: injective_tokenfactory_v1beta1_authorityMetadata_pb.DenomAuthorityMetadata.AsObject,
  }
}

