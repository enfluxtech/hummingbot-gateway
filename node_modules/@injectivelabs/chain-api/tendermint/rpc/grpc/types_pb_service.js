// package: tendermint.rpc.grpc
// file: tendermint/rpc/grpc/types.proto

var tendermint_rpc_grpc_types_pb = require("../../../tendermint/rpc/grpc/types_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var BroadcastAPI = (function () {
  function BroadcastAPI() {}
  BroadcastAPI.serviceName = "tendermint.rpc.grpc.BroadcastAPI";
  return BroadcastAPI;
}());

BroadcastAPI.Ping = {
  methodName: "Ping",
  service: BroadcastAPI,
  requestStream: false,
  responseStream: false,
  requestType: tendermint_rpc_grpc_types_pb.RequestPing,
  responseType: tendermint_rpc_grpc_types_pb.ResponsePing
};

BroadcastAPI.BroadcastTx = {
  methodName: "BroadcastTx",
  service: BroadcastAPI,
  requestStream: false,
  responseStream: false,
  requestType: tendermint_rpc_grpc_types_pb.RequestBroadcastTx,
  responseType: tendermint_rpc_grpc_types_pb.ResponseBroadcastTx
};

exports.BroadcastAPI = BroadcastAPI;

function BroadcastAPIClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

BroadcastAPIClient.prototype.ping = function ping(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BroadcastAPI.Ping, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

BroadcastAPIClient.prototype.broadcastTx = function broadcastTx(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(BroadcastAPI.BroadcastTx, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.BroadcastAPIClient = BroadcastAPIClient;

