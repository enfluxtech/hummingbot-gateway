{"version":3,"file":"Vault.js","sources":["../../../../src/core/vault/Vault.ts"],"sourcesContent":["import Big from \"big.js\"\n\nimport { COLLATERAL_TOKEN_DECIMAL, ETH_DECIMAL_DIGITS, SETTLEMENT_TOKEN_DECIMAL } from \"../../constants\"\nimport { ContractName } from \"../../contracts\"\nimport { Vault as ContractVault } from \"../../contracts/type\"\nimport { UnauthorizedError } from \"../../errors\"\nimport {\n    Channel,\n    ChannelEventSource,\n    createMemoizedFetcher,\n    DEFAULT_PERIOD,\n    hasNumberArrChange,\n    hasNumberChange,\n    MemoizedFetcher,\n} from \"../../internal\"\nimport { getTransaction } from \"../../transactionSender\"\nimport { big2BigNumberAndScaleUp, bigNumber2BigAndScaleDown, invariant, logger, poll } from \"../../utils\"\nimport { ContractCall, ContractReader, MulticallReader } from \"../contractReader\"\nimport { NonSettlementCollateralToken } from \"../wallet/NonSettlementCollateralToken\"\nimport { SettlementToken } from \"../wallet/SettlementToken\"\n\nimport type { PerpetualProtocol } from \"../PerpetualProtocol\"\nexport type VaultEventName =\n    | \"updated\"\n    | \"accountValueUpdated\"\n    | \"balanceListUpdated\"\n    | \"freeCollateralUpdated\"\n    | \"freeCollateralListUpdated\"\n    | \"updatedVaultDataAll\"\n    | \"updateError\"\n\ntype CacheKey = \"accountValue\" | \"balanceList\" | \"freeCollateral\" | \"freeCollateralList\"\ntype CacheValue = Big | Big[] | string[]\n\nclass Vault extends Channel<VaultEventName> {\n    // NOTE: private properties\n    private readonly _contract: ContractVault\n    private readonly _contractReader: ContractReader\n    private _cache: Map<CacheKey, CacheValue> = new Map()\n\n    // NOTE: constructor\n    constructor(private readonly _perp: PerpetualProtocol, readonly account: string) {\n        super(_perp.channelRegistry)\n        this._contractReader = _perp.contractReader\n        this._contract = this._contractReader.contracts.vault\n    }\n\n    // NOTE: public methods\n    async getAccountValue({ cache = true } = {}) {\n        return await this._fetch(\"accountValue\", { cache })\n    }\n\n    async getBalanceList({ cache = true } = {}) {\n        return await this._fetch(\"balanceList\", { cache })\n    }\n\n    async getFreeCollateral({ cache = true } = {}) {\n        return await this._fetch(\"freeCollateral\", { cache })\n    }\n\n    async getFreeCollateralList({ cache = true } = {}) {\n        return await this._fetch(\"freeCollateralList\", { cache })\n    }\n\n    async deposit(token: NonSettlementCollateralToken | SettlementToken, amount: Big) {\n        const address = token.address\n        const decimals = await token.decimals()\n        return getTransaction<ContractVault, \"deposit\">({\n            account: this.account,\n            contract: this._contract,\n            contractName: ContractName.VAULT,\n            contractFunctionName: \"deposit\",\n            args: [address, big2BigNumberAndScaleUp(amount, decimals)],\n        })\n    }\n\n    async depositETH(amount: Big) {\n        return getTransaction<ContractVault, \"depositEther\">({\n            value: big2BigNumberAndScaleUp(amount, ETH_DECIMAL_DIGITS),\n            account: this.account,\n            contract: this._contract,\n            contractName: ContractName.VAULT,\n            contractFunctionName: \"depositEther\",\n            args: [],\n        })\n    }\n\n    async withdraw(token: NonSettlementCollateralToken | SettlementToken, amount: Big) {\n        const address = token.address\n        const decimals = await token.decimals()\n        return getTransaction<ContractVault, \"withdraw\">({\n            account: this.account,\n            contract: this._contract,\n            contractName: ContractName.VAULT,\n            contractFunctionName: \"withdraw\",\n            args: [address, big2BigNumberAndScaleUp(amount, decimals)],\n        })\n    }\n\n    async withdrawETH(amount: Big) {\n        return getTransaction<ContractVault, \"withdrawEther\">({\n            account: this.account,\n            contract: this._contract,\n            contractName: ContractName.VAULT,\n            contractFunctionName: \"withdrawEther\",\n            args: [big2BigNumberAndScaleUp(amount, ETH_DECIMAL_DIGITS)],\n        })\n    }\n\n    async withdrawAll(token: NonSettlementCollateralToken | SettlementToken) {\n        const address = token.address\n        return getTransaction<ContractVault, \"withdrawAll\">({\n            account: this.account,\n            contract: this._contract,\n            contractName: ContractName.VAULT,\n            contractFunctionName: \"withdrawAll\",\n            args: [address],\n        })\n    }\n\n    async withdrawAllEther() {\n        return getTransaction<ContractVault, \"withdrawAllEther\">({\n            account: this.account,\n            contract: this._contract,\n            contractName: ContractName.VAULT,\n            contractFunctionName: \"withdrawAllEther\",\n            args: [],\n        })\n    }\n\n    // NOTE: protected methods\n    protected _getEventSourceMap() {\n        const fetchAndEmitAccountValueUpdated = this._createFetchAndEmitAccountValueUpdated()\n        const accountValueUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitAccountValueUpdated, this._perp.moduleConfigs?.vault?.period || DEFAULT_PERIOD).cancel,\n            initEventEmitter: () => fetchAndEmitAccountValueUpdated(true, true),\n        })\n\n        const fetchAndEmitBalanceListUpdated = this._createFetchAndEmitBalanceListUpdated()\n        const balanceListUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitBalanceListUpdated, this._perp.moduleConfigs?.vault?.period || DEFAULT_PERIOD).cancel,\n            initEventEmitter: () => fetchAndEmitBalanceListUpdated(true, true),\n        })\n\n        const fetchAndEmitFreeCollateralUpdated = this._createFetchAndEmitFreeCollateralUpdated()\n        const freeCollateralUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitFreeCollateralUpdated, this._perp.moduleConfigs?.vault?.period || DEFAULT_PERIOD)\n                    .cancel,\n            initEventEmitter: () => fetchAndEmitFreeCollateralUpdated(true, true),\n        })\n\n        const fetchAndEmitFreeCollateralListUpdated = this._createFetchAndEmitFreeCollateralListUpdated()\n        const freeCollateralListUpdated = new ChannelEventSource({\n            eventSourceStarter: () =>\n                poll(fetchAndEmitFreeCollateralListUpdated, this._perp.moduleConfigs?.vault?.period || DEFAULT_PERIOD)\n                    .cancel,\n            initEventEmitter: () => fetchAndEmitFreeCollateralListUpdated(true, true),\n        })\n\n        // NOTE: getVaultDataAll\n        const fetchAndEmitUpdatedVaultDataAll = this.getVaultDataAll.bind(this)\n        const updateDataEventSourceVaultDataAll = new ChannelEventSource({\n            eventSourceStarter: () => {\n                return poll(fetchAndEmitUpdatedVaultDataAll, this._perp.moduleConfigs?.vault?.period || DEFAULT_PERIOD)\n                    .cancel\n            },\n            initEventEmitter: () => fetchAndEmitUpdatedVaultDataAll(),\n        })\n\n        return {\n            accountValueUpdated,\n            balanceListUpdated,\n            freeCollateralUpdated,\n            freeCollateralListUpdated,\n            // NOTE: getVaultDataAll\n            updatedVaultDataAll: updateDataEventSourceVaultDataAll,\n        }\n    }\n\n    // NOTE: private methods\n    private async _fetchUpdateData<T>(fetcher: () => Promise<T>) {\n        try {\n            return await fetcher()\n        } catch (error) {\n            this.emit(\"updateError\", { error })\n        }\n    }\n\n    private async _fetch(key: \"accountValue\", obj?: { cache: boolean }): Promise<Big>\n    private async _fetch(key: \"balanceList\", obj?: { cache: boolean }): Promise<Big[]>\n    private async _fetch(key: \"freeCollateral\", obj?: { cache: boolean }): Promise<Big>\n    private async _fetch(key: \"freeCollateralList\", obj?: { cache: boolean }): Promise<Big[]>\n    private async _fetch(key: CacheKey, { cache = true } = {}) {\n        if (this._cache.has(key) && cache) {\n            return this._cache.get(key) as CacheValue\n        }\n\n        let result\n        switch (key) {\n            case \"accountValue\": {\n                result = await this._contractReader.getAccountValue(this.account)\n                break\n            }\n            case \"balanceList\": {\n                invariant(this._perp.hasConnected(), () => new UnauthorizedError({ functionName: \"balanceList\" }))\n                result = await Promise.all(\n                    this._perp.wallet.collateralTokenList.map(token => {\n                        if (token instanceof SettlementToken) {\n                            return this._contractReader.getVaultBalanceOfSettlementToken(this.account)\n                        } else {\n                            return this._contractReader.getVaultBalanceByToken(this.account, token)\n                        }\n                    }),\n                )\n                break\n            }\n            case \"freeCollateral\": {\n                result = await this._contractReader.getFreeCollateral(this.account)\n                break\n            }\n            case \"freeCollateralList\": {\n                invariant(\n                    this._perp.hasConnected(),\n                    () => new UnauthorizedError({ functionName: \"freeCollateralList\" }),\n                )\n                result = await Promise.all(\n                    this._perp.wallet.collateralTokenList.map(token => {\n                        return this._contractReader.getFreeCollateralByToken(this.account, token)\n                    }),\n                )\n                break\n            }\n        }\n        this._cache.set(key, result)\n\n        return result\n    }\n\n    private _createFetchAndEmitAccountValueUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this.getAccountValue({ cache: false })),\n            () => {\n                this.emit(\"accountValueUpdated\", this)\n                this.emit(\"updated\", this)\n            },\n            (a, b) => (a && b ? hasNumberChange(a, b) : true),\n        )\n    }\n\n    private _createFetchAndEmitBalanceListUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this.getBalanceList({ cache: false })),\n            () => {\n                this.emit(\"balanceListUpdated\", this)\n            },\n            (a, b) => (a && b ? hasNumberArrChange(a, b) : true),\n        )\n    }\n\n    private _createFetchAndEmitFreeCollateralUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this.getFreeCollateral({ cache: false })),\n            () => {\n                this.emit(\"freeCollateralUpdated\", this)\n                this.emit(\"updated\", this)\n            },\n            (a, b) => (a && b ? hasNumberChange(a, b) : true),\n        )\n    }\n\n    private _createFetchAndEmitFreeCollateralListUpdated(): MemoizedFetcher {\n        return createMemoizedFetcher(\n            () => this._fetchUpdateData(() => this.getFreeCollateralList({ cache: false })),\n            () => {\n                this.emit(\"freeCollateralListUpdated\", this)\n            },\n            (a, b) => (a && b ? hasNumberArrChange(a, b) : true),\n        )\n    }\n\n    protected async getVaultDataAll() {\n        try {\n            invariant(this._perp.hasConnected(), () => new UnauthorizedError({ functionName: \"getVaultDataAll\" }))\n            logger(\"getVaultDataAll\")\n\n            const account = this._perp.wallet.account\n            const contracts = this._perp.contracts\n            const collateralTokenList = this._perp.wallet.collateralTokenList\n            const multicall2 = new MulticallReader({ contract: contracts.multicall2 })\n\n            // NOTE: key = collateral address, value = call[]\n            const callsMap: Record<string, ContractCall[]> = {}\n            collateralTokenList?.forEach(collateralToken => {\n                const isSettlementToken = collateralToken instanceof SettlementToken\n                const collateralTokenContract = collateralToken.contract\n                const collateralTokenAddress = collateralToken.address\n                const balanceCall = isSettlementToken\n                    ? {\n                          contract: contracts.vault,\n                          contractName: ContractName.VAULT,\n                          funcName: \"getSettlementTokenValue\",\n                          funcParams: [account],\n                      }\n                    : {\n                          contract: contracts.vault,\n                          contractName: ContractName.VAULT,\n                          funcName: \"getBalanceByToken\",\n                          funcParams: [account, collateralTokenAddress],\n                      }\n                const decimalsCall = isSettlementToken\n                    ? {\n                          contract: collateralTokenContract,\n                          contractName: ContractName.SETTLEMENT_TOKEN,\n                          funcName: \"decimals\",\n                          funcParams: [],\n                      }\n                    : {\n                          contract: collateralTokenContract,\n                          contractName: ContractName.COLLATERAL_TOKENS,\n                          funcName: \"decimals\",\n                          funcParams: [],\n                      }\n                const calls = [\n                    // NOTE: get free collateral by token\n                    {\n                        contract: contracts.vault,\n                        contractName: ContractName.VAULT,\n                        funcName: \"getFreeCollateralByToken\",\n                        funcParams: [account, collateralTokenAddress],\n                    },\n                    // NOTE: get decimals\n                    decimalsCall,\n                    // NOTE: get balance\n                    balanceCall,\n                ]\n                callsMap[`${collateralToken.address}`] = calls\n            })\n\n            const independentCalls = [\n                // NOTE: get free collateral (total)\n                {\n                    contract: contracts.vault,\n                    contractName: ContractName.VAULT,\n                    funcName: \"getFreeCollateral\",\n                    funcParams: [account],\n                },\n                // NOTE: get account value\n                {\n                    contract: contracts.vault,\n                    contractName: ContractName.VAULT,\n                    funcName: \"getAccountValue\",\n                    funcParams: [account],\n                },\n            ]\n\n            const data = await multicall2.execute(Object.values(callsMap).flat().concat(independentCalls), {\n                failFirstByContract: false,\n                failFirstByClient: false,\n            })\n\n            const vaultDataAllByCollateral: VaultDataAllByCollateral = {}\n            Object.entries(callsMap).forEach(([collateralTokenAddress, calls]) => {\n                const dataChunk = data.splice(0, calls.length)\n                const freeCollateral = dataChunk[0]\n                const decimals = dataChunk[1]\n                const balance = dataChunk[2]\n                vaultDataAllByCollateral[`${collateralTokenAddress}`] = {\n                    freeCollateral: bigNumber2BigAndScaleDown(freeCollateral, decimals),\n                    balance: bigNumber2BigAndScaleDown(balance, decimals),\n                }\n            })\n\n            const accountFreeCollateral = bigNumber2BigAndScaleDown(data[0], COLLATERAL_TOKEN_DECIMAL)\n            const accountBalance = bigNumber2BigAndScaleDown(data[1], SETTLEMENT_TOKEN_DECIMAL)\n            const vaultDataAllCrossCollateral: VaultDataAllCrossCollateral = {\n                accountBalance,\n                accountFreeCollateral,\n            }\n\n            this.emit(\"updatedVaultDataAll\", { vaultDataAllByCollateral, vaultDataAllCrossCollateral })\n        } catch (error) {\n            this.emit(\"updateError\", { error })\n        }\n    }\n}\n\nexport { Vault }\n\nexport type VaultDataAllByCollateral = {\n    [key: string]: { freeCollateral: Big; balance: Big }\n}\nexport type VaultDataAllCrossCollateral = {\n    accountBalance: Big\n    accountFreeCollateral: Big\n}\nexport type VaultDataAll = {\n    vaultDataAllByCollateral: VaultDataAllByCollateral\n    vaultDataAllCrossCollateral: VaultDataAllCrossCollateral\n}\n"],"names":["Vault","Channel","constructor","_perp","account","super","channelRegistry","this","_cache","Map","_contractReader","contractReader","_contract","contracts","vault","async","cache","_fetch","token","amount","address","decimals","getTransaction","contract","contractName","ContractName","VAULT","contractFunctionName","args","big2BigNumberAndScaleUp","value","ETH_DECIMAL_DIGITS","_getEventSourceMap","fetchAndEmitAccountValueUpdated","_createFetchAndEmitAccountValueUpdated","accountValueUpdated","ChannelEventSource","eventSourceStarter","_a","_b","poll","moduleConfigs","period","DEFAULT_PERIOD","cancel","initEventEmitter","fetchAndEmitBalanceListUpdated","_createFetchAndEmitBalanceListUpdated","balanceListUpdated","fetchAndEmitFreeCollateralUpdated","_createFetchAndEmitFreeCollateralUpdated","freeCollateralUpdated","fetchAndEmitFreeCollateralListUpdated","_createFetchAndEmitFreeCollateralListUpdated","freeCollateralListUpdated","fetchAndEmitUpdatedVaultDataAll","getVaultDataAll","bind","updatedVaultDataAll","fetcher","error","emit","key","has","get","result","getAccountValue","invariant","hasConnected","UnauthorizedError","functionName","Promise","all","wallet","collateralTokenList","map","SettlementToken","getVaultBalanceOfSettlementToken","getVaultBalanceByToken","getFreeCollateral","getFreeCollateralByToken","set","createMemoizedFetcher","_fetchUpdateData","a","b","hasNumberChange","getBalanceList","hasNumberArrChange","getFreeCollateralList","logger","multicall2","MulticallReader","callsMap","forEach","collateralToken","isSettlementToken","collateralTokenContract","collateralTokenAddress","balanceCall","funcName","funcParams","decimalsCall","SETTLEMENT_TOKEN","COLLATERAL_TOKENS","calls","independentCalls","data","execute","Object","values","flat","concat","failFirstByContract","failFirstByClient","vaultDataAllByCollateral","entries","dataChunk","splice","length","freeCollateral","balance","bigNumber2BigAndScaleDown","accountFreeCollateral","COLLATERAL_TOKEN_DECIMAL","vaultDataAllCrossCollateral","accountBalance","SETTLEMENT_TOKEN_DECIMAL"],"mappings":"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"}