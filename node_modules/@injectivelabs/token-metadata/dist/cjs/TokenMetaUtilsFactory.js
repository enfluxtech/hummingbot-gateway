"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenMetaUtilsFactory = void 0;
const networks_1 = require("@injectivelabs/networks");
const TokenMetaUtils_1 = require("./TokenMetaUtils");
const network_1 = require("./tokens/network");
const index_1 = __importDefault(require("./tokens/tokens/index"));
class TokenMetaUtilsFactory {
    static make(network = networks_1.Network.Mainnet) {
        switch (network) {
            case networks_1.Network.Staging:
            case networks_1.Network.Mainnet:
            case networks_1.Network.MainnetK8s:
            case networks_1.Network.MainnetLB:
            case networks_1.Network.Local:
                return new TokenMetaUtils_1.TokenMetaUtils(index_1.default);
            case networks_1.Network.Devnet:
                return new TokenMetaUtils_1.TokenMetaUtils((0, network_1.getTokensBySymbolForDevnet)());
            case networks_1.Network.Devnet1:
                return new TokenMetaUtils_1.TokenMetaUtils((0, network_1.getTokensBySymbolForDevnet1)());
            case networks_1.Network.Devnet2:
                return new TokenMetaUtils_1.TokenMetaUtils((0, network_1.getTokensBySymbolForDevnet2)());
            case networks_1.Network.Testnet:
            case networks_1.Network.TestnetOld:
            case networks_1.Network.TestnetK8s:
                return new TokenMetaUtils_1.TokenMetaUtils((0, network_1.getTokensBySymbolForTestnet)());
            default:
                return new TokenMetaUtils_1.TokenMetaUtils(index_1.default);
        }
    }
}
exports.TokenMetaUtilsFactory = TokenMetaUtilsFactory;
//# sourceMappingURL=TokenMetaUtilsFactory.js.map